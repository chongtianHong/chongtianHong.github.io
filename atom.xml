<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ice&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/c972cec44268ea709ae89f880845ea12</icon>
  <subtitle>知耻而后勇</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chongtianhong.github.io/"/>
  <updated>2018-08-09T16:46:16.672Z</updated>
  <id>https://chongtianhong.github.io/</id>
  
  <author>
    <name>Xiaobing Hong</name>
    <email>450707109@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用JS准确获取URL网址中参数的几种方法</title>
    <link href="https://chongtianhong.github.io/2018/05/02/getParamsFromURL/"/>
    <id>https://chongtianhong.github.io/2018/05/02/getParamsFromURL/</id>
    <published>2018-05-01T16:11:36.000Z</published>
    <updated>2018-08-09T16:46:16.672Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在WEB开发中，时常会用到JavaScript来获取当前页面的url网址信息，这篇文章主要介绍了JS准确获取当前页面url网址信息的多种方法，包括正则法、split拆分法等。<a id="more"></a></li></ul><h4 id="获取整个URL字符串"><a href="#获取整个URL字符串" class="headerlink" title="获取整个URL字符串"></a>获取整个URL字符串</h4><ul><li>要想获取URL中的参数，首先我们就要<strong>获取到整个URL字符串</strong>。我们使用下面这个URL为例：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xbhong.top/2018/05/01/vueSet/?token=hello<span class="comment">#more</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h5><ul><li>获取(或设置) URL 的协议部分：<code>window.location.protocol</code>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// window.location.protocol设置或获取 URL 的协议部分</span><br><span class="line">var <span class="built_in">test</span> = window.location.protocol;</span><br><span class="line">alert(<span class="built_in">test</span>);</span><br><span class="line">// 返回弹出：http</span><br></pre></td></tr></table></figure></li></ul><h5 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h5><ul><li>获取(或设置) URL 的主机部分：<code>window.location.host</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// window.location.host设置或获取 URL 的主机部分</span><br><span class="line">var <span class="built_in">test</span> = window.location.host;</span><br><span class="line">alert(<span class="built_in">test</span>);</span><br><span class="line">// 返回弹出：www.xbhong.top</span><br></pre></td></tr></table></figure></li></ul><h5 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h5><ul><li>获取(或设置)  URL 关联的端口号：<code>window.location.port</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// window.location.port设置或获取与 URL 关联的端口号码</span><br><span class="line">var <span class="built_in">test</span> = window.location.port;</span><br><span class="line">alert(<span class="built_in">test</span>);</span><br><span class="line">// 返回弹出：空字符(如果采用默认的80端口(即使添加了:80)，那么返回值并不是默认的80而是空字符)</span><br></pre></td></tr></table></figure></li></ul><h5 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h5><ul><li>获取(或设置)  URL 的路径部分也就是文件地址：<code>window.location.pathname</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// window.location.pathname设置或获取 URL 的路径部分（就是文件地址）</span><br><span class="line">var <span class="built_in">test</span> = window.location.pathname;</span><br><span class="line">alert(<span class="built_in">test</span>);</span><br><span class="line">// 返回弹出：/2018/05/01/vueSet/</span><br></pre></td></tr></table></figure></li></ul><h5 id="查询参数"><a href="#查询参数" class="headerlink" title="查询参数"></a>查询参数</h5><ul><li>获取(或设置) URL属性中跟在问号后面的部分：<code>window.location.search</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// window.location.search设置或获取 href 属性中跟在问号后面的部分</span><br><span class="line">var <span class="built_in">test</span> = window.location.search;</span><br><span class="line">alert(<span class="built_in">test</span>);</span><br><span class="line">// 返回弹出：?token=hello</span><br></pre></td></tr></table></figure></li></ul><h5 id="锚"><a href="#锚" class="headerlink" title="锚"></a>锚</h5><ul><li>获取(或设置)  URL属性中在井号“#”后面的分段：<code>window.location.hash</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// window.location.hash设置或获取 href 属性中在井号“<span class="comment">#”后面的分段</span></span><br><span class="line">var <span class="built_in">test</span> = window.location.hash;</span><br><span class="line">alert(<span class="built_in">test</span>);</span><br><span class="line">// 返回弹出：<span class="comment">#more</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="整个URL"><a href="#整个URL" class="headerlink" title="整个URL"></a>整个URL</h5><ul><li>获取(或设置) 整个 URL字符串：<code>window.location.href</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// window.location.href设置或获取整个 URL字符串</span><br><span class="line">var <span class="built_in">test</span> = window.location.href;</span><br><span class="line">alert(<span class="built_in">test</span>);</span><br><span class="line">// 返回弹出：http://xbhong.top/2018/05/01/vueSet/?token=hello<span class="comment">#more</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="获取URL中的参数值"><a href="#获取URL中的参数值" class="headerlink" title="获取URL中的参数值"></a>获取URL中的参数值</h4><ul><li>获取了URL字符串之后就是获取URL字符串中的参数数据信息。下面是几种获取参数的方法：</li></ul><h5 id="正则法"><a href="#正则法" class="headerlink" title="正则法"></a>正则法</h5><ul><li>同正则表达式对比获取参数值：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> getQueryString(name)&#123;</span><br><span class="line">    var reg = new RegExp(<span class="string">"(^|&amp;)"</span>+ name +<span class="string">"=([^&amp;]*)(&amp;|$)"</span>, i);</span><br><span class="line">    var r = window.location.search.substr(1).match(reg);</span><br><span class="line">    <span class="keyword">if</span> (r!=null)&#123;</span><br><span class="line">        <span class="built_in">return</span> unescape(r[2]); // unescape() 函数可对通过 escape() 编码的字符串进行解码。</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 这样调用：</span><br><span class="line">alert(GetQueryString(<span class="string">"参数名1"</span>));</span><br><span class="line">alert(GetQueryString(<span class="string">"参数名2"</span>));</span><br><span class="line">alert(GetQueryString(<span class="string">"参数名3"</span>));</span><br></pre></td></tr></table></figure></li></ul><h5 id="split拆分法"><a href="#split拆分法" class="headerlink" title="split拆分法"></a>split拆分法</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">GetRequest</span></span>() &#123;</span><br><span class="line">    var url = location.search; //获取url中<span class="string">"?"</span>符后的字串</span><br><span class="line">    var theRequest = new Object();</span><br><span class="line">    <span class="keyword">if</span> (url.indexOf(<span class="string">"?"</span>) != -1) &#123;</span><br><span class="line">        var str = url.substr(1);</span><br><span class="line">        strs = str.split(<span class="string">"&amp;"</span>);</span><br><span class="line">        <span class="keyword">for</span> (var i = 0; i &lt; strs.length; i++) &#123;</span><br><span class="line">            theRequest[strs[i].split(<span class="string">"="</span>)[0]] = unescape(strs[i].split(<span class="string">"="</span>)[1]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> theRequest;</span><br><span class="line">&#125;</span><br><span class="line">var Request = new Object();</span><br><span class="line">Request = GetRequest();</span><br><span class="line">// var id=Request[<span class="string">"id"</span>]; </span><br><span class="line">// var 参数1,参数2,参数3,参数N;</span><br><span class="line">// 参数1 = Request[<span class="string">'参数1'</span>];</span><br><span class="line">// 参数2 = Request[<span class="string">'参数2'</span>];</span><br><span class="line">// 参数3 = Request[<span class="string">'参数3'</span>];</span><br><span class="line">// 参数N = Request[<span class="string">'参数N'</span>];</span><br></pre></td></tr></table></figure><h5 id="单个参数的获取方法"><a href="#单个参数的获取方法" class="headerlink" title="单个参数的获取方法"></a>单个参数的获取方法</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">GetRequest</span></span>() &#123;</span><br><span class="line">    var url = location.search; //获取url中<span class="string">"?"</span>符后的字串</span><br><span class="line">    <span class="keyword">if</span> (url.indexOf(<span class="string">"?"</span>) != -1) &#123;  //判断是否有参数</span><br><span class="line">        var str = url.substr(1); //从第一个字符开始 因为第0个是?号 获取所有除问号的所有符串</span><br><span class="line">        strs = str.split(<span class="string">"="</span>);  //用等号进行分隔 （因为知道只有一个参数 所以直接用等号进分隔 如果有多个参数 要用&amp;号分隔 再用等号进行分隔）</span><br><span class="line">        alert(strs[1]);     //直接弹出第一个参数 （如果有多个参数 还要进行循环的）</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;在WEB开发中，时常会用到JavaScript来获取当前页面的url网址信息，这篇文章主要介绍了JS准确获取当前页面url网址信息的多种方法，包括正则法、split拆分法等。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 $set()的正确使用方式</title>
    <link href="https://chongtianhong.github.io/2018/05/01/vueSet/"/>
    <id>https://chongtianhong.github.io/2018/05/01/vueSet/</id>
    <published>2018-05-01T15:07:06.000Z</published>
    <updated>2018-08-09T16:14:17.714Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在Vue开发中，当生成Vue实例后，再次给数据赋值时，有时候并不会自动更新到视图上去。</li><li>Vue文档中写明：如果<strong>在实例创建之后添加新的属性到实例上</strong>，它<strong>不会触发视图更新</strong>。<a id="more"></a></li><li><p>如下代码，给 student对象新增 age 属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span></span> () &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        student: &#123;</span><br><span class="line">            name: <span class="string">''</span>,</span><br><span class="line">            sex: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>直接</strong>给student<strong>赋值操作</strong>，虽然<strong>可以新增属性</strong>，但是<strong>不会触发视图更新</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">mounted</span></span> () &#123;</span><br><span class="line">    this.student.age = 24;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>原因</strong>：受 ES5 的限制，Vue.js 不能检测到对象属性的添加或删除。因为 Vue.js 在初始化实例时将属性转为 getter/setter，所以属性必须在 data 对象上才能让 Vue.js 转换它，才能让它是响应的。</p></li><li><p>只有当<strong>实例被创建时</strong>，<strong>data中存在的属性才是响应式的</strong>。也就是说如果你添加一个新的属性，比如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.b = <span class="string">'hi'</span></span><br></pre></td></tr></table></figure></li><li><p>那么对 b 的改动将不会触发任何视图的更新。</p></li><li><p>要处理这种情况，我们可以<strong>使用<code>$set()</code>方法</strong>，既可以新增属性，又可以触发视图更新。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 语法：this.<span class="variable">$set</span>(this.data,<span class="string">"key"</span>,value)</span><br><span class="line"><span class="function"><span class="title">mounted</span></span> () &#123;</span><br><span class="line">    this.<span class="variable">$set</span>(this.student,<span class="string">"age"</span>, 24);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果我们知道我们会在晚些时候需要一个属性，但是一开始它为空或不存在，那么我们仅需要设置一些初始值。比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        newTodoText: <span class="string">''</span>,</span><br><span class="line">        visitCount: 0,</span><br><span class="line">        hideCompletedTodos: <span class="literal">false</span>,</span><br><span class="line">        todos: [],</span><br><span class="line">        error: null</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;在Vue开发中，当生成Vue实例后，再次给数据赋值时，有时候并不会自动更新到视图上去。&lt;/li&gt;
&lt;li&gt;Vue文档中写明：如果&lt;strong&gt;在实例创建之后添加新的属性到实例上&lt;/strong&gt;，它&lt;strong&gt;不会触发视图更新&lt;/strong&gt;。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
      <category term="Vue.js" scheme="https://chongtianhong.github.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>页面的重绘与回流及优化</title>
    <link href="https://chongtianhong.github.io/2018/04/30/reflowAndRepaint/"/>
    <id>https://chongtianhong.github.io/2018/04/30/reflowAndRepaint/</id>
    <published>2018-04-30T14:24:28.000Z</published>
    <updated>2018-08-09T16:13:28.728Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在理解页面的重绘与回流（重排）之前，首先要清楚页面呈现的具体过程。<a id="more"></a></li></ul><h4 id="页面呈现的具体过程"><a href="#页面呈现的具体过程" class="headerlink" title="页面呈现的具体过程"></a>页面呈现的具体过程</h4><blockquote>Step1</blockquote><ul><li>浏览器把获取到的<strong>HTML代码解析成1个DOM树</strong>，HTML中的每个tag都是DOM树中的1个节点，<strong>根节点</strong>就是我们常用的<strong>document对象</strong>。</li><li>DOM树里包含了<strong>所有HTML标签</strong>，包括<strong>使用了<code>display:none</code>隐藏的元素</strong>，还有<strong>用JS动态添加的元素</strong>等。</li></ul><blockquote>Step2</blockquote><ul><li>浏览器把<strong>所有样式（用户定义的CSS和用户代理）解析成样式结构体（CSSOM树）</strong>，在解析的过程中会<strong>去掉浏览器不能识别的样式</strong>，比如IE会去掉-moz开头的样式，而FF会去掉_开头的样式。</li></ul><blockquote>Step3</blockquote><ul><li><strong>DOM树</strong>和<strong>样式结构体（CSSOM树）</strong>组合后构建<strong>render tree</strong>。</li><li>render tree类似于DOM tree，但区别很大。<ul><li><strong>render tree能识别样式</strong>，render tree中每个NODE都有自己的style，而且 <strong>render tree不包含隐藏的节点</strong> (比如display:none的节点，还有head节点)，因为这些节点不会用于呈现，而且不会影响呈现的，所以就不会包含到 render tree中。</li></ul></li><li><strong>注意</strong>：<strong>visibility:hidden隐藏的元素还是会包含到 render tree中</strong>的，因为<strong>visibility:hidden 会影响布局(layout)，会占有空间</strong>。</li><li>根据CSS2的标准，<strong>render tree中的每个节点都称为Box (Box dimensions)</strong>，理解页面元素为一个具有填充、边距、边框和位置的盒子。</li></ul><blockquote>Step4</blockquote><ul><li>一旦render tree构建完毕后，<strong>浏览器</strong>就可以<strong>根据render tree来绘制页面</strong>了。如下图：<br><img src="/images/pageShow.jpg" width="600" alt="页面呈现的具体过程" style="border:none"></li></ul><h4 id="回流与重绘"><a href="#回流与重绘" class="headerlink" title="回流与重绘"></a>回流与重绘</h4><h5 id="回流"><a href="#回流" class="headerlink" title="回流"></a>回流</h5><ul><li><strong>回流(reflow)</strong>指的是当<strong>render tree中的一部分(或全部)</strong>因为<strong>元素的规模尺寸，布局，隐藏等改变</strong>而<strong>需要重新构建</strong>，即渲染树需要重新计算。</li><li>也就是说，回流是指<strong>DOM的变化影响到了元素的几何属性（宽和高）</strong>，浏览器会<strong>重新计算元素的几何属性</strong>，会<strong>使渲染树中受到影响的部分失效</strong>，浏览器会<strong>验证DOM树上的所有其他节点的visibility属性</strong>，因此，<strong>回流是低效的</strong>。</li><li><strong>每个页面至少需要一次回流</strong>，就是在<strong>页面第一次加载</strong>的时候。</li><li>在回流的时候，<strong>浏览器</strong>会使渲染树中受到影响的部分失效，并<strong>重新构造这部分渲染树</strong>，<strong>完成回流后</strong>，浏览器会<strong>重新绘制受影响的部分到屏幕中</strong>，该过程称为<strong>重绘</strong>。</li></ul><blockquote>回流的产生</blockquote><ul><li>当<strong>页面布局</strong>和<strong>几何属性改变</strong>时就会<strong>产生回流</strong>。下述情况会发生浏览器回流：<ul><li><strong>DOM树的结构变化</strong>：例如<strong>节点的增减、移动</strong>等。浏览器引擎布局的过程，类似于树的前序遍历，是一个从上到下从左到右的过程。通常在这个过程中，当前元素不会再影响其前面已经遍历过的元素。所以，<strong>如果在body最前面插入一个元素，会导致整个文档的重新渲染</strong>，而<strong>在其后插入一个元素，则不会影响到前面的元素</strong>。</li><li><strong>元素尺寸改变</strong>（边距、填充、边框、宽度和高度）：当DOM元素的几何属性变化时，渲染树中的相关节点就会失效，浏览器会根据DOM元素的变化重新构建渲染树中失效的节点。</li><li><strong>获取某些属性</strong>：当获取一些属性时，浏览器为取得正确的值也会触发重排。这些属性包括：<code>offsetTop</code>、<code>offsetLeft</code>、 <code>offsetWidth</code>、<code>offsetHeight</code>、<code>scrollTop</code>、<code>scrollLeft</code>、<code>scrollWidth</code>、<code>scrollHeight</code>、<code>clientTop</code>、<code>clientLeft</code>、<code>clientWidth</code>、<code>clientHeight</code>、<code>getComputedStyle() (currentStyle in IE)</code>。所以，<strong>在多次使用这些值时应进行缓存</strong>。</li><li><strong>内容改变</strong>，比如文本改变或者图片大小改变而引起的计算值宽度和高度改变；</li><li>页面渲染初始化；</li><li><strong>浏览器窗口尺寸改变</strong>，如resize事件发生时。</li></ul></li></ul><h5 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h5><ul><li>重绘指的是当render tree中的一些<strong>元素</strong>需要<strong>更新属性</strong>，而这些属性只是<strong>影响元素的外观，风格</strong>，而<strong>不会影响布局</strong>的，比如background-color，visibility，outline等。</li><li>重绘不会带来重新布局，并<strong>不一定伴随回流（重排）</strong>。</li></ul><h5 id="两者的关系"><a href="#两者的关系" class="headerlink" title="两者的关系"></a>两者的关系</h5><ul><li>回流必将引起重绘，而重绘不一定会引起回流。</li><li><p>如果<strong>回流</strong>的频率很高，CPU使用率会大大增加。一个元素的重排通常会带来一系列的反应，甚至触发整个文档的重排和重绘，<strong>性能代价是高昂的</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var s = document.body.style; </span><br><span class="line"></span><br><span class="line">s.padding = <span class="string">"2px"</span>; // 回流+重绘</span><br><span class="line"></span><br><span class="line">s.border = <span class="string">"1px solid red"</span>; // 再一次 回流+重绘</span><br><span class="line"></span><br><span class="line">s.color = <span class="string">"blue"</span>; // 再一次重绘</span><br><span class="line"></span><br><span class="line">s.backgroundColor = <span class="string">"#ccc"</span>; // 再一次 重绘</span><br><span class="line"></span><br><span class="line">s.fontSize = <span class="string">"14px"</span>; // 再一次 回流+重绘</span><br><span class="line"></span><br><span class="line">// 添加node，再一次 回流+重绘</span><br><span class="line">document.body.appendChild(document.createTextNode(<span class="string">'abc!'</span>));</span><br><span class="line"></span><br><span class="line">///可以看到每次DOM元素的样式操作都会引发重绘，如果涉及布局还会引发回流。</span><br></pre></td></tr></table></figure></li><li><p><strong>display: none</strong>指的是元素完全不陈列出来，不占据空间，涉及到了DOM结构的改变，因此产生回流和重绘。</p></li><li><strong>visibility：hidden指</strong>的是元素不可见但存在，保留空间，不影响DOM结构的变化，因此只产生重绘。</li></ul><h4 id="减少回流、重绘的方法"><a href="#减少回流、重绘的方法" class="headerlink" title="减少回流、重绘的方法"></a>减少回流、重绘的方法</h4><ul><li><strong>减少回流、重绘</strong>其实就是需要<strong>减少对render tree的操作</strong>（合并多次对DOM和样式的修改），并<strong>减少对一些style信息的请求</strong>，尽量<strong>利用好浏览器的优化策略</strong>。接下来介绍解决方法。</li><li><p>尽量不用内联样式style属性，操作元素样式的时候用添加去掉class类的方式，实现合并多次改变样式属性的操作:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 不好的写法</span><br><span class="line">var left = 1;</span><br><span class="line">var top = 1;</span><br><span class="line">el.style.left = left + <span class="string">"px"</span>;</span><br><span class="line">el.style.top = top + <span class="string">"px"</span>;</span><br><span class="line">// 比较好的写法</span><br><span class="line">el.className += <span class="string">" className1"</span>;</span><br></pre></td></tr></table></figure></li><li><p>让要操作的元素进行“离线处理”，处理完后一起更新：<br>a) 使用DocumentFragment进行缓存操作,引发一次回流和重绘；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//不好的写法（模式中所说的反模式）</span><br><span class="line">var p, t;</span><br><span class="line">p = document.creatElement(<span class="string">'p'</span>);</span><br><span class="line">t = document.creatTextNode(<span class="string">'fist paragraph'</span>);</span><br><span class="line">p.appendChild(t);</span><br><span class="line">document.body.appendChild(p);  //将引起一次回流</span><br><span class="line"></span><br><span class="line">p = document.creatElement(<span class="string">'p'</span>);</span><br><span class="line">t = document.creatTextNode(<span class="string">'second paragraph'</span>);</span><br><span class="line">p.appendChild(t);</span><br><span class="line">document.body.appendChild(p);  //将再引起一次回流</span><br><span class="line"></span><br><span class="line">//好的写法</span><br><span class="line">var p, t, frag;</span><br><span class="line">frag = document.creatDocumentFragment();</span><br><span class="line">p = document.creatElement(<span class="string">'p'</span>);</span><br><span class="line">t = document.creatTextNode(<span class="string">'fist paragraph'</span>);</span><br><span class="line">p.appendChild(t);</span><br><span class="line">farg.appendChild(p);</span><br><span class="line"></span><br><span class="line">p = document.creatElement(<span class="string">'p'</span>);</span><br><span class="line">t = document.creatTextNode(<span class="string">'second paragraph'</span>);</span><br><span class="line">p.appendChild(t);</span><br><span class="line">farg.appendChild(p);</span><br><span class="line"></span><br><span class="line">document.body.appendChild(frag);    //相比前面的方法，这里仅仅引起一次回流，倘若页面里有很多这样的操作，利用文档随便将会提升很多</span><br></pre></td></tr></table></figure><p>b) 使用display:none技术，只引发两次回流和重绘; (只是减少重绘和回流的次数，display：none 是会引起重绘并回流，相对来说，visibility: hidden只会引起重绘)<br>c) 使用cloneNode(true or false) 和 replaceChild 技术，引发一次回流和重绘；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//建立克隆镜像</span><br><span class="line">var oldNode = document.getElementById(<span class="string">'target'</span>),</span><br><span class="line">      <span class="built_in">clone</span> = oldNode.cloneNode(<span class="literal">true</span>);   //深复制</span><br><span class="line"></span><br><span class="line">//   处理克隆对象的操作....</span><br><span class="line"></span><br><span class="line">//完成后</span><br><span class="line">oldNode.parentNode.replaceChild(<span class="built_in">clone</span>, oldNode);</span><br></pre></td></tr></table></figure></li><li><p><strong>给元素加动画的时</strong>候，可以<strong>把该元素的定位设置成absolute或者fixed（动画元素脱离文档流）</strong>，这样不会影响其他元素，<strong>减少回流的Render Tree的规模</strong>。</p></li><li>在<strong>需要经常获取那些引起浏览器重排的属性值</strong>时，要<strong>缓存到变量</strong>。</li></ul><h4 id="减少回流的方法"><a href="#减少回流的方法" class="headerlink" title="减少回流的方法"></a>减少回流的方法</h4><h5 id="CSS中避免回流"><a href="#CSS中避免回流" class="headerlink" title="CSS中避免回流"></a>CSS中避免回流</h5><ul><li>尽可能在DOM树的最末端改变class。</li><li>避免设置多层内联样式。</li><li>动画效果应用到position属性为absolute或fixed的元素上。</li><li>牺牲平滑度换取速度。</li><li>避免使用table布局。</li><li>避免使用CSS的JavaScript表达式。</li></ul><h5 id="JS操作避免回流"><a href="#JS操作避免回流" class="headerlink" title="JS操作避免回流"></a>JS操作避免回流</h5><ul><li>避免逐项更改样式。最好一次性更改style属性，或者将样式列表定义为class并一次性更改class属性。</li><li>避免循环操作DOM。创建一个documentFragment或div，在它上面应用所有DOM操作，最后再把它添加到window.document。</li><li>可以在一个display:none的元素上进行操作，最终把它显示出来。因为display:none上的DOM操作不会引发回流和重绘。</li><li>避免循环读取offsetLeft等属性，在循环之前把它们存起来。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;在理解页面的重绘与回流（重排）之前，首先要清楚页面呈现的具体过程。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="CSS" scheme="https://chongtianhong.github.io/tags/CSS/"/>
    
      <category term="浏览器" scheme="https://chongtianhong.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="重绘" scheme="https://chongtianhong.github.io/tags/%E9%87%8D%E7%BB%98/"/>
    
      <category term="回流" scheme="https://chongtianhong.github.io/tags/%E5%9B%9E%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>block，inline和inline-block的区别</title>
    <link href="https://chongtianhong.github.io/2018/04/28/block/"/>
    <id>https://chongtianhong.github.io/2018/04/28/block/</id>
    <published>2018-04-28T14:25:07.000Z</published>
    <updated>2018-08-06T14:47:07.915Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li>display 属性规定元素应该生成的框的类型，这个属性用于定义建立布局时元素生成的显示框类型。</li><li>设置了<code>display：block</code>的元素将显示为<strong>块级元素</strong>，此元素前后会<strong>带有换行符</strong>。</li><li>设置了<code>display：inline</code>的元素会被显示为<strong>内联元素</strong>，元素前后<strong>没有换行符</strong>。<a id="more"></a></li><li>设置了<code>display：inline-block</code>的元素会显示为<strong>行内块元素</strong>（CSS2.1 新增的值），意思就是说，让这个元素<strong>显示在同一行不换行</strong>，但是又<strong>可以控制高度和宽度</strong>，这相当于内联元素的增强。</li><li><strong>注意</strong>：IE6 不支持inline-block。</li></ul><h4 id="内联元素和块级元素的定义"><a href="#内联元素和块级元素的定义" class="headerlink" title="内联元素和块级元素的定义"></a>内联元素和块级元素的定义</h4><ul><li>内联元素（行内元素）是<strong>不可以控制宽和高</strong>、<strong>竖直margin等盒模型属性</strong>；并且<strong>在同一行显示，不换行</strong>，比如<code>span</code>, <code>a</code>, <code>strong</code>, <code>em</code>, <code>label</code>, <code>input</code>, <code>select</code>, <code>textarea</code>, <code>img</code>, <code>br</code>等元素。</li><li>块级元素时<strong>可以控制宽和高、margin等盒模型属性</strong>，并且<strong>会换行</strong>，比如<code>div</code>、<code>p</code>、<code>ul</code>、<code>li</code>、<code>p</code>和所有的<code>h</code>类标签。</li></ul><h4 id="内联元素和块级元素的区别"><a href="#内联元素和块级元素的区别" class="headerlink" title="内联元素和块级元素的区别"></a>内联元素和块级元素的区别</h4><h5 id="起新行"><a href="#起新行" class="headerlink" title="起新行"></a>起新行</h5><ul><li><strong>块级(block)元素会独占一行</strong>，多个block元素会各自新起一行。<strong>默认情况下，block元素宽度自动填满其父元素宽度</strong>。</li><li><strong>内联(inline)元素不会独占一行</strong>，多个相邻的行内元素会排列在同一行里，直到一行排列不下，才会新换一行，其<strong>宽度随元素的内容而变化</strong>。</li></ul><h5 id="设置宽高"><a href="#设置宽高" class="headerlink" title="设置宽高"></a>设置宽高</h5><ul><li><strong>块级(block)元素</strong>可以设置width，height属性。块级元素即使设置了宽度，仍然独占一行。</li><li><strong>内联(inline)元素</strong>设置width，height无效。</li></ul><h5 id="内外边距"><a href="#内外边距" class="headerlink" title="内外边距"></a>内外边距</h5><ul><li><strong>块级(block)元素</strong>可以设置margin和padding属性。</li><li><strong>内联(inline)元素</strong>的margin和padding属性，水平方向的padding-left，padding-right，margin-left，margin-right都<strong>会产生边距效果</strong>，但<strong>竖直方向</strong>的 margin/padding-top/bottom<strong>不会产生边距效果</strong>。</li></ul><h5 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h5><ul><li><strong>块级(block)元素</strong>可以包含<strong>内联(inline)元素</strong>和<strong>块级(block)元素</strong>，而<strong>内联(inline)元素</strong>只能包含<strong>内联(inline)元素</strong>。</li></ul><blockquote>display: inline-block</blockquote><ul><li><strong>行内块级(inline-block)元素</strong>将对象呈现为inline对象，但是对象的内容作为block对象呈现，之后的内联对象会被排列到一行内。比如我们可以给一个link(a元素)inline-block的属性, 使其<strong>既有块级(block)元素的高宽特性又有内联(inline)元素的同行特性</strong>。</li><li><strong>注意</strong>：IE6 不支持inline-block。在实际运用过程中，要注意浏览器的兼容问题。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;display 属性规定元素应该生成的框的类型，这个属性用于定义建立布局时元素生成的显示框类型。&lt;/li&gt;
&lt;li&gt;设置了&lt;code&gt;display：block&lt;/code&gt;的元素将显示为&lt;strong&gt;块级元素&lt;/strong&gt;，此元素前后会&lt;strong&gt;带有换行符&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;设置了&lt;code&gt;display：inline&lt;/code&gt;的元素会被显示为&lt;strong&gt;内联元素&lt;/strong&gt;，元素前后&lt;strong&gt;没有换行符&lt;/strong&gt;。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="CSS" scheme="https://chongtianhong.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>generator函数返回的遍历器对象中的next方法</title>
    <link href="https://chongtianhong.github.io/2018/04/27/nextOfGenerator/"/>
    <id>https://chongtianhong.github.io/2018/04/27/nextOfGenerator/</id>
    <published>2018-04-27T14:01:36.000Z</published>
    <updated>2018-08-09T16:12:05.642Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong><code>yield</code>表达式本身没有返回值</strong>，或者说<strong>总是返回<code>undefined</code></strong>。</li><li><strong><code>next()</code>方法可以带一个参数</strong>，该参数就会被当作<strong>上一个<code>yield</code>表达式的返回值</strong>。<a id="more"></a></li><li><p>先看一个例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="function"><span class="title">f</span></span>() &#123;</span><br><span class="line">    <span class="keyword">for</span>(var i = 0; <span class="literal">true</span>; i++) &#123;</span><br><span class="line">        var reset = yield i;</span><br><span class="line">        <span class="keyword">if</span>(reset) &#123; </span><br><span class="line">            i = -1; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var g = f();</span><br><span class="line">g.next() // &#123; value: 0, <span class="keyword">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">g.next() // &#123; value: 1, <span class="keyword">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">g.next(<span class="literal">true</span>) // &#123; value: 0, <span class="keyword">done</span>: <span class="literal">false</span> &#125;</span><br></pre></td></tr></table></figure></li><li><p>上面代码先定义了一个<strong>可以无限运行的Generator函数<code>f</code></strong>，如果<code>next()</code>方法没有参数，每次运行到<code>yield</code>表达式，变量<code>reset</code>的值总是<code>undefined</code>。当<code>next()</code>方法带一个参数<code>true</code>时，变量<code>reset</code>就被重置为这个参数（即<code>true</code>），因此<code>i</code>会等于<code>-1</code>，下一轮循环就会从<code>-1</code>开始递增。</p></li><li>注：<strong>每次调用遍历器对象的next方法</strong>，就会<strong>返回一个有着value和done两个属性的对象</strong>。其中，<strong>value属性表示当前的内部状态的值</strong>，是<strong>本次<code>yield</code>表达式</strong>后面的值。</li><li>这个功能有很重要的语法意义。<strong>Generator函数从暂停状态到恢复运行，它的上下文状态（context）是不变的</strong>。通过<code>next()</code>方法的参数，就有办法在 Generator函数开始运行之后，继续向函数体内部注入值。也就是说，<strong>可以在Generator函数运行的不同阶段，从外部向内部注入不同的值</strong>，从而<strong>调整函数行为</strong>。</li><li><p>再看一个例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* foo(x) &#123;</span><br><span class="line">    var y = 2 * (yield (x + 1));</span><br><span class="line">    var z = yield (y / 3);</span><br><span class="line">    <span class="built_in">return</span> (x + y + z);</span><br><span class="line">&#125;</span><br><span class="line">var a = foo(5);</span><br><span class="line">a.next() // Object&#123;value:6, <span class="keyword">done</span>:<span class="literal">false</span>&#125;</span><br><span class="line">a.next() // Object&#123;value:NaN, <span class="keyword">done</span>:<span class="literal">false</span>&#125;</span><br><span class="line">a.next() // Object&#123;value:NaN, <span class="keyword">done</span>:<span class="literal">true</span>&#125;</span><br><span class="line">var b = foo(5);</span><br><span class="line">b.next() // &#123; value:6, <span class="keyword">done</span>:<span class="literal">false</span> &#125;</span><br><span class="line">b.next(12) // &#123; value:8, <span class="keyword">done</span>:<span class="literal">false</span> &#125;</span><br><span class="line">b.next(13) // &#123; value:42, <span class="keyword">done</span>:<span class="literal">true</span> &#125;</span><br></pre></td></tr></table></figure></li><li><p>上面代码中，第二次运行<code>next()</code>方法的时候不带参数，导致 y 的值等于<code>2 * undefined</code>（即<code>NaN</code>），除以 3 以后还是<code>NaN</code>，因此返回对象的<code>value</code>属性也等于<code>NaN</code>。第三次运行<code>next()</code>方法的时候不带参数，所以<code>z</code>等于<code>undefined</code>，返回对象的<code>value</code>属性等于<code>5 + NaN + undefined</code>，即<code>NaN</code>。</p></li><li>如果向<code>next()</code>方法提供参数，返回结果就完全不一样了。上面代码第一次调用<code>b</code>的<code>next()</code>方法时，返回<code>x+1</code>的值<code>6</code>；第二次调用<code>next()</code>方法，将上一次<code>yield</code>表达式的值设为<code>12</code>，因此<code>y</code>等于<code>24</code>，返回<code>y / 3</code>的值<code>8</code>；第三次调用<code>next()</code>方法，将上一次<code>yield</code>表达式的值设为<code>13</code>，因此<code>z</code>等于<code>13</code>，这时<code>x</code>等于<code>5</code>，<code>y</code>等于<code>24</code>，所以<code>return</code>语句的值等于<code>42</code>。</li><li>注意：由于<strong>next()方法的参数表示上一个yield表达式的返回值</strong>，所以<strong>在第一次使用next()方法时，传递参数是无效的</strong>。</li><li>V8 引擎直接忽略第一次使用next()方法时的参数，<strong>只有从第二次使用next()方法开始，参数才是有效的</strong>。从语义上讲，第一个next()方法用来启动遍历器对象，所以不用带有参数。</li><li><p>再看一个通过<code>next()</code>方法的参数，向<strong>Generator函数</strong>内部输入值的例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="function"><span class="title">dataConsumer</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">'Started'</span>);</span><br><span class="line">    console.log(`1. <span class="variable">$&#123;yield&#125;</span>`);</span><br><span class="line">    console.log(`2. <span class="variable">$&#123;yield&#125;</span>`);</span><br><span class="line">    <span class="built_in">return</span> <span class="string">'result'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">let</span> genObj = dataConsumer();</span><br><span class="line">genObj.next();</span><br><span class="line">// Started</span><br><span class="line">// &#123;value: undefined, <span class="keyword">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">genObj.next(<span class="string">'a'</span>)</span><br><span class="line">// 1. a</span><br><span class="line">// &#123;value: undefined, <span class="keyword">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">genObj.next(<span class="string">'b'</span>)</span><br><span class="line">// 2. b</span><br><span class="line">// &#123;value: <span class="string">"result"</span>, <span class="keyword">done</span>: <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>上面代码是一个很直观的例子，每次通过<code>next()</code>方法向<strong>Generator函数</strong>输入值，然后打印出来。</p></li><li><p>如果想要第一次调用<code>next()</code>方法时，就能够输入值，可以<strong><strong>在Generator函数外面再包一层</strong></strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> wrapper(generatorFunction) &#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="keyword">function</span> (...args) &#123;</span><br><span class="line">        <span class="built_in">let</span> generatorObject = generatorFunction(...args);</span><br><span class="line">        generatorObject.next();</span><br><span class="line">        <span class="built_in">return</span> generatorObject;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">const wrapped = wrapper(<span class="keyword">function</span>* () &#123;</span><br><span class="line">    console.log(`First input: <span class="variable">$&#123;yield&#125;</span>`);</span><br><span class="line">    <span class="built_in">return</span> <span class="string">'DONE'</span>;</span><br><span class="line">&#125;);</span><br><span class="line">wrapped().next(<span class="string">'hello!'</span>)</span><br><span class="line">// First input: hello!</span><br></pre></td></tr></table></figure></li><li><p>上面代码中，Generator函数如果不用<code>wrapper</code>先包一层，是无法第一次调用<code>next()</code>方法就输入参数的。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;yield&lt;/code&gt;表达式本身没有返回值&lt;/strong&gt;，或者说&lt;strong&gt;总是返回&lt;code&gt;undefined&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;next()&lt;/code&gt;方法可以带一个参数&lt;/strong&gt;，该参数就会被当作&lt;strong&gt;上一个&lt;code&gt;yield&lt;/code&gt;表达式的返回值&lt;/strong&gt;。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
      <category term="异步编程" scheme="https://chongtianhong.github.io/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>yield 表达式</title>
    <link href="https://chongtianhong.github.io/2018/04/26/yield/"/>
    <id>https://chongtianhong.github.io/2018/04/26/yield/</id>
    <published>2018-04-26T13:04:08.000Z</published>
    <updated>2018-08-05T13:43:06.009Z</updated>
    
    <content type="html"><![CDATA[<ul><li>由于<strong>执行Generator函数返回的遍历器对象，只有调用<code>next</code>方法才会遍历下一个内部状态</strong>，所以其实提供了一种可以<strong>暂停执行</strong>的函数。</li><li><strong><code>yield</code>表达式</strong>就是<strong>暂停标志</strong>。<a id="more"></a></li><li>遍历器对象的<code>next</code>方法的运行逻辑如下:<br>1）遇到<code>yield</code>表达式，就暂停执行后面的操作，并将紧跟在<code>yield</code>后面的那个表达式的值，作为返回的对象的<code>value</code>属性值。<br>2）下一次调用<code>next</code>方法时，再继续往下执行，直到遇到下一个<code>yield</code>表达式。<br>3）如果没有再遇到新的<code>yield</code>表达式，就一直运行到函数结束，直到<code>return</code>语句为止，并将<code>return</code>语句后面的表达式的值，作为返回的对象的<code>value</code>属性值。<br>4）如果该函数没有<code>return</code>语句，则返回的对象的<code>value</code>属性值为<code>undefined</code>。</li><li>需要注意的是，<strong><code>yield</code>表达式后面的表达式，只有当调用<code>next</code>方法、内部指针指向该语句时才会执行</strong>，因此等于为 JavaScript 提供了手动的“惰性求值”（Lazy Evaluation）的语法功能。</li><li><code>yield</code>表达式与<code>return</code>语句既有相似之处，也有区别：<ul><li>相似之处：都能返回紧跟在语句后面的那个表达式的值。</li><li>区别：①每次遇到<code>yield</code>，函数暂停执行，下一次再从该位置继续向后执行，而<strong><code>return</code>语句不具备位置记忆的功能</strong>。②一个函数里面，只能执行一次（或者说一个）<code>return</code>语句，但是可以执行多次（或者说多个）<code>yield</code>表达式。</li></ul></li><li>正常函数只能返回一个值，因为只能执行一次<code>return</code>；<strong>Generator函数</strong>可以返回一系列的值，因为可以有任意多个<code>yield</code>。</li><li><p><strong>Generator函数</strong>可以<strong>不用<code>yield</code>表达式</strong>，这时就变成了一个单纯的<strong>暂缓执行函数</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="function"><span class="title">f</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">'执行了！'</span>)</span><br><span class="line">&#125;</span><br><span class="line">var generator = f();</span><br><span class="line">setTimeout(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    generator.next()</span><br><span class="line">&#125;, 2000);</span><br></pre></td></tr></table></figure></li><li><p>上面代码中，函数f如果是普通函数，在为变量generator赋值时就会执行。但是，<strong>函数f是一个 Generator 函数</strong>，就变成<strong>只有调用next方法时，函数f才会执行</strong>。</p></li><li><strong>注意</strong>：<code>yield</code>表达式<strong>只能用在Generator函数里面</strong>，用在其他地方都会报错。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;由于&lt;strong&gt;执行Generator函数返回的遍历器对象，只有调用&lt;code&gt;next&lt;/code&gt;方法才会遍历下一个内部状态&lt;/strong&gt;，所以其实提供了一种可以&lt;strong&gt;暂停执行&lt;/strong&gt;的函数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;yield&lt;/code&gt;表达式&lt;/strong&gt;就是&lt;strong&gt;暂停标志&lt;/strong&gt;。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
      <category term="异步编程" scheme="https://chongtianhong.github.io/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Generator 函数的语法</title>
    <link href="https://chongtianhong.github.io/2018/04/25/generator/"/>
    <id>https://chongtianhong.github.io/2018/04/25/generator/</id>
    <published>2018-04-25T11:17:06.000Z</published>
    <updated>2018-08-05T14:02:41.399Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>Generator函数</strong>是 ES6 提供的一种<strong>异步编程解决方案</strong>，语法行为与传统函数完全不同。</li><li><strong>Generator函数</strong>有多种理解角度。可以从<strong>语法</strong>和<strong>形式</strong>上进行理解。<a id="more"></a></li></ul><blockquote>从语法上进行理解</blockquote><ul><li>语法上，<strong>Generator函数是一个状态机，封装了多个内部状态</strong>。</li><li><strong>执行Generator函数</strong>会<strong>返回一个遍历器对象</strong>，也就是说，<strong>Generator 函数</strong>除了是状态机，还是一个遍历器对象生成函数。<strong>返回的遍历器对象，可以依次遍历Generator函数内部的每一个状态</strong>。</li></ul><blockquote>从形式上进行理解</blockquote><ul><li>形式上，<strong>Generator函数</strong>是一个普通函数，但是有两个特征<ul><li><code>function</code>关键字与函数名之间有一个星号(*)；</li><li>函数体内部使用<code>yield</code>表达式，定义不同的内部状态。</li></ul></li><li><p>例如，下面代码定义了一个<strong>Generator函数</strong><code>helloWorldGenerator</code>，它内部有两个<code>yield</code>表达式（hello和world），即该函数有三个状态：hello，world 和 return 语句（结束执行）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="function"><span class="title">helloWorldGenerator</span></span>() &#123;</span><br><span class="line">    yield <span class="string">'hello'</span>;</span><br><span class="line">    yield <span class="string">'world'</span>;</span><br><span class="line">    <span class="built_in">return</span> <span class="string">'ending'</span>;</span><br><span class="line">&#125;</span><br><span class="line">var hw = helloWorldGenerator();</span><br></pre></td></tr></table></figure></li><li><p>然后，<strong>Generator函数</strong>的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。</p></li><li><p><strong>不同</strong>的是，<strong>调用Generator函数后，该函数并不执行</strong>，<strong>返回的</strong>也不是函数运行结果，而<strong>是一个指向内部状态的指针对象</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hw.next()  // &#123; value: <span class="string">'hello'</span>, <span class="keyword">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">hw.next()  // &#123; value: <span class="string">'world'</span>, <span class="keyword">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">hw.next()  // &#123; value: <span class="string">'ending'</span>, <span class="keyword">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">hw.next()  // &#123; value: undefined, <span class="keyword">done</span>: <span class="literal">true</span> &#125;</span><br></pre></td></tr></table></figure></li><li><p>下一步，必须<strong>调用遍历器对象的<code>next</code>方法，使得指针移向下一个状态</strong>。也就是说，每次调用<code>next</code>方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个<code>yield</code>表达式（或return语句）为止。</p></li><li>换言之，<strong>Generator函数是分段执行的，<code>yield</code>表达式是暂停执行的标记，而<code>next</code>方法可以恢复执行</strong>。</li></ul><blockquote>判断是否为generator</blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> isGen(fn) &#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="string">'function'</span> === typeof fn &amp;&amp; fn.constructor.name === <span class="string">'GeneratorFunction'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote>总结</blockquote><ul><li><strong>调用Generator函数，返回一个遍历器对象</strong>，代表<strong>Generator函数</strong>的<strong>内部指针</strong>。以后，<strong>每次调用遍历器对象的next方法</strong>，就会<strong>返回一个有着value和done两个属性的对象</strong>。<ul><li>value属性表示当前的内部状态的值，是<code>yield</code>表达式后面那个表达式的值；</li><li><code>done</code>属性是一个<strong>布尔值</strong>，表示<strong>是否遍历结束</strong>。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Generator函数&lt;/strong&gt;是 ES6 提供的一种&lt;strong&gt;异步编程解决方案&lt;/strong&gt;，语法行为与传统函数完全不同。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generator函数&lt;/strong&gt;有多种理解角度。可以从&lt;strong&gt;语法&lt;/strong&gt;和&lt;strong&gt;形式&lt;/strong&gt;上进行理解。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
      <category term="异步编程" scheme="https://chongtianhong.github.io/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入理解JS闭包</title>
    <link href="https://chongtianhong.github.io/2018/04/24/closure/"/>
    <id>https://chongtianhong.github.io/2018/04/24/closure/</id>
    <published>2018-04-24T11:14:57.000Z</published>
    <updated>2018-08-05T12:26:02.316Z</updated>
    
    <content type="html"><![CDATA[<ul><li>闭包（closure）是Javascript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。<a id="more"></a></li></ul><h4 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h4><ul><li>要理解闭包，首先必须理解Javascript特殊的<strong>变量作用域</strong>。</li><li>变量的作用域无非就是两种：<strong>全局变量</strong>和<strong>局部变量</strong>。</li><li><p>Javascript语言的特殊之处，就在于<strong>函数内部可以直接读取全局变量</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var n = 999;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">f1</span></span>()&#123;</span><br><span class="line">    alert(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f1(); // 999</span><br></pre></td></tr></table></figure></li><li><p>另一方面，在<strong>函数外部无法读取函数内的局部变量</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">f1</span></span>()&#123;</span><br><span class="line">    var n = 999;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(n); // Uncaught ReferenceError: n is not defined</span><br></pre></td></tr></table></figure></li><li><p>这里有一个地方需要注意，函数内部声明变量的时候，一定要使用<code>var</code>命令。如果不用的话，实际上相当于声明了一个全局变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">f1</span></span>()&#123;</span><br><span class="line">    n = 999;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f1();</span><br><span class="line"></span><br><span class="line">alert(n); // 999</span><br></pre></td></tr></table></figure></li></ul><h4 id="如何从函数外部读取局部变量？"><a href="#如何从函数外部读取局部变量？" class="headerlink" title="如何从函数外部读取局部变量？"></a>如何从函数外部读取局部变量？</h4><ul><li><p>出于种种原因，我们有时候<strong>需要得到函数内的局部变量</strong>。但是，前面已经说过了，正常情况下，这是办不到的，只有通过变通方法才能实现。那就是<strong>在函数的内部，再定义一个函数</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">f1</span></span>()&#123;</span><br><span class="line">    n = 999;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">f2</span></span>()&#123;</span><br><span class="line">        alert(n); // 999</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1 就是不可见的。这就是Javascript语言特有的<strong>“链式作用域（chain scope）”</strong>结构，子对象会一级一级地向上寻找所有父对象的变量。所以，<strong>父对象的所有变量，对子对象都是可见的，反之则不成立</strong>。</p></li><li>因为f2可以读取f1中的局部变量，所以只要把f2作为返回值，就可以在f1外部读取它的内部变量了：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">f1</span></span>()&#123;</span><br><span class="line">    n = 999;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">f2</span></span>()&#123;</span><br><span class="line">        alert(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line">var result = f1();</span><br><span class="line"></span><br><span class="line">result(); // 999</span><br></pre></td></tr></table></figure></li></ul><h4 id="闭包的概念"><a href="#闭包的概念" class="headerlink" title="闭包的概念"></a>闭包的概念</h4><ul><li>上面代码中的提到的f2函数，就是闭包。</li><li>使用闭包的原因：<strong>局部变量无法共享和长久的保存</strong>，而<strong>全局变量可能造成变量污染</strong>，所以我们希望有一种机制<strong>既可以长久的保存变量又不会造成全局污染</strong>。</li><li><strong>有权访问另一个函数作用域内变量的函数</strong>都是闭包。</li><li>由于在Javascript语言中，<strong>只有函数内部的子函数才能读取局部变量</strong>，因此可以把闭包简单理解成“<strong>定义在一个函数内部的函数</strong>”。</li><li>利用闭包可以<strong>突破作用链域</strong>，将函数内部的<strong>变量</strong>和<strong>方法</strong>传递到外部。所以，在本质上，<strong>闭包</strong>就是将<strong>函数内部</strong>和<strong>函数外部</strong>连接起来的一座<strong>桥梁</strong>。</li></ul><h4 id="闭包的用途"><a href="#闭包的用途" class="headerlink" title="闭包的用途"></a>闭包的用途</h4><ul><li>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的<strong>可以读取函数内部的变量</strong>；另一个就是<strong>让这些变量的值始终保持在内存中</strong>，这些变量不会被垃圾回收机制回收。</li><li><p>如下面的例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">f1</span></span>()&#123;</span><br><span class="line">    var n = 999;</span><br><span class="line">    nAdd = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        n += 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">f2</span></span>()&#123;</span><br><span class="line">        alert(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var result = f1();</span><br><span class="line">result(); // 999</span><br><span class="line">nAdd();</span><br><span class="line">result(); // 1000</span><br></pre></td></tr></table></figure></li><li><p>在这段代码中，<strong>result实际上就是闭包f2函数</strong>。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，<strong>函数f1中的局部变量n一直保存在内存中</strong>，并没有在f1调用后被自动清除。</p></li><li>原因：<strong>f1是f2的父函数</strong>，而<strong>f2被赋给了一个全局变量</strong>，这导致<strong>f2始终在内存中</strong>，而<strong>f2的存在依赖于f1</strong>，因此<strong>f1也始终在内存中</strong>，不会在调用结束后，被垃圾回收机制（garbage collection）回收。</li><li>这段代码中另一个值得注意的地方，就是<code>nAdd=function(){n+=1}</code>这一部分的代码，首先在<strong>nAdd前面没有使用var关键字</strong>，因此，<strong>nAdd是一个全局变量</strong>，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以<strong>nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作</strong>。</li><li>再看一个例子：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 代码片段一</span><br><span class="line">var name = <span class="string">"The Window"</span>;   </span><br><span class="line">var object = &#123;   </span><br><span class="line">    name : <span class="string">"My Object"</span>,   </span><br><span class="line">    getNameFunc : <span class="function"><span class="title">function</span></span>()&#123;   </span><br><span class="line">        <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;   </span><br><span class="line">            <span class="built_in">return</span> this.name;   </span><br><span class="line">        &#125;;   </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;;   </span><br><span class="line">alert(object.getNameFunc()());  //The Window</span><br><span class="line"></span><br><span class="line">// 代码片段二</span><br><span class="line">var name = <span class="string">"The Window"</span>;</span><br><span class="line">var object = &#123;</span><br><span class="line">    name: <span class="string">"My Object"</span>,</span><br><span class="line">    getNameFunc: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        var that = this;</span><br><span class="line">        <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">            <span class="built_in">return</span> that.name;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">alert(object.getNameFunc()()); //My Object</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用闭包的注意点"><a href="#使用闭包的注意点" class="headerlink" title="使用闭包的注意点"></a>使用闭包的注意点</h4><ul><li>由于<strong>闭包会使得函数中的变量都被保存在内存中</strong>，<strong>内存消耗很大</strong>，所以<strong>不能滥用闭包</strong>，否则会造成网页的性能问题，在IE中可能导致<strong>内存泄露</strong>。<strong>解决方法</strong>：在<strong>退出函数之前，将不使用的局部变量全部删除</strong>。</li><li><strong>闭包会在父函数外部，改变父函数内部变量的值</strong>。所以，如果我们把<strong>父函数</strong>当作<strong>对象（object）</strong>使用，把<strong>闭包</strong>当作它的<strong>公用方法（Public Method）</strong>，把<strong>内部变量</strong>当作它的<strong>私有属性（private value）</strong>，这时一定要小心，<strong>不要随便改变父函数内部变量的值</strong>。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;闭包（closure）是Javascript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
      <category term="闭包" scheme="https://chongtianhong.github.io/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Vue的计算属性</title>
    <link href="https://chongtianhong.github.io/2018/04/23/vueComputed/"/>
    <id>https://chongtianhong.github.io/2018/04/23/vueComputed/</id>
    <published>2018-04-23T14:51:42.000Z</published>
    <updated>2018-08-12T07:59:17.416Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li>计算属性是需要<strong>复杂的逻辑</strong>和很多<strong>组件基础状态</strong>最后才能得到其<strong>正确值</strong>的属性。</li><li><strong>模板内的表达式</strong>非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。<a id="more"></a></li><li><p>如下面的代码所示，模板不再是简单的声明式逻辑，这里是想要显示变量 message 的翻转字符串：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"example"</span>&gt;</span><br><span class="line">  &#123;&#123; message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>) &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>当我们想要<strong>在模板中多次引用此处的翻转字符串</strong>时，就会更加难以处理。</p></li><li>所以，对于任何<strong>复杂逻辑</strong>，我们都应当<strong>使用计算属性</strong>。</li></ul><h4 id="计算属性的使用方法"><a href="#计算属性的使用方法" class="headerlink" title="计算属性的使用方法"></a>计算属性的使用方法</h4><ul><li><p>在Vue里面，所有的计算属性都写在 vue 实例的 <code>computed</code> 属性中，这个<strong>计算属性就是一个函数</strong>，<strong>返回值</strong>为最后<strong>属性的值</strong>。如下面的例子所示，totalPrice 就是一个计算属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">  <span class="function"><span class="title">totalPrice</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> (this.good.price * this.good.count) * this.discount + this.deliver;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义完成之后，我们就可以像用普通属性一样去用计算属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;h2&gt;本店起送金额￥20&lt;/h2&gt;</span><br><span class="line">    &lt;h3&gt;配送费￥5&lt;/h3&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      您购买了&#123;&#123;good.name&#125;&#125;共&#123;&#123;good.count&#125;&#125;份===￥&#123;&#123;good.price&#125;&#125;/份</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;总价：&#123;&#123;totalPrice&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data:&#123;</span><br><span class="line">    good:&#123;id:1,price:10,name:<span class="string">'红烧牛肉盖饭'</span>,count:1&#125;,</span><br><span class="line">    discount:0.8,</span><br><span class="line">    deliver:5</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">    <span class="function"><span class="title">totalPrice</span></span>()&#123;</span><br><span class="line">      <span class="built_in">return</span> (this.good.price*this.good.count)*this.discount+this.deliver;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>计算属性的方法可以包含很多繁重的逻辑，最终返回我们需要的值。</p></li><li>通过计算属性的使用，View层的代码会变的非常精简，且容易维护。</li></ul><h4 id="计算属性缓存-vs-方法"><a href="#计算属性缓存-vs-方法" class="headerlink" title="计算属性缓存 vs 方法"></a>计算属性缓存 vs 方法</h4><ul><li><p>我们可以通过在表达式中调用方法来达到同样的效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;总价：&#123;&#123;totalPrice()&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>同时，将computed属性换成methods属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 在组件中</span><br><span class="line">methods: &#123;</span><br><span class="line">  <span class="function"><span class="title">totalPrice</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> (this.good.price*this.good.count)*this.discount+this.deliver;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可见，我们可以将<strong>同一函数</strong>定义为一个方法而不是一个计算属性。两种方式的<strong>最终结果是完全相同的</strong>。</p></li><li>然而，不同的是<strong>计算属性是基于它们的依赖进行缓存的</strong>。计算属性<strong>只有在它的相关依赖发生改变时</strong>才会<strong>重新求值</strong>。</li><li>这就意味着只要<strong>函数使用的变量</strong>还没有发生改变，<strong>多次访问</strong>totalPrice<strong>计算属性</strong>会<strong>立即返回之前的计算结果</strong>，而<strong>不必再次执行函数</strong>。</li><li><p>注意：因为 Date.now() 不是响应式依赖，因此下面例子的计算属性将不再更新：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  now: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    <span class="built_in">return</span> Date.now()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>相比之下，每当<strong>触发重新渲染</strong>时，<strong>调用方法将总会再次执行函数</strong>。</p></li></ul><blockquote>两者的区别</blockquote><ul><li>对于计算属性而言，它<strong>返回的是运算的结果</strong>，它是<strong>基于依赖进行缓存</strong>的（某些属性是非依赖的），只有调用的返回的结果发生改变的时候们才会导致computed属性重新计算调用。</li><li>对于<strong>方法</strong>来说，<strong>需要触发源</strong>。与computed不同的是，它<strong>可以有返回值或者可以没有返回值</strong>（即可以只有逻辑代码）。但是<strong>方法的每次调用都会重新计算</strong>，所以相较于计算属性来说，<strong>在性能消耗上，是会有相较高的性能消耗</strong>。</li></ul><h4 id="计算属性-vs-侦听属性"><a href="#计算属性-vs-侦听属性" class="headerlink" title="计算属性 vs 侦听属性"></a>计算属性 vs 侦听属性</h4><ul><li>Vue 提供了一种更通用的方式来观察和响应 Vue 实例上的数据变动：侦听（watch）属性。</li><li>当我们有一些数据需要随着其它数据变动而变动时，也可以使用侦听（watch）属性。</li><li><p>然而，通常更好的做法是使用计算属性而不是命令式的 watch 回调。如下面的例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"demo"</span>&gt;&#123;&#123; fullName &#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Foo'</span>,</span><br><span class="line">    lastName: <span class="string">'Bar'</span>,</span><br><span class="line">    fullName: <span class="string">'Foo Bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    firstName: <span class="keyword">function</span> (val) &#123;</span><br><span class="line">      this.fullName = val + <span class="string">' '</span> + this.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    lastName: <span class="keyword">function</span> (val) &#123;</span><br><span class="line">      this.fullName = this.firstName + <span class="string">' '</span> + val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>上面代码是命令式且重复的。将它与计算属性的版本进行比较：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Foo'</span>,</span><br><span class="line">    lastName: <span class="string">'Bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    fullName: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">      <span class="built_in">return</span> this.firstName + <span class="string">' '</span> + this.lastName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="计算属性的-setter"><a href="#计算属性的-setter" class="headerlink" title="计算属性的 setter"></a>计算属性的 setter</h4><ul><li><p>计算属性默认只有 getter ，不过在需要时也可以提供一个 setter ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// ...</span><br><span class="line">computed: &#123;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    // getter</span><br><span class="line">    get: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">      <span class="built_in">return</span> this.firstName + <span class="string">' '</span> + this.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    // setter</span><br><span class="line">    <span class="built_in">set</span>: <span class="keyword">function</span> (newValue) &#123;</span><br><span class="line">      var names = newValue.split(<span class="string">' '</span>)</span><br><span class="line">      this.firstName = names[0]</span><br><span class="line">      this.lastName = names[names.length - 1]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure></li><li><p>现在再运行 <code>vm.fullName = ‘John Doe’</code> 时，setter 会被调用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也会相应地被更新。</p></li></ul><h4 id="watch、computed和methods之间的对比"><a href="#watch、computed和methods之间的对比" class="headerlink" title="watch、computed和methods之间的对比"></a>watch、computed和methods之间的对比</h4><ul><li><code>computed</code>属性的结果会被<strong>缓存</strong>，除非<strong>依赖的响应式属性变化</strong>才会<strong>重新计算</strong>。主要当做<strong>属性</strong>来使用；</li><li><code>methods</code>方法表示一个具体的操作，主要<strong>书写业务逻辑</strong>；</li><li><code>watch</code>一个对象，<strong>键</strong>是需要观察的表达式，<strong>值</strong>是对应回调函数。主要用来<strong>监听某些特定数据的变化</strong>，从而<strong>进行某些具体的业务逻辑操作</strong>；可以看作是<code>computed</code>和<code>methods</code>的结合体。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;计算属性是需要&lt;strong&gt;复杂的逻辑&lt;/strong&gt;和很多&lt;strong&gt;组件基础状态&lt;/strong&gt;最后才能得到其&lt;strong&gt;正确值&lt;/strong&gt;的属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模板内的表达式&lt;/strong&gt;非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
      <category term="Vue.js" scheme="https://chongtianhong.github.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>关于Vue.nextTick()的使用</title>
    <link href="https://chongtianhong.github.io/2018/04/22/nextTick/"/>
    <id>https://chongtianhong.github.io/2018/04/22/nextTick/</id>
    <published>2018-04-22T03:10:13.000Z</published>
    <updated>2018-08-09T14:43:46.971Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li><code>Vue.nextTick()</code>的官方解释是：在下次 DOM 更新循环结束之后执行延迟回调。在<strong>修改数据之后立即使用</strong>这个方法，获取更新后的 DOM。</li><li>放在<code>Vue.nextTick()</code>回调函数中的执行的应该是涉及DOM操作的JavaScript代码。<a id="more"></a></li><li>Vue的<strong>响应式原理</strong>：在data选项里所有属性都会被watcher监控，当修改了data的某一个值，并不会立即反映到视图中。Vue会将我们<strong>对data的更改放到watcher的一个队列中</strong>（异步），只有在<strong>当前任务空闲时才会去执行watcher队列任务</strong>。这就有一个延迟时间。</li><li>虽然我们看起来是直接反映到视图的，其实并不是，只是浏览器引擎在很短的时间内就比较完了数据的前后差异并更新到视图里。</li></ul><blockquote>Vue.nextTick()的由来</blockquote><ul><li>由于VUE的数据驱动视图更新，是异步的，即<strong>修改数据时，视图不会立刻更新</strong>，而是<strong>等同一事件循环中的所有数据变化完成之后</strong>，再<strong>统一进行视图更新</strong>。</li></ul><blockquote>Vue.nextTick()触发的时机</blockquote><ul><li>结合nextTick的由来，可以推出每个事件循环中，nextTick触发的时机：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">同一事件循环中的代码执行完毕 -&gt; DOM 更新 -&gt; nextTick callback触发</span><br></pre></td></tr></table></figure></li></ul><h4 id="Vue-nextTick-的使用时机"><a href="#Vue-nextTick-的使用时机" class="headerlink" title="Vue.nextTick()的使用时机"></a>Vue.nextTick()的使用时机</h4><ul><li>在<strong>Vue生命周期的<code>created()</code>钩子函数中进行的DOM操作</strong>一定要放在<code>Vue.nextTick()</code>的回调函数中。<ul><li>原因是<strong>在<code>created()</code>钩子函数执行的时候，DOM 其实还未进行任何渲染</strong>，而此时进行DOM操作无异于徒劳，所以此处一定要将DOM操作的JavaScript代码放进<code>Vue.nextTick()</code>的回调函数中。</li></ul></li><li>在<strong>Vue生命周期的<code>mounted()</code>钩子函数中进行的DOM操作</strong>不需要使用<code>Vue.nextTick()。<ul><li>因为该<strong>钩子函数执行时所有的DOM挂载和渲染都已完成</strong>，此时在该钩子函数中进行任何DOM操作都不会有问题 。</li></ul></code></li><li>在<strong>数据变化后要执行的某个操作</strong>，而这个操作需要使用<strong>随数据改变而改变的DOM结构</strong>的时候，这个操作都应该放进<code>Vue.nextTick()</code>的回调函数中。</li></ul><blockquote>原因</blockquote><ul><li>Vue是<strong>异步执行DOM更新</strong>的，一旦观察到数据变化，Vue就会开启一个队列，然后把在<strong>同一个事件循环 (event loop) 当中观察到数据变化的 watcher 推送进这个队列</strong>。<strong>如果这个watcher被触发多次，只会被推送到队列一次</strong>。这种缓冲行为可以有效的去掉重复数据造成的不必要的计算和DOM操作。而<strong>在下一个事件循环时</strong>，Vue会<strong>清空队列，并进行必要的DOM更新</strong>。</li><li>当设置 <code>vm.someData = ‘new value’</code>时，DOM 并不会马上更新，而是在异步队列被清除，也就是下一个事件循环开始时执行更新时才会进行必要的DOM更新。如果此时想要根据更新的 DOM 状态去做某些事情，就会出现问题。<strong>为了在数据变化之后等待 Vue 完成更新 DOM </strong>，可以<strong>在数据变化之后立即使用 <code>Vue.nextTick(callback)</code></strong>，这样回调函数<strong>在 DOM 更新完成后就会调用</strong>。</li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><ul><li>前面提到，在修改数据之后立即使用<code>Vue.nextTick(callback)</code><strong>，能实现等待 DOM 更新后执行callback。它跟全局方法 <code>Vue.nextTick</code>* 一样，不同的是</strong>回调的 this 自动绑定到调用它的实例**上。</li><li><p>DOM</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p ref=<span class="string">"myWidth"</span> v-if=<span class="string">"showMe"</span>&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"getMyWidth"</span>&gt;获取p元素宽度&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>script</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">'Hello Vue.js'</span>,</span><br><span class="line">        showMe: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">getMyWidth</span></span>() &#123;</span><br><span class="line">            this.showMe = <span class="literal">true</span>;</span><br><span class="line">            //this.message = this.<span class="variable">$refs</span>.myWidth.offsetWidth;// 报错 TypeError: this.<span class="variable">$refs</span>.myWidth is undefined</span><br><span class="line">            this.<span class="variable">$nextTick</span>(()=&gt;&#123;</span><br><span class="line">                // DOM元素更新后执行，此时能拿到p元素的属性</span><br><span class="line">                this.message = this.<span class="variable">$refs</span>.myWidth.offsetWidth;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Vue.nextTick()&lt;/code&gt;的官方解释是：在下次 DOM 更新循环结束之后执行延迟回调。在&lt;strong&gt;修改数据之后立即使用&lt;/strong&gt;这个方法，获取更新后的 DOM。&lt;/li&gt;
&lt;li&gt;放在&lt;code&gt;Vue.nextTick()&lt;/code&gt;回调函数中的执行的应该是涉及DOM操作的JavaScript代码。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
      <category term="Vue.js" scheme="https://chongtianhong.github.io/tags/Vue-js/"/>
    
      <category term="DOM更新" scheme="https://chongtianhong.github.io/tags/DOM%E6%9B%B4%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>Vue2中ref属性的使用方法</title>
    <link href="https://chongtianhong.github.io/2018/04/21/vueRef/"/>
    <id>https://chongtianhong.github.io/2018/04/21/vueRef/</id>
    <published>2018-04-21T03:51:52.000Z</published>
    <updated>2018-08-09T16:14:13.057Z</updated>
    
    <content type="html"><![CDATA[<ul><li><code>ref</code>被用来给<strong>元素</strong>或<strong>子组件注册引用信息</strong>。</li><li>引用信息将会注册在<strong>父组件</strong>的<code>$refs</code>对象上。<ul><li>如果在普通的DOM元素上使用，引用指向的就是DOM元素；</li><li>如果用在子组件上，引用就指向组件实例。<a id="more"></a></li></ul></li><li><p>DOM元素上使用:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 访问DOM元素</span><br><span class="line">&lt;p ref=<span class="string">"p"</span>&gt;hello&lt;/p&gt;</span><br><span class="line">var domEle = vm.<span class="variable">$refs</span>.p</span><br></pre></td></tr></table></figure></li><li><p>尽管有 prop 和事件，但是有时仍然需要在 JavaScript 中直接访问子组件。为此可以使用 ref 为子组件指定一个引用 ID。</p></li><li><p>子组件上使用:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"parent"</span>&gt;</span><br><span class="line">    &lt;user-profile ref=<span class="string">"profile"</span>&gt;&lt;/user-profile&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">var parent = new Vue(&#123; el: <span class="string">'#parent'</span> &#125;)</span><br><span class="line">// 访问子组件实例</span><br><span class="line">var child = parent.<span class="variable">$refs</span>.profile</span><br></pre></td></tr></table></figure></li><li><p>当<code>v-for</code>用于元素或组件的时候，引用信息将是包含DOM节点或组件实例的数组。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// html</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">　　&lt;li ref=<span class="string">"refCon"</span>&gt;1&lt;/li&gt;</span><br><span class="line">　　&lt;li ref=<span class="string">"refCon"</span>&gt;2&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">// js</span><br><span class="line">created: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    this.<span class="variable">$nextTick</span>(() =&gt; &#123;</span><br><span class="line">        console.log(this.<span class="variable">$refs</span>.refCon) </span><br><span class="line">        // 打印结果：&lt;li&gt;2&lt;/li&gt; 本以为会获得一个数组</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果要获得数组，应该在li里面使用v-for遍历：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// html</span><br><span class="line">&lt;ul&gt;</span><br><span class="line"> &lt;li v-for=<span class="string">"item in people"</span> ref=<span class="string">"refContent"</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">// js</span><br><span class="line">data: &#123;</span><br><span class="line">    people:[<span class="string">'三姑'</span>,<span class="string">'四婶'</span>,<span class="string">'五叔'</span>,<span class="string">'六姨'</span>,<span class="string">'七舅姥爷'</span>]</span><br><span class="line">&#125;,</span><br><span class="line">created: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    this.<span class="variable">$nextTick</span>(() =&gt; &#123;</span><br><span class="line">        console.log(this.<span class="variable">$refs</span>.refContent) // 数组</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>关于<code>ref</code>注册时间的重要说明：因为<code>ref</code>本身是作为渲染结果被创建的，<strong>在初始渲染的时候不能访问它们，因为它们还不存在</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// js</span><br><span class="line">data: &#123;</span><br><span class="line">   people:[<span class="string">'三姑'</span>,<span class="string">'四婶'</span>,<span class="string">'五叔'</span>,<span class="string">'六姨'</span>,<span class="string">'七舅姥爷'</span>]</span><br><span class="line">&#125;,</span><br><span class="line">created: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">   console.log(this.<span class="variable">$refs</span>.refContent)</span><br><span class="line">   // undefined</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>$refs</code>也不是响应式的，因此不应该视图用它在模板中做数据绑定。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ref&lt;/code&gt;被用来给&lt;strong&gt;元素&lt;/strong&gt;或&lt;strong&gt;子组件注册引用信息&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;引用信息将会注册在&lt;strong&gt;父组件&lt;/strong&gt;的&lt;code&gt;$refs&lt;/code&gt;对象上。&lt;ul&gt;
&lt;li&gt;如果在普通的DOM元素上使用，引用指向的就是DOM元素；&lt;/li&gt;
&lt;li&gt;如果用在子组件上，引用就指向组件实例。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
      <category term="Vue.js" scheme="https://chongtianhong.github.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>理解Object.defineProperty的作用</title>
    <link href="https://chongtianhong.github.io/2018/04/20/defineProperty/"/>
    <id>https://chongtianhong.github.io/2018/04/20/defineProperty/</id>
    <published>2018-04-20T01:41:21.000Z</published>
    <updated>2018-08-09T16:12:24.452Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li>对象是由多个<strong>键/值对</strong>组成的<strong>无序的集合</strong>。对象中<strong>每个属性</strong>对应<strong>任意类型的值</strong>。</li><li><p>定义对象可以使用构造函数或字面量的形式：</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var obj = new Object();  // 或var obj = &#123;&#125;</span><br><span class="line">obj.name = <span class="string">"张三"</span>;  // 添加属性</span><br><span class="line">obj.say = <span class="function"><span class="title">function</span></span>()&#123;&#125;;  // 添加方法</span><br></pre></td></tr></table></figure></li><li><p>除了以上添加属性的方式，还可以使用<code>Object.defineProperty()</code>方法定义新属性或修改原有的属性。</p></li><li><code>Object.defineProperty()</code>方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。</li><li>vue.js的<strong>双向数据绑定</strong>就是通过<code>Object.defineProperty()</code>方法实现的，俗称<strong>属性拦截器</strong>。</li></ul><h4 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h4><h5 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h5><div class="info">Object.defineProperty(obj, prop, descriptor)</div><ul><li><p>参数说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj：必需。要在其上定义属性的对象。</span><br><span class="line">prop：必需。需定义或修改的属性的名称。</span><br><span class="line">descriptor：必需。将被定义或修改的属性描述符。</span><br></pre></td></tr></table></figure></li><li><p>返回值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">被传递给函数的对象，即第一个参数obj。</span><br></pre></td></tr></table></figure></li></ul><h5 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h5><ul><li>通过<strong>赋值操作</strong>添加的普通属性是<strong>可枚举</strong>的，能够在属性枚举期间呈现出来（<code>for…in</code> 或 <code>Object.keys</code> 方法），这些<strong>属性的值可以被改变</strong>，也<strong>可以被删除</strong>。</li><li>注意：<code>Object.defineProperty()</code>方法允许<strong>精确添加或修改对象的属性</strong>。这个方法<strong>允许修改默认的额外选项（或配置</strong>）。<strong>默认情况</strong>下，使用<code>Object.defineProperty()</code>方法<strong>添加的属性值</strong>是<strong>不可修改</strong>的。</li></ul><h5 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h5><ul><li>对象里目前存在的属性描述符有两种主要形式：<strong>数据描述符</strong>和<strong>存取描述符</strong>。</li><li><strong>数据描述符</strong>用于在修改或定义对象的某个属性的时候，给这个属性添加一些特性。</li><li><strong>存取描述符</strong>是由一对getter-setter函数功能来描述的属性。</li><li>描述符必须是这两种形式之一；<strong>不能同时是两者</strong>。</li><li><strong>数据描述符</strong>和<strong>存取描述符</strong>均具有以下可选键值：<ul><li><strong>configurable</strong>：当且仅当该属性的 configurable 为 true 时，该<strong>属性描述符</strong>才能够被改变，同时<strong>该属性也能从对应的对象上被删除</strong>。<strong>默认为 false</strong>。</li><li><strong>enumerable</strong>：当且仅当该属性的enumerable为true时，该属性才能够<strong>出现在对象的枚举属性中</strong>。<strong>默认为 false</strong>。</li></ul></li><li><strong>数据描述符</strong>同时具有以下可选键值： <ul><li><strong>value</strong>：该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。<strong>默认为 undefined</strong>。</li><li><strong>writable</strong>：当且仅当该属性的writable为true时，value才能<strong>被赋值运算符改变</strong>。<strong>默认为 false</strong>。</li></ul></li><li><strong>存取描述符</strong>同时具有以下可选键值：<ul><li><strong>get</strong>：一个给属性提供 getter 的方法，如果没有 getter 则为 undefined（<strong>默认为 undefined</strong>）。<strong>当访问该属性时，该方法会被执行</strong>，方法执行时没有参数传入，但是会传入this对象（由于继承关系，这里的this并不一定是定义该属性的对象）。</li><li><strong>set</strong>：一个给属性提供 setter 的方法，如果没有 setter 则为 undefined（<strong>默认为 undefined</strong>）。<strong>当属性值修改时，触发执行该方法</strong>。该方法将<strong>接受唯一参数</strong>，即<strong>该属性新的参数值</strong>。</li></ul></li><li>如果一个描述符不具有value, writable, get 和 set 任意一个关键字，那么它将被认为是一个<strong>数据描述符</strong>。</li><li>如果一个描述符同时有(value或writable)和(get或set)关键字，将会<strong>产生一个异常</strong>（描述符必须是这两种形式之一，<strong>不能同时是两者</strong>。）。</li><li>注意：一旦使用<code>Object.defineProperty()</code>方法给对象添加属性，那么如果<strong>不设置属性的特性</strong>，那么configurable、enumerable、writable这些值都为默认的false。</li></ul><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><h6 id="创建属性"><a href="#创建属性" class="headerlink" title="创建属性"></a>创建属性</h6><ul><li>如果对象中<strong>不存在指定的属性</strong>，<code>Object.defineProperty()</code>就<strong>创建这个属性</strong>。</li><li>当描述符中省略某些字段时，这些字段将使用它们的默认值。<ul><li>拥有布尔值的字段的默认值都是false。</li><li>value，get和set字段的默认值为undefined。</li></ul></li><li>一个没有get/set/value/writable定义的属性被称为“通用的”，并被认为是一个使用了<strong>数据描述符</strong>的属性。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">var o = &#123;&#125;; // 创建一个新对象</span><br><span class="line"></span><br><span class="line">// 在对象中添加一个属性与数据描述符的示例</span><br><span class="line">Object.defineProperty(o, <span class="string">"a"</span>, &#123;</span><br><span class="line">  value : 37,</span><br><span class="line">  writable : <span class="literal">true</span>,</span><br><span class="line">  enumerable : <span class="literal">true</span>,</span><br><span class="line">  configurable : <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line">// 对象o拥有了属性a，值为37</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 在对象中添加一个属性与存取描述符的示例</span><br><span class="line">var bValue;</span><br><span class="line">Object.defineProperty(o, <span class="string">"b"</span>, &#123;</span><br><span class="line">  get : <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> bValue;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">set</span> : <span class="keyword">function</span>(newValue)&#123;</span><br><span class="line">    bValue = newValue;</span><br><span class="line">  &#125;,</span><br><span class="line">  enumerable : <span class="literal">true</span>,</span><br><span class="line">  configurable : <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line">o.b = 38;</span><br><span class="line">// 对象o拥有了属性b，值为38</span><br><span class="line">// o.b的值现在总是与bValue相同，除非重新定义o.b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 数据描述符和存取描述符不能混合使用</span><br><span class="line">Object.defineProperty(o, <span class="string">"conflict"</span>, &#123;</span><br><span class="line">  value: 0x9f91102, </span><br><span class="line">  get: <span class="function"><span class="title">function</span></span>() &#123; </span><br><span class="line">    <span class="built_in">return</span> 0xdeadbeef; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;);</span><br><span class="line">// throws a TypeError: value appears only <span class="keyword">in</span> data descriptors, get appears only <span class="keyword">in</span> accessor descriptors</span><br></pre></td></tr></table></figure></li></ul><h6 id="修改属性"><a href="#修改属性" class="headerlink" title="修改属性"></a>修改属性</h6><ul><li>如果<strong>属性已经存在</strong>，<code>Object.defineProperty()</code>将尝试<strong>根据描述符中的值</strong>以及<strong>对象当前的配置</strong>来<strong>修改这个属性</strong>。<ul><li>如果旧描述符将其<strong>configurable 属性设置为false</strong>，则该<strong>属性被认为是“不可配置的”</strong>，并且没有属性描述符可以被改变（除了单向改变 writable 为 false）。</li><li>当属性不可配置时，不能在数据和访问器属性类型之间切换。</li></ul></li><li>当试图改变不可配置属性（除了writable 属性之外）的值时会抛出TypeError，除非当前值和新值相同。</li></ul><blockquote>Writable 属性</blockquote><ul><li><p>当writable属性设置为false时，该属性被称为“不可写”。它不能被重新分配。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var o = &#123;&#125;; // 创建一个新对象</span><br><span class="line"></span><br><span class="line">Object.defineProperty(o, <span class="string">'a'</span>, &#123;</span><br><span class="line">  value: 37,</span><br><span class="line">  writable: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(o.a); // 37</span><br><span class="line">o.a = 25; // 不会抛出错误</span><br><span class="line">// 然而在use strict模式下会报错, 尽管当前值和新值相同</span><br><span class="line">console.log(o.a); // 37, 非可写属性不能被重新分配</span><br></pre></td></tr></table></figure></li><li><p>如示例所示，试图写入非可写属性不会改变它，也不会引发错误。</p></li></ul><blockquote>Enumerable 特性</blockquote><ul><li>enumerable定义了对象的属性是否可以在 <code>for…in</code> 循环和 <code>Object.keys()</code> 中被枚举。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var o = &#123;&#125;;</span><br><span class="line">Object.defineProperty(o, <span class="string">"a"</span>, &#123; value : 1, enumerable:<span class="literal">true</span> &#125;);</span><br><span class="line">Object.defineProperty(o, <span class="string">"b"</span>, &#123; value : 2, enumerable:<span class="literal">false</span> &#125;);</span><br><span class="line">Object.defineProperty(o, <span class="string">"c"</span>, &#123; value : 3 &#125;); // enumerable默认为<span class="literal">false</span></span><br><span class="line">o.d = 4; // 如果使用直接赋值的方式创建对象的属性，则这个属性的enumerable为<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (var i <span class="keyword">in</span> o) &#123;    </span><br><span class="line">  console.log(i);  </span><br><span class="line">&#125;</span><br><span class="line">// 打印 <span class="string">'a'</span> 和 <span class="string">'d'</span> (<span class="keyword">in</span> undefined order)</span><br><span class="line"></span><br><span class="line">Object.keys(o); // [<span class="string">"a"</span>, <span class="string">"d"</span>]</span><br><span class="line"></span><br><span class="line">o.propertyIsEnumerable(<span class="string">'a'</span>); // <span class="literal">true</span></span><br><span class="line">o.propertyIsEnumerable(<span class="string">'b'</span>); // <span class="literal">false</span></span><br><span class="line">o.propertyIsEnumerable(<span class="string">'c'</span>); // <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ul><blockquote>Configurable 特性</blockquote><ul><li>configurable特性表示<strong>对象的属性是否可以被删除</strong>，以及<strong>除writable特性外</strong>的<strong>其他特性是否可以被修改</strong>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var o = &#123;&#125;;</span><br><span class="line">Object.defineProperty(o, <span class="string">"a"</span>, &#123; </span><br><span class="line">    get: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> 1;</span><br><span class="line">    &#125;, </span><br><span class="line">    configurable: <span class="literal">false</span> </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// throws a TypeError</span><br><span class="line">Object.defineProperty(o, <span class="string">"a"</span>, &#123;configurable : <span class="literal">true</span>&#125;); </span><br><span class="line">// throws a TypeError</span><br><span class="line">Object.defineProperty(o, <span class="string">"a"</span>, &#123;enumerable : <span class="literal">true</span>&#125;); </span><br><span class="line">// throws a TypeError (<span class="built_in">set</span> was undefined previously) </span><br><span class="line">Object.defineProperty(o, <span class="string">"a"</span>, &#123;<span class="built_in">set</span> : <span class="function"><span class="title">function</span></span>()&#123;&#125;&#125;); </span><br><span class="line">// throws a TypeError (even though the new get does exactly the same thing) </span><br><span class="line">Object.defineProperty(o, <span class="string">"a"</span>, &#123;get : <span class="function"><span class="title">function</span></span>()&#123;<span class="built_in">return</span> 1;&#125;&#125;);</span><br><span class="line">// throws a TypeError</span><br><span class="line">Object.defineProperty(o, <span class="string">"a"</span>, &#123;value : 12&#125;);</span><br><span class="line"></span><br><span class="line">console.log(o.a); // logs 1</span><br><span class="line">delete o.a; // Nothing happens</span><br><span class="line">console.log(o.a); // logs 1</span><br></pre></td></tr></table></figure></li></ul><h6 id="添加多个属性和默认值"><a href="#添加多个属性和默认值" class="headerlink" title="添加多个属性和默认值"></a>添加多个属性和默认值</h6><ul><li>考虑特性被赋予的<strong>默认特性值</strong>非常重要，通常，使用点运算符和<code>Object.defineProperty()</code>为对象的属性赋值时，数据描述符中的属性默认值是不同的，如下例所示：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var o = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">o.a = 1;</span><br><span class="line">// 等同于 :</span><br><span class="line">Object.defineProperty(o, <span class="string">"a"</span>, &#123;</span><br><span class="line">  value : 1,</span><br><span class="line">  writable : <span class="literal">true</span>,</span><br><span class="line">  configurable : <span class="literal">true</span>,</span><br><span class="line">  enumerable : <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 另一方面，</span><br><span class="line">Object.defineProperty(o, <span class="string">"a"</span>, &#123; value : 1 &#125;);</span><br><span class="line">// 等同于 :</span><br><span class="line">Object.defineProperty(o, <span class="string">"a"</span>, &#123;</span><br><span class="line">  value : 1,</span><br><span class="line">  writable : <span class="literal">false</span>,</span><br><span class="line">  configurable : <span class="literal">false</span>,</span><br><span class="line">  enumerable : <span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h6 id="一般的-Setters-和-Getters"><a href="#一般的-Setters-和-Getters" class="headerlink" title="一般的 Setters 和 Getters"></a>一般的 Setters 和 Getters</h6><ul><li><p>下面的例子展示了如何实现一个自存档对象。 当设置temperature 属性时，archive 数组会获取日志条目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Archiver</span></span>() &#123;</span><br><span class="line">    var temperature = null;</span><br><span class="line">    var archive = [];</span><br><span class="line"></span><br><span class="line">    Object.defineProperty(this, <span class="string">'temperature'</span>, &#123;</span><br><span class="line">        get: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">            console.log(<span class="string">'get!'</span>);</span><br><span class="line">            <span class="built_in">return</span> temperature;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="built_in">set</span>: <span class="keyword">function</span>(value) &#123;</span><br><span class="line">            temperature = value;</span><br><span class="line">            archive.push(&#123; val: temperature &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    this.getArchive = <span class="function"><span class="title">function</span></span>() &#123; </span><br><span class="line">        <span class="built_in">return</span> archive; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var arc = new Archiver();</span><br><span class="line">arc.temperature; // <span class="string">'get!'</span></span><br><span class="line">arc.temperature = 11;</span><br><span class="line">arc.temperature = 13;</span><br><span class="line">arc.getArchive(); // [&#123; val: 11 &#125;, &#123; val: 13 &#125;]</span><br></pre></td></tr></table></figure></li><li><p>另一个例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var pattern = &#123;</span><br><span class="line">    get: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">'I alway return this string, whatever you have assigned'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">set</span>: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        this.myname = <span class="string">'this is my name string'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">TestDefineSetAndGet</span></span>() &#123;</span><br><span class="line">    Object.defineProperty(this, <span class="string">'myproperty'</span>, pattern);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var instance = new TestDefineSetAndGet();</span><br><span class="line">instance.myproperty = <span class="string">'test'</span>;</span><br><span class="line"></span><br><span class="line">console.log(instance.myproperty);</span><br><span class="line">// <span class="string">'I alway return this string, whatever you have assigned'</span></span><br><span class="line"></span><br><span class="line">console.log(instance.myname);</span><br><span class="line">// <span class="string">'this is my name string'</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Object-freeze"><a href="#Object-freeze" class="headerlink" title="Object.freeze()"></a>Object.freeze()</h4><ul><li>Object对象有一个freeze方法，也用于实现对象属性和方法的不可更改：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 使用方法：</span><br><span class="line">const arr = [1,2,3,4];</span><br><span class="line">Object.freeze(arr);  // 变量arr不可更改</span><br><span class="line">arr.push(5);  // 报错：不能添加属性</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;对象是由多个&lt;strong&gt;键/值对&lt;/strong&gt;组成的&lt;strong&gt;无序的集合&lt;/strong&gt;。对象中&lt;strong&gt;每个属性&lt;/strong&gt;对应&lt;strong&gt;任意类型的值&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定义对象可以使用构造函数或字面量的形式：&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
      <category term="Object" scheme="https://chongtianhong.github.io/tags/Object/"/>
    
      <category term="defineProperty" scheme="https://chongtianhong.github.io/tags/defineProperty/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中获取时间new Date()方法小结</title>
    <link href="https://chongtianhong.github.io/2018/04/19/newDate/"/>
    <id>https://chongtianhong.github.io/2018/04/19/newDate/</id>
    <published>2018-04-19T08:07:41.000Z</published>
    <updated>2018-07-30T14:28:09.297Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li>Date 对象用于处理日期和时间。</li><li>创建 Date 对象的语法：<code>new Date()</code><a id="more"></a></li><li><p>以下四种方法同样可以创建 Date 对象：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var d = new Date(); // Date 对象会自动把当前日期和时间保存为其初始值</span><br><span class="line">var d = new Date(milliseconds); // 1524126419000</span><br><span class="line">var d = new Date(dateString); // <span class="string">"2018-04-19"</span></span><br><span class="line">var d = new Date(year, month, day, hours, minutes, seconds, milliseconds);</span><br></pre></td></tr></table></figure></li><li><p>自动获取今天星期几：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var dayMap = <span class="string">'日一二三四五六'</span>.split(<span class="string">""</span>);</span><br><span class="line">dayMap[new Date().getDay()] // <span class="string">"四"</span></span><br></pre></td></tr></table></figure></li><li><p>获取今天日期格式（—-年–月–日）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var myDate = new Date();</span><br><span class="line">myDate.getFullYear() + <span class="string">'年'</span>+ (myDate.getMonth() + 1) + <span class="string">'月'</span> + myDate.getDate() + <span class="string">'日'</span>   </span><br><span class="line">// <span class="string">"2018年4月19日"</span></span><br></pre></td></tr></table></figure></li><li><p>详解 Date 对象包含的方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var myDate = new Date();</span><br><span class="line">myDate.getFullYear();    // 从 Date 对象以四位数字返回年份。</span><br><span class="line">myDate.getMonth();       // 从 Date 对象返回月份 (0 ~ 11)。</span><br><span class="line">myDate.getDate();        // 从 Date 对象返回一个月中的某一天 (1 ~ 31)。</span><br><span class="line">myDate.getFullYear()+<span class="string">'年'</span>+(myDate.getMonth()+1)+<span class="string">'月'</span>+myDate.getDate()+<span class="string">'日'</span>;     // <span class="string">"2018年4月19日"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myDate.getDay();                        // 从 Date 对象返回一周中的某一天 (0 ~ 6)。</span><br><span class="line">myDate.getTime();                       // 返回 1970 年 1 月 1 日至今的毫秒数(时间戳)</span><br><span class="line">myDate.getHours();                      // 返回 Date 对象的小时 (0 ~ 23)。</span><br><span class="line">myDate.getMinutes();                    // 返回 Date 对象的分钟 (0 ~ 59)。</span><br><span class="line">myDate.getSeconds();                    // 返回 Date 对象的秒数 (0 ~ 59)。</span><br><span class="line">myDate.getMilliseconds();               // 返回 Date 对象的毫秒(0 ~ 999)。</span><br><span class="line">myDate.toLocaleDateString();            // 根据本地时间格式，把 Date 对象的日期部分转换为字符，如： <span class="string">"2018/4/19"</span></span><br><span class="line">var mytime=myDate.toLocaleTimeString(); // 根据本地时间格式，把 Date 对象的时间部分转换为字符串，如：<span class="string">"下午4:15:47"</span></span><br><span class="line">myDate.toLocaleString( );               // 根据本地时间格式，把 Date 对象转换为字符串，如：<span class="string">"2018/4/19 下午4:15:47"</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="JS获取当前时间戳的方法"><a href="#JS获取当前时间戳的方法" class="headerlink" title="JS获取当前时间戳的方法"></a>JS获取当前时间戳的方法</h4><ul><li><p>第一种方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var timestamp = Date.parse(new Date()); // 1524126419000</span><br></pre></td></tr></table></figure></li><li><p>第二种方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var timestamp = (new Date()).valueOf(); // 1524126419696</span><br></pre></td></tr></table></figure></li><li><p>第三种方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var timestamp = new Date().getTime(); // 1524126419696</span><br></pre></td></tr></table></figure></li><li><p>区别：</p><ul><li>第一种：获取的时间戳是把毫秒改成000显示，即<strong>精确到秒</strong>。</li><li>第二种和第三种是获取了<strong>当前毫秒</strong>的时间戳。</li></ul></li><li>可以用第二种或第三种方法<strong>计算时间差</strong>。</li><li>在JavaScript中单独调用new Date()，例如<code>document.write(new Date());</code>，显示的结果是：<code>Thu Apr 19 2018 16:32:10 GMT+0800 (中国标准时间)</code> 这种格式的时间，但是<strong>用new Date() 参与计算时</strong>，会<strong>自动转换为</strong>从1970.1.1开始的<strong>毫秒数</strong>。</li><li>再看以下例子，用于将字符串形式的日期转换成日期对象：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var strTime = <span class="string">"2018-04-19"</span>;  //字符串日期格式           </span><br><span class="line">var date = new Date(Date.parse(strTime.replace(/-/g, <span class="string">"/"</span>))); // 转换成Data();</span><br><span class="line">var month = date.getMonth() + 1; //获取当前月份</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Date 对象用于处理日期和时间。&lt;/li&gt;
&lt;li&gt;创建 Date 对象的语法：&lt;code&gt;new Date()&lt;/code&gt;
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
      <category term="Date" scheme="https://chongtianhong.github.io/tags/Date/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中filter的用法</title>
    <link href="https://chongtianhong.github.io/2018/04/18/filter/"/>
    <id>https://chongtianhong.github.io/2018/04/18/filter/</id>
    <published>2018-04-18T07:37:48.000Z</published>
    <updated>2018-07-30T14:28:09.202Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</li><li>filter是数组的一个常用的操作，它用于<strong>把Array的某些元素过滤掉</strong>，然后<strong>返回剩下的元素</strong>。</li><li><strong>注意</strong>： filter() <strong>不会对空数组进行检测</strong>。</li><li><strong>注意</strong>： filter() <strong>不会改变原始数组</strong>。<a id="more"></a></li><li>和map()类似，Array的filter()也接收一个函数。</li><li>和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是true还是false决定保留还是丢弃该元素。</li><li><p>例如，在一个Array中，<strong>删掉偶数，只保留奇数</strong>，可以这么写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 4, 5, 6, 9, 10, 15];</span><br><span class="line">var result = arr.filter(<span class="keyword">function</span> (x) &#123;</span><br><span class="line">    <span class="built_in">return</span> x % 2 !== 0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(result); // [1, 5, 9, 15]</span><br></pre></td></tr></table></figure></li><li><p>把一个Array中的空字符串删掉，可以这么写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [<span class="string">'A'</span>, <span class="string">''</span>, <span class="string">'B'</span>, null, undefined, <span class="string">'C'</span>, <span class="string">'  '</span>];</span><br><span class="line">var result = arr.filter(<span class="keyword">function</span> (s) &#123;</span><br><span class="line">    <span class="built_in">return</span> s &amp;&amp; s.trim(); // 注意：IE9以下的版本没有trim()方法</span><br><span class="line">&#125;);</span><br><span class="line">console.log(result); // [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]</span><br></pre></td></tr></table></figure></li><li><p>可见，用filter()这个<strong>高阶函数</strong>，关键在于正确实现一个<strong>“筛选”函数</strong>。</p></li></ul><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><ul><li>filter()接收的回调函数，其实可以有多个参数。通常我们仅使用第一个参数，表示<strong>Array的某个元素</strong>。回调函数还可以接收另外两个参数，表示<strong>元素的位置</strong>和<strong>数组本身</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</span><br><span class="line">var r = arr.filter(<span class="keyword">function</span> (element, index, self) &#123;</span><br><span class="line">    console.log(element); // 依次打印<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span></span><br><span class="line">    console.log(index); // 依次打印0, 1, 2</span><br><span class="line">    console.log(self); // self就是变量arr</span><br><span class="line">    <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><blockquote>去除Array的重复元素</blockquote><ul><li><p>利用filter，可以巧妙地去除Array的重复元素：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line"></span><br><span class="line">var result;</span><br><span class="line">var arr = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'banana'</span>, <span class="string">'pear'</span>, <span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'orange'</span>, <span class="string">'strawberry'</span>];</span><br><span class="line">result = arr.filter(<span class="keyword">function</span> (element, index, self) &#123;</span><br><span class="line">    <span class="built_in">return</span> self.indexOf(element) === index;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(result.toString()); // <span class="string">"apple,strawberry,banana,pear,orange"</span></span><br></pre></td></tr></table></figure></li><li><p>去除重复元素依靠的是<strong>indexOf总是返回第一个元素的位置</strong>，后续的重复元素位置与indexOf返回的位置不相等，因此被filter滤掉了。</p></li></ul><blockquote>筛选出素数</blockquote><ul><li><p>可以尝试用filter()筛选出素数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> get_primes(arr) &#123;</span><br><span class="line">    var i;</span><br><span class="line">    <span class="built_in">return</span> arr.filter(<span class="keyword">function</span>(element) &#123;  </span><br><span class="line">            var flag = <span class="literal">true</span>;  </span><br><span class="line">            <span class="keyword">if</span>(element &lt; 2)&#123;  </span><br><span class="line">            flag = <span class="literal">false</span>;  </span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="keyword">for</span>(var i = 2; i &lt; element; i++)&#123;  </span><br><span class="line">                <span class="keyword">if</span> (element % i == 0)&#123;  </span><br><span class="line">                    flag = <span class="literal">false</span>;  </span><br><span class="line">                    <span class="built_in">break</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">return</span> flag;  </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试:</span><br><span class="line">var result;</span><br><span class="line">var arr = [];</span><br><span class="line"><span class="keyword">for</span> (var x = 1; x &lt; 100; x++) &#123;</span><br><span class="line">    arr.push(x);</span><br><span class="line">&#125;</span><br><span class="line">result = get_primes(arr);</span><br><span class="line"><span class="keyword">if</span> (result.toString() === [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97].toString()) &#123;</span><br><span class="line">    console.log(<span class="string">'测试通过!'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    console.log(<span class="string">'测试失败: '</span> + result.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">测试通过!</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。&lt;/li&gt;
&lt;li&gt;filter是数组的一个常用的操作，它用于&lt;strong&gt;把Array的某些元素过滤掉&lt;/strong&gt;，然后&lt;strong&gt;返回剩下的元素&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意&lt;/strong&gt;： filter() &lt;strong&gt;不会对空数组进行检测&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意&lt;/strong&gt;： filter() &lt;strong&gt;不会改变原始数组&lt;/strong&gt;。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Array" scheme="https://chongtianhong.github.io/tags/Array/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript常用实例的实现与封装</title>
    <link href="https://chongtianhong.github.io/2018/04/17/commonInstancesOfJS/"/>
    <id>https://chongtianhong.github.io/2018/04/17/commonInstancesOfJS/</id>
    <published>2018-04-17T02:24:47.000Z</published>
    <updated>2018-08-01T15:17:55.311Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>在开发的过程中，会遇到很多常见的实例操作。比如<strong>数组去重</strong>，<strong>关键词高亮</strong>，<strong>打乱数组</strong>等。</li><li>这些操作，代码一般不会很多，实现的逻辑也不会很难，如果重复写的话，会造成代码冗余，开发效率也不用。</li><li>为了实现复用，可以<strong>把一些常见的操作封装成函数</strong>存放在工具类集合utils.js中，需要调用的时候，引入工具包调用对应的方法即可。<a id="more"></a></li></ul><blockquote><br>1. 下面代码，均使用es5版本实现。<br>2. 下面的代码，都是存放在工具类集合utils.js中，在对应的js文件中使用require引入模块，然后使用utils.[方法名]调用方法。<br></blockquote><h4 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h4><h5 id="去除字符串空格"><a href="#去除字符串空格" class="headerlink" title="去除字符串空格"></a>去除字符串空格</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/* 去除空格  <span class="built_in">type</span> 1-所有空格  2-前后空格  3-前空格 4-后空格</span><br><span class="line">*  utils.trim(<span class="string">'  1235asd'</span>,1)</span><br><span class="line">*  result：<span class="string">'1235asd'</span></span><br><span class="line">*/ 这个方法有原生的方案代替，但是考虑到有时候开发PC站需要兼容IE8，所以就还是继续保留</span><br><span class="line"><span class="keyword">function</span> trim(str, <span class="built_in">type</span>) &#123;</span><br><span class="line">    switch (<span class="built_in">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> 1:</span><br><span class="line">            <span class="built_in">return</span> str.replace(/\s+/g, <span class="string">""</span>); // 所有空格</span><br><span class="line">        <span class="keyword">case</span> 2:</span><br><span class="line">            <span class="built_in">return</span> str.replace(/(^\s*)|(\s*$)/g, <span class="string">""</span>); // 前后空格</span><br><span class="line">        <span class="keyword">case</span> 3:</span><br><span class="line">            <span class="built_in">return</span> str.replace(/(^\s*)/g, <span class="string">""</span>); // 前空格</span><br><span class="line">        <span class="keyword">case</span> 4:</span><br><span class="line">            <span class="built_in">return</span> str.replace(/(\s*$)/g, <span class="string">""</span>); // 后空格</span><br><span class="line">        default:</span><br><span class="line">            <span class="built_in">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="字母大小写切换"><a href="#字母大小写切换" class="headerlink" title="字母大小写切换"></a>字母大小写切换</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">/* <span class="built_in">type</span></span><br><span class="line">* 1: 首字母大写</span><br><span class="line">* 2：首页母小写</span><br><span class="line">* 3：大小写转换</span><br><span class="line">* 4：全部大写</span><br><span class="line">* 5：全部小写</span><br><span class="line">*/</span><br><span class="line">// utils.changeCase(<span class="string">'asdasd'</span>,1)</span><br><span class="line">// result：<span class="string">'Asdasd'</span></span><br><span class="line"><span class="keyword">function</span> changeCase(str, <span class="built_in">type</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> ToggleCase(str) &#123; // 大小写转换</span><br><span class="line">        var itemText = <span class="string">""</span></span><br><span class="line">        str.split(<span class="string">""</span>).forEach(</span><br><span class="line">            <span class="keyword">function</span> (item) &#123;</span><br><span class="line">                <span class="keyword">if</span> (/^([a-z]+)/.<span class="built_in">test</span>(item)) &#123;</span><br><span class="line">                    itemText += item.toUpperCase();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (/^([A-Z]+)/.<span class="built_in">test</span>(item)) &#123;</span><br><span class="line">                    itemText += item.toLowerCase();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    itemText += item;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="built_in">return</span> itemText;</span><br><span class="line">    &#125;</span><br><span class="line">    switch (<span class="built_in">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> 1: // 首字母大写</span><br><span class="line">            <span class="built_in">return</span> str.replace(/\b\w+\b/g, <span class="keyword">function</span> (word) &#123; // \b匹配的是字之间的看不见的边界,每个单词前后都有 \b</span><br><span class="line">                <span class="built_in">return</span> word.substring(0, 1).toUpperCase() + word.substring(1).toLowerCase();</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="keyword">case</span> 2: // 首页母小写</span><br><span class="line">            <span class="built_in">return</span> str.replace(/\b\w+\b/g, <span class="keyword">function</span> (word) &#123;</span><br><span class="line">                <span class="built_in">return</span> word.substring(0, 1).toLowerCase() + word.substring(1).toUpperCase();</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="keyword">case</span> 3: // 大小写转换</span><br><span class="line">            <span class="built_in">return</span> ToggleCase(str);</span><br><span class="line">        <span class="keyword">case</span> 4: // 全部大写</span><br><span class="line">            <span class="built_in">return</span> str.toUpperCase();</span><br><span class="line">        <span class="keyword">case</span> 5: // 全部小写</span><br><span class="line">            <span class="built_in">return</span> str.toLowerCase();</span><br><span class="line">        default:</span><br><span class="line">            <span class="built_in">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="字符串循环复制"><a href="#字符串循环复制" class="headerlink" title="字符串循环复制"></a>字符串循环复制</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* repeatStr(str-&gt;字符串, count-&gt;次数)</span><br><span class="line">*  utils.repeatStr(<span class="string">'123'</span>,3)</span><br><span class="line">*/ result：<span class="string">'123123123'</span></span><br><span class="line"><span class="keyword">function</span> repeatStr(str, count) &#123;</span><br><span class="line">    var text = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> (var i = 0; i &lt; count; i++) &#123;</span><br><span class="line">        text += str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//utils.replaceAll(<span class="string">'这里是上海，中国第三大城市，广东省省会，简称穗，'</span>,<span class="string">'上海'</span>,<span class="string">'广州'</span>)</span><br><span class="line">//result：<span class="string">'这里是广州，中国第三大城市，广东省省会，简称穗，'</span></span><br><span class="line"><span class="keyword">function</span> replaceAll(str, AFindText, ARepText) &#123;</span><br><span class="line">    raRegExp = new RegExp(AFindText, <span class="string">"g"</span>);</span><br><span class="line">    <span class="built_in">return</span> str.replace(raRegExp, ARepText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="检测字符串"><a href="#检测字符串" class="headerlink" title="检测字符串"></a>检测字符串</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/* 检测字符串</span><br><span class="line">*  utils.checkType(<span class="string">'165226226326'</span>,<span class="string">'Phone'</span>)</span><br><span class="line">*/ result：<span class="literal">false</span></span><br><span class="line"><span class="keyword">function</span> checkType(str, <span class="built_in">type</span>) &#123;</span><br><span class="line">    switch (<span class="built_in">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'Email'</span>:</span><br><span class="line">            <span class="built_in">return</span> /^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$/.<span class="built_in">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'Phone'</span>:</span><br><span class="line">            <span class="built_in">return</span> /^1[3|4|5|7|8][0-9]&#123;9&#125;$/.<span class="built_in">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'tel'</span>:</span><br><span class="line">            <span class="built_in">return</span> /^(0\d&#123;2,3&#125;-\d&#123;7,8&#125;)(-\d&#123;1,4&#125;)?$/.<span class="built_in">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'Number'</span>:</span><br><span class="line">            <span class="built_in">return</span> /^[0-9]$/.<span class="built_in">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'English'</span>:</span><br><span class="line">            <span class="built_in">return</span> /^[a-zA-Z]+$/.<span class="built_in">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'Text'</span>:</span><br><span class="line">            <span class="built_in">return</span> /^\w+$/.<span class="built_in">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'Chinese'</span>:</span><br><span class="line">            <span class="built_in">return</span> /^[\u4E00-\u9FA5]+$/.<span class="built_in">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'Lower'</span>:</span><br><span class="line">            <span class="built_in">return</span> /^[a-z]+$/.<span class="built_in">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'Upper'</span>:</span><br><span class="line">            <span class="built_in">return</span> /^[A-Z]+$/.<span class="built_in">test</span>(str);</span><br><span class="line">        default:</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="检测密码强度"><a href="#检测密码强度" class="headerlink" title="检测密码强度"></a>检测密码强度</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// utils.checkPwd(<span class="string">'12asdASAD'</span>)</span><br><span class="line">// result：3(强度等级为3)</span><br><span class="line"><span class="keyword">function</span> checkPwd(str) &#123;</span><br><span class="line">    var nowLv = 0;</span><br><span class="line">    <span class="keyword">if</span> (str.length &lt; 6) &#123;</span><br><span class="line">        <span class="built_in">return</span> nowLv</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (/[0-9]/.<span class="built_in">test</span>(str)) &#123;</span><br><span class="line">        nowLv++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (/[a-z]/.<span class="built_in">test</span>(str)) &#123;</span><br><span class="line">        nowLv++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (/[A-Z]/.<span class="built_in">test</span>(str)) &#123;</span><br><span class="line">        nowLv++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (/[\.|-|_]/.<span class="built_in">test</span>(str)) &#123;</span><br><span class="line">        nowLv++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> nowLv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="生成随机码"><a href="#生成随机码" class="headerlink" title="生成随机码"></a>生成随机码</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* count取值范围0-36</span><br><span class="line">*  utils.randomWord(10)</span><br><span class="line">*  result：<span class="string">"2584316588472575"</span></span><br><span class="line">*  utils.randomWord(14)</span><br><span class="line">*  result：<span class="string">"9b405070dd00122640c192caab84537"</span></span><br><span class="line">*  utils.randomWord(36)</span><br><span class="line">*/ result：<span class="string">"83vhdx10rmjkyb9"</span></span><br><span class="line"><span class="keyword">function</span> randomWord(count) &#123;</span><br><span class="line">    <span class="built_in">return</span> Math.random().toString(count).substring(2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="计算特定字符串在长字符串中的出现次数"><a href="#计算特定字符串在长字符串中的出现次数" class="headerlink" title="计算特定字符串在长字符串中的出现次数"></a>计算特定字符串在长字符串中的出现次数</h5><ul><li>例如：需要在字符串’sad44654blog5a1sd67as9dablog4s5d16zxc4sdweasjkblogwqepaskdkblogahseiuadbhjcibloguyeajzxkcabloguyiwezxc967’中找出’blog’的出现次数。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/* var strTest=<span class="string">'sad44654blog5a1sd67as9dablog4s5d16zxc4sdweasjkblogwqepaskdkblogahseiuadbhjcibloguyeajzxkcabloguyiwezxc967'</span></span><br><span class="line">*  utils.countStr(strTest,<span class="string">'blog'</span>)</span><br><span class="line">*/ result：6</span><br><span class="line"><span class="keyword">function</span> countStr(str, strSplit) &#123;</span><br><span class="line">    <span class="built_in">return</span> str.split(strSplit).length - 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="格式化处理字符串"><a href="#格式化处理字符串" class="headerlink" title="格式化处理字符串"></a>格式化处理字符串</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* utils.formatText(<span class="string">'1234asda567asd890'</span>)</span><br><span class="line">*  result：<span class="string">"12,34a,sda,567,asd,890"</span></span><br><span class="line">*  utils.formatText(<span class="string">'1234asda567asd890'</span>, 4, <span class="string">' '</span>)</span><br><span class="line">*  result：<span class="string">"1 234a sda5 67as d890"</span></span><br><span class="line">*  utils.formatText(<span class="string">'1234asda567asd890'</span>, 4, <span class="string">'-'</span>)</span><br><span class="line">*/ result：<span class="string">"1-234a-sda5-67as-d890"</span></span><br><span class="line"><span class="keyword">function</span> formatText(str, size, delimiter) &#123;</span><br><span class="line">    var _size = size || 3;</span><br><span class="line">    var _delimiter = delimiter || <span class="string">','</span>;</span><br><span class="line">    var regText = <span class="string">'\\B(?=(\\w&#123;'</span> + _size + <span class="string">'&#125;)+(?!\\w))'</span>;</span><br><span class="line">    var reg = new RegExp(regText, <span class="string">'g'</span>);</span><br><span class="line">    <span class="built_in">return</span> str.replace(reg, _delimiter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="找出最长单词"><a href="#找出最长单词" class="headerlink" title="找出最长单词"></a>找出最长单词</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/* utils.longestWord(<span class="string">'Find the Longest word in a String'</span>)</span><br><span class="line">*  result：&#123;el:<span class="string">'Longest'</span>, max:7&#125;;</span><br><span class="line">*  utils.longestWord(<span class="string">'Find|the|Longest|word|in|a|String'</span>,<span class="string">'|'</span>)</span><br><span class="line">*/ result：&#123;el:<span class="string">'Longest'</span>, max:7&#125;;</span><br><span class="line"><span class="keyword">function</span> longestWord(str, splitType) &#123;</span><br><span class="line">    var _splitType = splitType || /\s+/g,</span><br><span class="line">        _max = 0, _item=<span class="string">''</span>;</span><br><span class="line">    var strArr = str.split(_splitType);</span><br><span class="line">    strArr.forEach(<span class="keyword">function</span> (item) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_max &lt; item.length) &#123;</span><br><span class="line">            _max = item.length</span><br><span class="line">            _item=item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">return</span> &#123;el: _item, max:_max&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="句中每个单词首字母大写"><a href="#句中每个单词首字母大写" class="headerlink" title="句中每个单词首字母大写"></a>句中每个单词首字母大写</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* utils.titleCaseUp(<span class="string">'this is a title'</span>)</span><br><span class="line">*/ result: <span class="string">"This Is A Title"</span></span><br><span class="line"><span class="keyword">function</span> titleCaseUp(str, splitType) &#123;</span><br><span class="line">    var _splitType = splitType || /\s+/g;</span><br><span class="line">    var strArr = str.split(_splitType),</span><br><span class="line">        result = <span class="string">""</span>, _this = this</span><br><span class="line">    strArr.forEach(<span class="keyword">function</span> (item) &#123;</span><br><span class="line">        result += _this.changeCase(item, 1) + <span class="string">' '</span>; // 首字母大写</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">return</span> this.trim(result, 4) // 去除字符串后空格 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h4><h5 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> removeRepeatArray(arr) &#123;</span><br><span class="line">    <span class="built_in">return</span> arr.filter(<span class="keyword">function</span> (item, index, self) &#123;</span><br><span class="line">        <span class="built_in">return</span> self.indexOf(item) === index;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数组顺序打乱"><a href="#数组顺序打乱" class="headerlink" title="数组顺序打乱"></a>数组顺序打乱</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> upsetArr(arr) &#123;</span><br><span class="line">    <span class="built_in">return</span> arr.sort(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> Math.random() - 0.5; // 负：位置不变，正：交换顺序</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数组最大值最小值"><a href="#数组最大值最小值" class="headerlink" title="数组最大值最小值"></a>数组最大值最小值</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//数组最大值</span><br><span class="line"><span class="keyword">function</span> maxArr(arr) &#123;</span><br><span class="line">    <span class="built_in">return</span> Math.max.apply(null, arr);</span><br><span class="line">&#125;,</span><br><span class="line">//数组最小值</span><br><span class="line"><span class="keyword">function</span> minArr(arr) &#123;</span><br><span class="line">    <span class="built_in">return</span> Math.min.apply(null, arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数组求和，平均值"><a href="#数组求和，平均值" class="headerlink" title="数组求和，平均值"></a>数组求和，平均值</h5><ul><li>这一块的封装，主要是针对数字类型的数组:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 求和</span><br><span class="line"><span class="keyword">function</span> sumArr(arr) &#123;</span><br><span class="line">    <span class="built_in">return</span> arr.reduce(<span class="keyword">function</span>(pre, cur) &#123;</span><br><span class="line">        <span class="built_in">return</span> pre + cur</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 求数组平均值</span><br><span class="line"><span class="keyword">function</span> covArr(arr) &#123;</span><br><span class="line">    <span class="built_in">return</span> this.sumArr(arr) / arr.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="从数组中随机获取元素"><a href="#从数组中随机获取元素" class="headerlink" title="从数组中随机获取元素"></a>从数组中随机获取元素</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* utils.randomOne([1,2,3,6,8,5,4,2,6])</span><br><span class="line">*  result: 2</span><br><span class="line">*  utils.randomOne([1,2,3,6,8,5,4,2,6])</span><br><span class="line">*  result: 8</span><br><span class="line">*  utils.randomOne([1,2,3,6,8,5,4,2,6])</span><br><span class="line">*  result: 8</span><br><span class="line">*  utils.randomOne([1,2,3,6,8,5,4,2,6])</span><br><span class="line">*/ result: 1</span><br><span class="line"><span class="keyword">function</span> randomOne(arr) &#123;</span><br><span class="line">    <span class="built_in">return</span> arr[Math.floor(Math.random() * arr.length)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="返回数组（字符串）一个元素出现的次数"><a href="#返回数组（字符串）一个元素出现的次数" class="headerlink" title="返回数组（字符串）一个元素出现的次数"></a>返回数组（字符串）一个元素出现的次数</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/* utils.getEleCount(<span class="string">'asd56+asdasdwqe'</span>, <span class="string">'a'</span>)</span><br><span class="line">*  result：3</span><br><span class="line">*  utils.getEleCount([1, 2, 3, 4, 5, 66, 77, 22, 55, 22], 22)</span><br><span class="line">*/ result：2</span><br><span class="line"><span class="keyword">function</span> getEleCount(obj, ele) &#123;</span><br><span class="line">    var num = 0;</span><br><span class="line">    var len = obj.length;</span><br><span class="line">    <span class="keyword">for</span> (var i = 0; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ele === obj[i]) &#123;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="得到n1-n2下标的数组"><a href="#得到n1-n2下标的数组" class="headerlink" title="得到n1-n2下标的数组"></a>得到n1-n2下标的数组</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* utils.getArrayNum([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 5, 9)</span><br><span class="line">*  result：[5, 6, 7, 8, 9]</span><br><span class="line">*  getArrayNum([0,1,2,3,4,5,6,7,8,9],2) //不传第二个参数, 默认返回从n1到数组结束的元素</span><br><span class="line">*/ result：[2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line"><span class="keyword">function</span> getArrayNum(arr, n1, n2) &#123;</span><br><span class="line">    <span class="built_in">return</span> arr.slice(n1, n2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="删除值为val的数组元素"><a href="#删除值为val的数组元素" class="headerlink" title="删除值为val的数组元素"></a>删除值为val的数组元素</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* 数组元素的值含有<span class="string">'test'</span>的都删除</span><br><span class="line">*  utils.removeArrayForValue([<span class="string">'test'</span>,<span class="string">'test1'</span>,<span class="string">'test2'</span>,<span class="string">'test'</span>,<span class="string">'aaa'</span>],<span class="string">'test'</span>, <span class="string">'1'</span>)</span><br><span class="line">*  result：[<span class="string">"aaa"</span>]   </span><br><span class="line">*  数组元素的值全等于<span class="string">'test'</span>才被删除</span><br><span class="line">*  utils.removeArrayForValue([<span class="string">'test'</span>,<span class="string">'test1'</span>,<span class="string">'test2'</span>,<span class="string">'test'</span>,<span class="string">'aaa'</span>],<span class="string">'test'</span>)</span><br><span class="line">*/ result：[<span class="string">"test1"</span>, <span class="string">"test2"</span>, <span class="string">"aaa"</span>]</span><br><span class="line"><span class="keyword">function</span> removeArrayForValue(arr, val, <span class="built_in">type</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> arr.filter(<span class="keyword">function</span> (item) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="built_in">type</span> ? item.indexOf(val) === -1 : item !== val</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/* utils.steamroller([1,2,[4,5,[1,23]]])</span><br><span class="line">*/ result: [1, 2, 4, 5, 1, 23]</span><br><span class="line"><span class="keyword">function</span> steamroller(arr) &#123;</span><br><span class="line">    var newArr = [],  _this = this;</span><br><span class="line">    <span class="keyword">for</span> (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Array.isArray(arr[i])) &#123;</span><br><span class="line">            // 如果是数组，调用(递归)steamroller 将其扁平化</span><br><span class="line">            // 然后再 push 到 newArr 中</span><br><span class="line">            newArr.push.apply(newArr, _this.steamroller(arr[i]));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            // 不是数组直接 push 到 newArr 中</span><br><span class="line">            newArr.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h4><h5 id="cookie的设置、获取和删除"><a href="#cookie的设置、获取和删除" class="headerlink" title="cookie的设置、获取和删除"></a>cookie的设置、获取和删除</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 设置cookie</span><br><span class="line"><span class="keyword">function</span> setCookie(name, value, iDay) &#123;</span><br><span class="line">    var oDate = new Date();</span><br><span class="line">    oDate.setDate(oDate.getDate() + iDay);</span><br><span class="line">    document.cookie = name + <span class="string">'='</span> + value + <span class="string">';expires='</span> + oDate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取cookie</span><br><span class="line"><span class="keyword">function</span> getCookie(name) &#123;</span><br><span class="line">    var arr = document.cookie.split(<span class="string">';'</span>);</span><br><span class="line">    <span class="keyword">for</span> (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">        var arr2 = arr[i].split(<span class="string">'='</span>);</span><br><span class="line">        <span class="keyword">if</span> (arr2[0] == name) &#123;</span><br><span class="line">            <span class="built_in">return</span> arr2[1];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 删除cookie</span><br><span class="line"><span class="keyword">function</span> removeCookie(name) &#123;</span><br><span class="line">    this.setCookie(name, 1, -1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="清除对象中值为空的属性"><a href="#清除对象中值为空的属性" class="headerlink" title="清除对象中值为空的属性"></a>清除对象中值为空的属性</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* utils.filterParams(&#123;a: <span class="string">""</span>, b: null, c: <span class="string">"010"</span>, d: 123&#125;)</span><br><span class="line">*/ Object &#123;c: <span class="string">"010"</span>, d: 123&#125;</span><br><span class="line"><span class="keyword">function</span> filterParams(obj) &#123;</span><br><span class="line">    var _newPar = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (var key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((obj[key] === 0 || obj[key] === <span class="literal">false</span> || obj[key]) &amp;&amp; obj[key].toString().replace(/(^\s*)|(\s*$)/g, <span class="string">''</span>) !== <span class="string">''</span>) &#123;</span><br><span class="line">            _newPar[key] = obj[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> _newPar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="随机返回一个范围的数字"><a href="#随机返回一个范围的数字" class="headerlink" title="随机返回一个范围的数字"></a>随机返回一个范围的数字</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/* utils.randomNumber(5, 10)</span><br><span class="line">*  返回5-10的随机整数，包括5，10</span><br><span class="line">*  utils.randomNumber(10)</span><br><span class="line">*  返回0-10的随机整数，包括0，10</span><br><span class="line">*  utils.randomNumber()</span><br><span class="line">*/ 返回0-255的随机整数，包括0，255</span><br><span class="line">randomNumber: <span class="keyword">function</span> (n1, n2) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arguments.length === 2) &#123;</span><br><span class="line">        <span class="built_in">return</span> Math.round(n1 + Math.random() * (n2 - n1));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (arguments.length === 1) &#123;</span><br><span class="line">        <span class="built_in">return</span> Math.round(Math.random() * n1)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">return</span> Math.round(Math.random() * 255)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Date日期时间部分"><a href="#Date日期时间部分" class="headerlink" title="Date日期时间部分"></a>Date日期时间部分</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/* 到某一个时间的倒计时</span><br><span class="line">*  utils.getEndTime(<span class="string">'2018/4/22 16:0:0'</span>)</span><br><span class="line">*/ result：<span class="string">"剩余时间5天 5小时 35 分钟13 秒"</span></span><br><span class="line"><span class="keyword">function</span> getEndTime(endTime) &#123;</span><br><span class="line">    var startDate = new Date(); // 开始时间，当前时间 2018/4/17 10:24:47</span><br><span class="line">    var endDate = new Date(endTime); // 结束时间，需传入时间参数</span><br><span class="line">    var t = endDate.getTime() - startDate.getTime(); // 时间差的毫秒数</span><br><span class="line">    var d = 0,</span><br><span class="line">        h = 0,</span><br><span class="line">        m = 0,</span><br><span class="line">        s = 0;</span><br><span class="line">    <span class="keyword">if</span> (t &gt;= 0) &#123;</span><br><span class="line">        d = Math.floor(t / 1000 / 3600 / 24);</span><br><span class="line">        h = Math.floor(t / 1000 / 60 / 60 % 24);</span><br><span class="line">        m = Math.floor(t / 1000 / 60 % 60);</span><br><span class="line">        s = Math.floor(t / 1000 % 60);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="string">"剩余时间"</span> + d + <span class="string">"天 "</span> + h + <span class="string">"小时 "</span> + m + <span class="string">" 分钟"</span> + s + <span class="string">" 秒"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="手机类型判断"><a href="#手机类型判断" class="headerlink" title="手机类型判断"></a>手机类型判断</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> browserInfo(<span class="built_in">type</span>) &#123;</span><br><span class="line">    switch (<span class="built_in">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'android'</span>:</span><br><span class="line">            <span class="built_in">return</span> navigator.userAgent.toLowerCase().indexOf(<span class="string">'android'</span>) !== -1</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'iphone'</span>:</span><br><span class="line">            <span class="built_in">return</span> navigator.userAgent.toLowerCase().indexOf(<span class="string">'iphone'</span>) !== -1</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'ipad'</span>:</span><br><span class="line">            <span class="built_in">return</span> navigator.userAgent.toLowerCase().indexOf(<span class="string">'ipad'</span>) !== -1</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'weixin'</span>:</span><br><span class="line">            <span class="built_in">return</span> navigator.userAgent.toLowerCase().indexOf(<span class="string">'micromessenger'</span>) !== -1</span><br><span class="line">        default:</span><br><span class="line">            <span class="built_in">return</span> navigator.userAgent.toLowerCase()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在开发的过程中，会遇到很多常见的实例操作。比如&lt;strong&gt;数组去重&lt;/strong&gt;，&lt;strong&gt;关键词高亮&lt;/strong&gt;，&lt;strong&gt;打乱数组&lt;/strong&gt;等。&lt;/li&gt;
&lt;li&gt;这些操作，代码一般不会很多，实现的逻辑也不会很难，如果重复写的话，会造成代码冗余，开发效率也不用。&lt;/li&gt;
&lt;li&gt;为了实现复用，可以&lt;strong&gt;把一些常见的操作封装成函数&lt;/strong&gt;存放在工具类集合utils.js中，需要调用的时候，引入工具包调用对应的方法即可。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Web" scheme="https://chongtianhong.github.io/tags/Web/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
      <category term="封装" scheme="https://chongtianhong.github.io/tags/%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>内存缓存和硬盘缓存的区别</title>
    <link href="https://chongtianhong.github.io/2018/04/16/fromCacheType/"/>
    <id>https://chongtianhong.github.io/2018/04/16/fromCacheType/</id>
    <published>2018-04-16T08:37:51.000Z</published>
    <updated>2018-07-29T09:10:46.667Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li>在Chrome浏览器中的控制台Network中size栏通常会有<strong>三种状态</strong>: <ul><li><strong>from memory cache</strong></li><li><strong>from disk cache</strong></li><li><strong>资源本身的大小</strong>(如：1.5k)<a id="more"></a></li></ul></li><li><strong>from memory cache</strong>代表使用内存中的缓存，<strong>from disk cache</strong>则代表使用的是硬盘中的缓存，浏览器读取<strong>命中强缓存资源</strong>的顺序为<strong>memory –&gt; disk</strong>：<ul><li>先去内存看，如果有，直接加载；</li><li>如果内存没有，则取硬盘获取，如果有直接加载；</li><li>如果硬盘也没有，那么就进行网络请求；</li><li>加载到的资源缓存到硬盘和内存。</li></ul></li></ul><h4 id="三者的区别"><a href="#三者的区别" class="headerlink" title="三者的区别"></a>三者的区别</h4><blockquote>from memory cache</blockquote><ul><li>from memory cache代表<strong>使用内存中的缓存</strong>，即请求的资源是直接从内存中拿到的，不会请求服务器。</li><li>一般已经加载过该资源且资源已经缓存在了内存当中，<strong>当关闭该页面时，此资源就被内存释放掉了</strong>，<strong>再次重新打开相同页面时不会出现from memory cache的情况</strong>。</li><li><strong>内存缓存(from memory cache)</strong>：内存缓存具有两个特点，分别是<strong>快速读取</strong>和<strong>时效性</strong>：<ul><li><strong>快速读取</strong>：内存缓存会将编译解析后的文件，直接存入该进程的内存中，占据该进程一定的内存资源，以方便下次运行使用时的快速读取。</li><li><strong>时效性</strong>：一旦该进程关闭，则该进程的内存则会清空。</li></ul></li></ul><blockquote>from disk cache</blockquote><ul><li>from disk cache表示此资源是从<strong>磁盘</strong>当中取出的，也是在已经在之前的某个时间加载过该资源，不会请求服务器。但<strong>此资源不会随着该页面的关闭而释放掉</strong>，因为是存在硬盘当中的，下次打开仍会出现from disk cache的情况。</li><li><strong>硬盘缓存(from disk cache</strong>)：硬盘缓存则是直接将缓存写入硬盘文件中，读取缓存需要对该缓存存放的硬盘文件进行I/O操作，然后重新解析该缓存内容，读取复杂，<strong>速度比内存缓存慢</strong>。</li></ul><blockquote>资源本身大小数值</blockquote><ul><li>当HTTP状态码为200时，资源是实实在在从服务器请求后获取得到的（不是缓存数据），该数字是资源本身的大小；</li><li>当HTTP状态码为304时，该数字是<strong>与服务端通信报文的大小</strong>，并<strong>不是该资源本身的大小</strong>，该资源是从本地获取的（协商缓存）。</li></ul><h4 id="Chrome采取措施的准则"><a href="#Chrome采取措施的准则" class="headerlink" title="Chrome采取措施的准则"></a>Chrome采取措施的准则</h4><ul><li>如下表所示：</li></ul><table><thead><tr><th style="text-align:center">状态</th><th style="text-align:center">类型</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">200</td><td style="text-align:center">from memory cache</td><td style="text-align:center">不请求网络资源，资源在内存当中，一般<code>脚本</code>、<code>字体</code>、<code>图片</code>会存在内存当中</td></tr><tr><td style="text-align:center">200</td><td style="text-align:center">from disk cache</td><td style="text-align:center">不请求网络资源，在磁盘当中，一般非脚本会存在内存当中，如<code>CSS</code>等</td></tr><tr><td style="text-align:center">200</td><td style="text-align:center">资源大小数值</td><td style="text-align:center">从服务器下载最新资源</td></tr><tr><td style="text-align:center">304</td><td style="text-align:center">报文大小</td><td style="text-align:center">请求服务端发现资源没有更新，使用本地资源（协商缓存）</td></tr></tbody></table><ul><li>可以看到，<strong>200和304</strong>是Chrome在<strong>请求资源时最常见的两种HTTP状态码</strong>。</li><li>由此可见<strong>样式表一般在磁盘中</strong>，不会缓存到内存中去，因为CSS样式加载一次即可渲染出网页。</li><li>但是，<strong>脚本</strong>却<strong>可能随时会执行</strong>，如果脚本在磁盘当中，在执行该脚本需要从磁盘中取到内存当中来。这样的IO开销是比较大的，有可能会导致浏览器失去响应。因此，<strong>脚本一般在内存中</strong>。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在Chrome浏览器中的控制台Network中size栏通常会有&lt;strong&gt;三种状态&lt;/strong&gt;: &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;from memory cache&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;from disk cache&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源本身的大小&lt;/strong&gt;(如：1.5k)
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="强缓存" scheme="https://chongtianhong.github.io/tags/%E5%BC%BA%E7%BC%93%E5%AD%98/"/>
    
      <category term="浏览器缓存" scheme="https://chongtianhong.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>浏览器强缓存和协商缓存</title>
    <link href="https://chongtianhong.github.io/2018/04/15/browserCache/"/>
    <id>https://chongtianhong.github.io/2018/04/15/browserCache/</id>
    <published>2018-04-15T05:36:26.000Z</published>
    <updated>2018-07-29T08:37:59.758Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li><strong>浏览器缓存</strong>是浏览器在<strong>本地磁盘</strong>对用户<strong>最近请求过的文档</strong>进行存储，当访问者再次访问同一页面时，浏览器就可以直接<strong>从本地磁盘加载文档</strong>。</li><li>浏览器缓存有下面的优点：<ul><li>减少冗余的数据传输；</li><li>减少服务器负担；</li><li>加快客户端加载网页的速度。<a id="more"></a></li></ul></li></ul><h4 id="浏览器缓存分类"><a href="#浏览器缓存分类" class="headerlink" title="浏览器缓存分类"></a>浏览器缓存分类</h4><ul><li>根据<strong>是否需要重新向服务器发起请求</strong>来分类，浏览器缓存可以分为<strong>强缓存</strong>和<strong>协商缓存</strong>两大类。强缓存不发请求到服务器，协商缓存会发请求到服务器。</li><li>两类缓存规则<strong>可以同时存在</strong>，<strong>强缓存优先级高于协商缓存</strong>，也就是说，当执行强缓存的规则时，<strong>如果强缓存生效，直接使用强缓存，不再执行协商缓存规则</strong>。</li><li>对于<strong>强缓存</strong>，服务器通知浏览器一个缓存时间，在缓存时间内，下次请求，直接用缓存；不在时间内，则执行协商缓存策略。</li><li>对于<strong>协商缓存</strong>，将缓存信息中的<code>Etag</code>对应的<code>If-None-Match</code>和<code>Last-Modified</code>对应的<code>If-Modified-Since</code>通过请求发送给服务器，由服务器校验，返回304状态码时，浏览器直接使用缓存。</li><li>浏览器<strong>第一次</strong>请求时：<br><img src="/images/firstRequest.png" alt="浏览器第一次请求" style="border:none"></li><li>由上图可以看到，在<strong>客户端第一次请求数据</strong>时，此时<strong>缓存数据库中没有对应的缓存数据</strong>，<strong>需要请求服务器</strong>，<strong>服务器返回后，将数据存储至缓存数据库中</strong>。</li><li>浏览器<strong>后续</strong>在进行请求时：<br><img src="/images/afterRequest.png" alt="浏览器后续请求" style="border:none"></li><li>可以看到，浏览器后续在进行请求时，<strong>如果资源已经被浏览器缓存下来</strong>，在缓存失效之前，再次请求时，默认的处理方式为：<ul><li>默认会<strong>先检查是否命中强缓存（cache-control和expires信息）</strong>，如果强缓存命中则直接读取缓存，包括缓存header信息；</li><li><strong>如果强缓存没有命中</strong>，则发请求到服务器，<strong>请求会携带第一次请求返回的有关缓存的header字段信息（Last-Modified/If-Modified-Since和Etag/If-None-Match）</strong>，由<strong>服务器</strong>根据请求中的相关header信息来<strong>检查是否命中协商缓存</strong>，若协商缓存命中，则服务器返回新的响应header信息更新缓存中的对应header信息，但是并<strong>不返回资源内容</strong>，它会告知浏览器可以直接从缓存获取（返回304状态码）；</li><li>如果强缓存和协商缓存都没有命中，服务器则返回最新的资源。</li></ul></li><li>强缓存与协商缓存的<strong>共同点</strong>是：如果命中，都是从客户端缓存中加载资源，而不是从服务器加载资源数据。</li><li>强缓存与协商缓存的<strong>区别</strong>，可以用下表来进行描述：</li></ul><table><thead><tr><th style="text-align:center">&nbsp;</th><th style="text-align:center">获取资源形式</th><th style="text-align:center">状态码</th><th style="text-align:center">是否发请求到服务器</th></tr></thead><tbody><tr><td style="text-align:center">强缓存</td><td style="text-align:center">从缓存取</td><td style="text-align:center">200(from cache)</td><td style="text-align:center">否，直接从缓存取</td></tr><tr><td style="text-align:center">协商缓存</td><td style="text-align:center">从缓存取</td><td style="text-align:center">304(not modified)</td><td style="text-align:center">是，通过服务器来告知缓存是否可用</td></tr></tbody></table><h4 id="强缓存相关的header字段"><a href="#强缓存相关的header字段" class="headerlink" title="强缓存相关的header字段"></a>强缓存相关的header字段</h4><ul><li>当浏览器对某个资源的请求命中了强缓存时，返回的http状态码为200，在chrome的开发者工具的network里面size会显示为<code>from cache</code>。</li><li>强缓存<strong>直接从缓存中获取资源</strong>而不经过服务器。</li><li>与强缓存相关的header字段有两个：分别是<code>Expires</code>和<code>Cache-Control</code>，它们都用来表示<strong>资源在客户端缓存的有效期</strong>。</li></ul><blockquote>Expires</blockquote><ul><li><p><code>Expires</code>是http1.0提出的一个表示资源过期时间的header，它描述的是一个<strong>绝对时间</strong>，由服务器返回，用GMT格式的字符串表示，如：<code>Expires:Thu, 31 Dec 2037 23:55:55 GMT</code>，它的缓存原理是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.浏览器第一次跟服务器请求一个资源，服务器在返回这个资源的同时，在respone的header加上Expires的header；</span><br><span class="line">2.浏览器在接收到这个资源后，会把这个资源连同所有response header一起缓存下来（所以缓存命中的请求返回的header并不是来自服务器，而是来自之前缓存的header）；</span><br><span class="line">3.浏览器再请求这个资源时，先从缓存中寻找，找到这个资源后，拿出它的Expires跟当前的请求时间比较，如果请求时间在Expires指定的时间之前，就能命中缓存，否则就不行；</span><br><span class="line">4.如果缓存没有命中，浏览器直接从服务器加载资源时，Expires Header在重新加载的时候会被更新。</span><br></pre></td></tr></table></figure></li><li><p><code>Expires</code>是较老的强缓存管理header，由于它是<strong>服务器返回的一个绝对时间</strong>，在<strong>服务器时间与客户端时间相差较大</strong>时，<strong>缓存管理容易出现问题</strong>，比如随意修改下客户端时间，就能影响缓存命中的结果。</p></li></ul><blockquote>Cache-Control</blockquote><ul><li><p>由于<code>Expires</code>存在着缺陷，在http1.1的时候，提出了一个新的header，就是<code>Cache-Control</code>，主要是利用该字段的<code>max-age</code>值来进行判断，是一个<strong>相对时间</strong>，在配置缓存的时候，以秒为单位，用数值表示，如：<code>Cache-Control:max-age=315360000</code>，它的缓存原理是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.浏览器第一次跟服务器请求一个资源，服务器在返回这个资源的同时，在respone的header加上Cache-Control的header；</span><br><span class="line">2.浏览器在接收到这个资源后，会把这个资源连同所有response header一起缓存下来；</span><br><span class="line">3.浏览器再请求这个资源时，先从缓存中寻找，找到这个资源后，根据它第一次的请求时间和Cache-Control设定的有效期，计算出一个资源过期时间，再拿这个过期时间跟当前的请求时间比较，如果请求时间在过期时间之前，就能命中缓存，否则就不行；</span><br><span class="line">4.如果缓存没有命中，浏览器直接从服务器加载资源时，Cache-Control Header在重新加载的时候会被更新。</span><br></pre></td></tr></table></figure></li><li><p><code>Cache-Control</code>除了设置max-age值外，还有下面几个比较常用的设置值：</p><ul><li><code>no-cache</code>：<strong>不使用本地缓存</strong>。需要使用缓存协商，先与服务器确认返回的响应是否被更改，如果之前的响应中存在ETag，那么请求的时候会与服务端验证，如果资源未被更改，则可以避免重新下载。</li><li><code>no-store</code>：<strong>直接禁止浏览器缓存数据</strong>，每次用户请求该资源，都会向服务器发送一个请求，每次都会下载完整的资源。</li><li><code>public</code>：可以被<strong>所有的用户的浏览器缓存</strong>，包括终端用户和CDN等中间代理服务器。</li><li><code>private</code>：只能被<strong>终端用户的浏览器缓存</strong>，不允许CDN等中继缓存服务器对其缓存。<strong>如果<code>Cache-Control</code>仅指定了max-age，则默认为private</strong>。</li></ul></li><li><code>Cache-Control</code>描述的是一个<strong>相对时间</strong>，在进行缓存命中的时候，都是利用客户端时间进行判断，所以相比较<strong><code>Expires</code>，Cache-Control的缓存管理更有效，安全一些</strong>。</li><li>这两个header可以只启用一个，也可以同时启用，当response header中的<code>Expires</code>和<code>Cache-Control</code>同时存在时，<code>Cache-Control</code>优先级高于<code>Expires</code>。</li><li>注：在<strong>无法确定客户端的时间是否与服务端的时间同步</strong>的情况下，Cache-Control相比于expires是更好的选择，所以<strong>同时存在时，只有Cache-Control生效</strong>。</li><li>以博客的请求为例，<strong>状态码为灰色的请求</strong>则代表使用了<strong>强制缓存</strong>，请求对应的Size值则代表该缓存存放的位置，分别为<strong>from memory cache</strong> 和 <strong>from disk cache</strong>。<br><img src="images/fromCache.jpg" stype="border:none" alt="博客的请求例子"></li><li><strong>from memory cache</strong>代表使用<strong>内存中</strong>的缓存，<strong>from disk cache</strong>则代表使用的是<strong>硬盘</strong>中的缓存，浏览器读取缓存的顺序为先从内存（memory）中读，再从硬盘（disk）中读。</li></ul><h4 id="协商缓存相关的header字段"><a href="#协商缓存相关的header字段" class="headerlink" title="协商缓存相关的header字段"></a>协商缓存相关的header字段</h4><ul><li><strong>协商缓存</strong>都是由服务器来确定缓存资源是否可用的，所以客户端与服务器端要通过某种标识来进行通信，从而<strong>让服务器判断请求资源是否可以使用缓存访问</strong>。</li><li>当浏览器对某个资源的请求没有命中强缓存，就会发一个请求到服务器，验证协商缓存是否命中，<strong>如果协商缓存命中</strong>，<strong>请求响应返回的http状态码为304并且会显示一个Not Modified的字符串</strong>。</li><li><strong>协商缓存</strong>主要涉及到两组header字段，这两组搭档都是<strong>成对出现</strong>的，即第一次<strong>请求的响应头</strong>带上某个字段（Last-Modified或者Etag），则后续请求则会带上对应的<strong>请求字段</strong>（If-Modified-Since或者If-None-Match），若响应头没有Last-Modified或者Etag字段，则请求头也不会有对应的字段。</li></ul><blockquote>Last-Modified/If-Modified-Since</blockquote><ul><li><p>二者的值都是GMT格式的时间字符串，它们的<strong>控制缓存的原理</strong>是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.浏览器第一次跟服务器请求一个资源，服务器在返回这个资源的同时，在respone的header加上Last-Modified的header，这个header表示这个资源在服务器上的最后修改时间</span><br><span class="line">2.浏览器再次跟服务器请求这个资源时，在request的header上加上If-Modified-Since的header，这个header的值就是上一次请求时服务器返回的Last-Modified的值：</span><br><span class="line">3.服务器再次收到资源请求时，根据浏览器传过来If-Modified-Since和资源在服务器上的最后修改时间对比判断资源是否有变化，如果没有变化则返回304 Not Modified，但是不会返回资源内容；如果有变化则正常返回资源内容。当服务器返回304 Not Modified的响应时，response header中不会再添加Last-Modified的header(既然资源没有变化，那么Last-Modified也就不会改变)，这是服务器返回304时的response header：</span><br><span class="line">4.浏览器收到304的响应后，就会从缓存中加载资源。</span><br><span class="line">5.如果协商缓存没有命中，浏览器直接从服务器加载资源时，Last-Modified Header在重新加载的时候会被更新，下次请求时，If-Modified-Since会启用上次返回的Last-Modified值</span><br></pre></td></tr></table></figure></li><li><p>Last-Modified/If-Modified-Since都是<strong>根据服务器时间</strong>返回的header，一般来说，在没有调整服务器时间和篡改客户端缓存的情况下，这两个header配合起来管理协商缓存是非常可靠的，但是有时候也会存在<strong>服务器上资源其实有变化，但是最后修改时间却没有变化的情况</strong>，而这种问题又很不容易被定位出来，而当这种情况出现的时候，就会<strong>影响协商缓存的可靠性</strong>。</p></li></ul><blockquote>Etag/If-None-Match</blockquote><ul><li>这两个值是<strong>由服务器生成</strong>的每个资源的<strong>唯一标识字符串</strong>，只要<strong>资源有变化就这个值就会改变</strong>，<strong>跟最后修改时间没有关系</strong>，所以能很好的补充Last-Modified的问题。</li><li>其判断过程与Last-Modified/If-Modified-Since类似，与Last-Modified不一样的是，当服务器返回304 Not Modified的响应时，<strong>由于ETag重新生成过，response header中还会把这个ETag返回</strong>，即使这个ETag跟之前的没有变化。</li></ul><blockquote>既生Last-Modified何生Etag</blockquote><ul><li>HTTP1.1中Etag的出现主要是<strong>为了解决几个Last-Modified比较难解决的问题</strong>：<ul><li><strong>一些文件也许会周期性的更改</strong>，但是他的内容并不改变(<strong>仅仅改变的修改时间</strong>)，这个时候我们并<strong>不希望客户端认为这个文件被修改了，而重新请求</strong>；</li><li><strong>某些文件修改非常频繁，比如在秒以下的时间内进行修改</strong>，(比方说1s内修改了N次)，<strong>If-Modified-Since能检查到的粒度是秒级的</strong>，<strong>这种修改无法判断</strong>(或者说UNIX记录MTIME只能精确到秒)；</li><li><strong>某些服务器不能精确的得到文件的最后修改时间</strong>。</li></ul></li><li>这时，<strong>利用Etag能够更加准确的控制缓存</strong>，因为Etag是服务器自动生成或者由开发者生成的<strong>对应资源在服务器端的唯一标识符</strong>。</li><li>Last-Modified与ETag是可以一起使用的，服务器会<strong>优先验证ETag</strong>，一致的情况下，才会<strong>继续比对Last-Modified</strong>，最后才决定是否返回304。</li><li>然而，在<strong>性能</strong>上，<strong>Etag要逊于Last-Modified</strong>，毕竟Last-Modified只需要记录时间，而<strong>Etag需要服务器通过算法来计算出一个hash值</strong>。</li></ul><h4 id="用户的行为对缓存的影响"><a href="#用户的行为对缓存的影响" class="headerlink" title="用户的行为对缓存的影响"></a>用户的行为对缓存的影响</h4><ul><li>当使用<code>Ctrl + F5</code><strong>强制刷新网页</strong>时，直接从服务器加载，跳过强缓存和协商缓存。</li><li>当使用<code>F5</code><strong>刷新网页</strong>时，跳过强缓存，但是会检查协商缓存。</li></ul><h4 id="强缓存如何重新加载缓存缓存过的资源"><a href="#强缓存如何重新加载缓存缓存过的资源" class="headerlink" title="强缓存如何重新加载缓存缓存过的资源"></a>强缓存如何重新加载缓存缓存过的资源</h4><ul><li>上面说到，使用<strong>强缓存</strong>时，浏览器不会发送请求到服务端，根据设置的缓存时间浏览器一直从缓存中获取资源，在这期间若资源产生了变化，浏览器就在缓存期内就一直得不到最新的资源。</li><li>可以通过<strong>更新页面中引用的资源路径，让浏览器主动放弃缓存，加载新资源</strong>来解决这一情况。可采用附加特征参数的方法：<ul><li>在URL后面加上一个随机数：<code>“fresh=” + Math.random();。</code></li><li>在URL后面加上时间戳：<code>“nowtime=” + new Date().getTime();</code>。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;浏览器缓存&lt;/strong&gt;是浏览器在&lt;strong&gt;本地磁盘&lt;/strong&gt;对用户&lt;strong&gt;最近请求过的文档&lt;/strong&gt;进行存储，当访问者再次访问同一页面时，浏览器就可以直接&lt;strong&gt;从本地磁盘加载文档&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;浏览器缓存有下面的优点：&lt;ul&gt;
&lt;li&gt;减少冗余的数据传输；&lt;/li&gt;
&lt;li&gt;减少服务器负担；&lt;/li&gt;
&lt;li&gt;加快客户端加载网页的速度。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Web" scheme="https://chongtianhong.github.io/tags/Web/"/>
    
      <category term="强缓存" scheme="https://chongtianhong.github.io/tags/%E5%BC%BA%E7%BC%93%E5%AD%98/"/>
    
      <category term="协商缓存" scheme="https://chongtianhong.github.io/tags/%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98/"/>
    
      <category term="HTTP" scheme="https://chongtianhong.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>什么是无样式内容闪烁?如何避免?</title>
    <link href="https://chongtianhong.github.io/2018/04/14/FOUC/"/>
    <id>https://chongtianhong.github.io/2018/04/14/FOUC/</id>
    <published>2018-04-14T03:27:46.000Z</published>
    <updated>2018-07-29T03:57:02.657Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是FOUC-无样式内容闪烁"><a href="#什么是FOUC-无样式内容闪烁" class="headerlink" title="什么是FOUC(无样式内容闪烁)"></a>什么是FOUC(无样式内容闪烁)</h4><ul><li>如果使用<code>@import</code>方法对CSS进行导入，会导致某些页面在Windows下的Internet Explorer出现一些奇怪的现象：<strong>以无样式显示页面内容的瞬间闪烁</strong>，这种现象称之为<strong>文档样式短暂失效</strong>(Flash of Unstyled Content)，简称为FOUC。<a id="more"></a></li></ul><h4 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h4><ul><li>原理：当<strong>样式表晚于结构性html加载</strong>，当加载到此样式表时，页面将停止之前的渲染。此样式表被下载和解析后，将<strong>重新渲染页面</strong>，也就出现了<strong>短暂的花屏现象</strong>。</li><li>FOUC的产生主要是由于<strong>浏览器先显示已加载的HTML内容，等到CSS加载完成后重新对内容添加样式</strong>导致，主要代表有<strong>Firefox</strong>。导致FOUC的原因有以下三种：<ul><li>使用<code>@import</code>导入样式表。</li><li>将样式表放在页面底部。</li><li>有几个样式表，放在页面不同位置。</li></ul></li></ul><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul><li>使用LINK标签将样式表放在文档HEAD中。</li></ul><h4 id="白屏和FOUC"><a href="#白屏和FOUC" class="headerlink" title="白屏和FOUC"></a>白屏和FOUC</h4><ul><li>白屏和FOUC（无样式内容闪烁）的产生主要<strong>与浏览器的渲染机制有关</strong>：<ul><li>有的浏览器是<strong>等待HTML和CSS全部加载完成后再进行渲染</strong>（白屏原因）；</li><li>有的浏览器是<strong>先显示已加载的HTML内容，等到CSS加载完成后再重新对内容添加样式</strong>（FOUC原因）。</li></ul></li></ul><blockquote>白屏的产生</blockquote><ul><li>白屏的产生有三种情况：<ul><li>将CSS文件放在HTML文档的最后。</li><li>使用<code>@import</code>导入样式表（通过<code>@import</code>引入的CSS文件会被最后加载）。</li><li>将JS文件放在头部，未使用defer或async延迟或异步加载JS文件，导致JS阻塞HTML和CSS的加载。</li></ul></li></ul><blockquote>白屏的原理分析</blockquote><ul><li>对于-webkit内核的浏览器（IE也会产生），在<strong>进行网页渲染时</strong>，会同时<strong>加载HTML和CSS</strong>分别<strong>构建DOM树和CSSOM树</strong>，等<strong>两者都构建完成后</strong>，再<strong>绘制渲染树</strong>，然后<strong>将页面显示出来</strong>。</li><li>如果在HTML中将CSS放置在文档最后，那么会导致<strong>CSSOM晚于DOM树的建立，浏览器需要等待CSSOM的建立，然后才进行网页内容的绘制</strong>，这个等待的过程，没有内容显示，就<strong>导致了白屏的产生</strong>。</li><li>因此，在开发中，需要<strong>使用LINK标签将样式表放在文档HEAD中，让其与HTML内容同时被加载</strong>。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;什么是FOUC-无样式内容闪烁&quot;&gt;&lt;a href=&quot;#什么是FOUC-无样式内容闪烁&quot; class=&quot;headerlink&quot; title=&quot;什么是FOUC(无样式内容闪烁)&quot;&gt;&lt;/a&gt;什么是FOUC(无样式内容闪烁)&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;如果使用&lt;code&gt;@import&lt;/code&gt;方法对CSS进行导入，会导致某些页面在Windows下的Internet Explorer出现一些奇怪的现象：&lt;strong&gt;以无样式显示页面内容的瞬间闪烁&lt;/strong&gt;，这种现象称之为&lt;strong&gt;文档样式短暂失效&lt;/strong&gt;(Flash of Unstyled Content)，简称为FOUC。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="性能优化" scheme="https://chongtianhong.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="浏览器渲染机制" scheme="https://chongtianhong.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/"/>
    
      <category term="CSS" scheme="https://chongtianhong.github.io/tags/CSS/"/>
    
      <category term="HTML" scheme="https://chongtianhong.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>href和src的区别</title>
    <link href="https://chongtianhong.github.io/2018/04/13/hrefAndSrc/"/>
    <id>https://chongtianhong.github.io/2018/04/13/hrefAndSrc/</id>
    <published>2018-04-13T02:48:03.000Z</published>
    <updated>2018-07-29T03:20:25.771Z</updated>
    
    <content type="html"><![CDATA[<ul><li>src和href之间存在区别：<ul><li><code>src</code>是引入，用于替换当前元素；</li><li><code>href</code>是引用，用于在当前文档和引用资源之间确立联系。 </li></ul></li><li><strong>注意</strong>：JS、CSS中如有重定义，后定义函数将覆盖前定义函数。<a id="more"></a></li></ul><blockquote>href</blockquote><ul><li><code>href</code>表示<strong>超文本引用</strong>（hypertext reference），用在link和a等元素上，<code>href</code>引用的内容与该页面有关联，是<strong>在当前元素和引用资源之间建立联系</strong>。</li><li><code>href</code>引用的内是外部资源而非网页不可或缺的一部分，因此在遇到<code>href</code>时浏览器会在下载CSS文件的<strong>同时去处理网页的其他部分</strong>。</li><li>注意：建议<strong>使用link方式来加载css</strong>而不是使用@import。</li></ul><blockquote>补充：link和@import的区别</blockquote><ul><li>两者都是外部引用CSS的方式，但是存在一定的区别：<ul><li>区别1：<strong>link是XHTML标签</strong>，除了加载CSS外，还可以定义RSS、定义rel连接属性等其他事务；<strong>@import属于CSS范畴，只能加载CSS</strong>。</li><li>区别2：<strong>link</strong>引用CSS时，在<strong>页面载入时同时加载</strong>；<strong>@import</strong>需要<strong>页面网页完全载入以后加载</strong>。</li><li>区别3：<strong>link是XHTML标签，无兼容问题</strong>；<strong>@import</strong>是在CSS2.1提出的，<strong>低版本的浏览器不支持</strong>。</li><li>区别4：link支持使用Javascript控制DOM去改变样式；而@import不支持。</li></ul></li></ul><blockquote>src</blockquote><ul><li><code>src</code>表示<strong>外部资源引入</strong>，用于<strong>替换当前元素</strong>，用在img，script，iframe等元素上，<code>src</code>是<strong>页面内容不可缺少的一部分</strong>。</li><li>在遇到<code>src</code>时浏览器会<strong>等待这一部分下载运行结束</strong>才会继续处理下面的网页，这也是为什么&lt;script&gt;标签最好放在网页底部。（在加载js文件时，浏览器会阻止页面的渲染）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;src和href之间存在区别：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;src&lt;/code&gt;是引入，用于替换当前元素；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;href&lt;/code&gt;是引用，用于在当前文档和引用资源之间确立联系。 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意&lt;/strong&gt;：JS、CSS中如有重定义，后定义函数将覆盖前定义函数。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="HTML" scheme="https://chongtianhong.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>querySelector与getElementBy等的区别</title>
    <link href="https://chongtianhong.github.io/2018/04/12/querySelector/"/>
    <id>https://chongtianhong.github.io/2018/04/12/querySelector/</id>
    <published>2018-04-12T14:45:24.000Z</published>
    <updated>2018-07-29T02:39:41.222Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li>常见的获取元素的方法有3种，分别是通过元素ID、通过标签名字和通过类名字来获取。</li><li><code>querySelector</code> 和 <code>querySelectorAll</code> 方法的作用是根据 CSS 选择器规范，使用和jquery查询方式一样，可以便捷定位文档中指定元素。<a id="more"></a></li></ul><blockquote>通过元素ID获取元素</blockquote><ul><li>DOM提供了一个名为<code>getElementById</code>的方法，这个方法将返回一个与之对应id属性的节点对象，它是<code>document</code>对象特有的函数，只能通过其来调用该方法，使用方法如下:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(<span class="string">'idName'</span>);</span><br></pre></td></tr></table></figure></li></ul><blockquote>通过标签名字获取元素</blockquote><ul><li><code>getElementsByTagName</code>方法返回一个对象数组（准确的说是HTMLCollection集合）,返回元素的顺序是它们在文档中的顺序,传递给 <code>getElementsByTagName()</code> 方法的字符串可以不区分大小写,使用方法如下:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementsByTagName(tagName);</span><br></pre></td></tr></table></figure></li></ul><blockquote>通过类名字获取元素</blockquote><ul><li>DOM还提供了<code>getElementsByClassName</code>方法来获取指定class名的元素,该方法返回文档中所有指定类名的元素集合，作为 NodeList 对象。NodeList 对象代表一个有顺序的节点列表。NodeList 对象 我们可通过节点列表中的节点索引号来访问列表中的节点(索引号由0开始), 所以有时使用时要指定下标，使用方法如下:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementsByClassName(<span class="string">'className'</span>);</span><br></pre></td></tr></table></figure></li></ul><blockquote>使用<code>querySelector</code> 和 <code>querySelectorAll</code> 方法更便捷地定位元素</blockquote><ul><li><code>querySelector()</code> 方法返回匹配指定 CSS 选择器元素的第一个元素。该方法<strong>只返回匹配指定选择器的第一个元素</strong>。</li><li>如果要返回所有匹配元素，需要使用 <code>querySelectorAll()</code> 方法替代．</li><li>由于<code>querySelector()</code>是按css规范来实现的，所以它<strong>传入的字符串中第一个字符不能是数字</strong>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 获取文档中 id=<span class="string">"demo"</span> 的元素</span><br><span class="line">document.querySelector(<span class="string">"#demo"</span>);</span><br><span class="line"></span><br><span class="line">// 获取文档中第一个 &lt;p&gt; 元素</span><br><span class="line">document.querySelector(<span class="string">"p"</span>);</span><br><span class="line"></span><br><span class="line">// 获取文档中 class=<span class="string">"example"</span> 的第一个元素</span><br><span class="line">document.querySelector(<span class="string">".example"</span>);</span><br><span class="line"></span><br><span class="line">// 获取文档中 class=<span class="string">"example"</span> 的第一个 &lt;p&gt; 元素</span><br><span class="line">document.querySelector(<span class="string">"p.example"</span>);</span><br><span class="line"></span><br><span class="line">// 获取文档中有 <span class="string">"target"</span> 属性的第一个 &lt;a&gt; 元素</span><br><span class="line">document.querySelector(<span class="string">"a[target]"</span>);</span><br><span class="line"></span><br><span class="line">// 获取文档中class = <span class="string">"li"</span> 的div</span><br><span class="line">document.querySelectorAll(<span class="string">"div .li"</span>);</span><br><span class="line"></span><br><span class="line">// 获取文档中id = <span class="string">"k"</span>的节点下的第一个span节点</span><br><span class="line">document.querySelector(<span class="string">"#k span"</span>);</span><br><span class="line"></span><br><span class="line">// 对于多个选择器，使用逗号隔开，只返回一个匹配的元素。</span><br><span class="line">document.querySelector(<span class="string">"h2, h3"</span>).style.backgroundColor = <span class="string">"red"</span>;</span><br><span class="line">// 如果文档中 &lt;h2&gt; 元素位于 &lt;h3&gt; 元素之前，&lt;h2&gt; 元素将会被设置指定的背景颜色。</span><br><span class="line">// 如果文档中 &lt;h3&gt; 元素位于 &lt;h2&gt; 元素之前，&lt;h3&gt; 元素将会被设置指定的背景颜色。</span><br></pre></td></tr></table></figure></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><strong>query选择符选出来的元素及元素数组</strong>是<strong>静态</strong>的，而<strong>getElement</strong>这种方法<strong>选出的元素是动态的</strong>。<ul><li>静态的意思是，选出的所有元素的数组，<strong>不会随着文档操作而改变</strong>。</li></ul></li><li>在使用的时候<strong>getElement</strong>这种方法<strong>性能比较好</strong>，<strong>query选择符</strong>则<strong>比较方便</strong>。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;常见的获取元素的方法有3种，分别是通过元素ID、通过标签名字和通过类名字来获取。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;querySelector&lt;/code&gt; 和 &lt;code&gt;querySelectorAll&lt;/code&gt; 方法的作用是根据 CSS 选择器规范，使用和jquery查询方式一样，可以便捷定位文档中指定元素。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
      <category term="CSS选择器" scheme="https://chongtianhong.github.io/tags/CSS%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
  </entry>
  
</feed>

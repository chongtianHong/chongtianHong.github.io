<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ice&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/c972cec44268ea709ae89f880845ea12</icon>
  <subtitle>知耻而后勇</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chongtianhong.github.io/"/>
  <updated>2018-02-11T08:30:13.651Z</updated>
  <id>https://chongtianhong.github.io/</id>
  
  <author>
    <name>Xiaobing Hong</name>
    <email>450707109@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript学习笔记（一）</title>
    <link href="https://chongtianhong.github.io/2018/02/11/js1/"/>
    <id>https://chongtianhong.github.io/2018/02/11/js1/</id>
    <published>2018-02-11T02:11:09.000Z</published>
    <updated>2018-02-11T08:30:13.651Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><div class="note danger">HTML定义了网页的内容<br>CSS描述了网页的布局<br>JavaScript给定了网页的行为<br></div><ul><li><strong>脚本语言</strong> 是用于web开发的脚本语言（往往不能独立使用，和html/jsp/php/asp/asp.net 配合使用、有自己的变量、函数、控制语句，顺序、分支、循环）。<a id="more"></a></li><li><strong>脚本语言</strong>即解释性语言，即在执行时候，直接对源码进行执行。</li><li><strong>JavaScript 是脚本语言</strong>。轻量级、可插入HTML页面的任意位置、在客户端运行、由现代浏览器执行(Node.js可运行在服务端)。</li><li>因为js是由<strong>浏览器</strong>来执行的，因此这不同类型的浏览器可能对js的支持不一样。</li><li>通过使用<code>&lt;script&gt;</code>标签可在HTML页面中引入js，<code>&lt;script&gt;</code>和<code>&lt;/script&gt;</code>会告诉js在何时开始和结束。</li><li>在一个html文件中可以出现多对<code>&lt;script&gt;</code>片段，浏览器会按照先后顺序<strong>依次执行</strong>。</li><li>js中的变量的数据类型是<strong>由js引擎</strong>决定的。</li><li>js严格<strong>区分大小写</strong>（标记语言不区分）。</li></ul><h4 id="js命名规范"><a href="#js命名规范" class="headerlink" title="js命名规范"></a>js命名规范</h4><ul><li>使用大小写字母、数字、_、$可以命名；</li><li>不能以数字开头；</li><li>不能使用js的关键字/保留字；</li><li>区分大小写；</li><li>单行注释使用 //，多行注释使用 /**/。</li></ul><h5 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h5><ul><li><code>window.prompt</code> 请输入值对话框；</li><li><code>parseFloat()</code>、<code>parseInt()</code> 转换成浮点数、整数；</li><li><code>a++</code> 先判断再++；</li><li><code>++a</code> 先++再判断；</li><li>逻辑运算中，0 、””、 flase、 null、 undefined、 NaN均表示<code>flase</code>；<br>js中非0的数都为<code>True</code>；</li><li>|| 返回第一个不为<code>flase</code>那个值（对象亦可），或者是返回最后一个值（如果全部是<code>flase</code>的话）。</li></ul><h5 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h5><blockquote>顺序控制</blockquote><ul><li>对于编程而言，不控制其流程就是顺序执行。</li></ul><blockquote>分支控制</blockquote><ul><li><p>单分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">//执行语句；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>多分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式1)&#123;</span><br><span class="line">//执行</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表示式2)&#123;</span><br><span class="line">//执行</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(可以有多个<span class="keyword">else</span> <span class="keyword">if</span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;//可以没有</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>switch</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">switch(表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 常量1：</span><br><span class="line">//执行语句；</span><br><span class="line"><span class="built_in">break</span>；//作用是跳出整个switch</span><br><span class="line"><span class="keyword">case</span> 常量2：</span><br><span class="line">//执行语句；</span><br><span class="line"><span class="built_in">break</span>；</span><br><span class="line">……</span><br><span class="line">default：</span><br><span class="line">//执行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>数据类型可以是js支持的任何类型（<strong>数组</strong>和<strong>对象</strong>除外）。</li><li>case后面的数据类型也可以任意（<strong>数组</strong>和<strong>对象</strong>除外）。</li><li>break的作用是跳出整个switch。</li><li>如果没有匹配的则执行default。</li></ul><blockquote>循环控制</blockquote><ul><li><p>for循环基本结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(循环初值; 循环条件; 步长)&#123;</span><br><span class="line">语句;//循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>while循环</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件表达式)&#123;</span><br><span class="line">//执行语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>do while</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">语句；//循环体</span><br><span class="line">&#125;<span class="keyword">while</span>(循环条件);</span><br></pre></td></tr></table></figure></li></ul><h3 id="js函数"><a href="#js函数" class="headerlink" title="js函数"></a>js函数</h3><ul><li>函数是为完成某一功能的代码（语句，指令）的集合，当调用该函数时，会执行函数内的代码。</li><li>基本语法<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(参数列表)&#123;</span><br><span class="line">        //执行代码</span><br><span class="line">     renturn 值;//可以选择，实现函数将值返回到调用它的地方</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>一个程序中有可能具有相同名称的局部变量和全局变量，在这种情况下，局部变量会优先于全局变量。</li><li>函数可以通过声明定义（使用关键字function），不是一个可执行语句，所以不以分号结束（函数声明后不会立即执行，会在我们需要的时候调用执行）。</li><li>函数也可以通过一个表达式定义（var myvar=函数名），函数存储在变量中，函数表达式是一个执行语句，以分号结尾。</li><li>函数声明后不会立即执行，会在我们需要的时候调用执行。</li><li>提升应用在变量的声明（变量初始化不提升）与函数的声明（函数表达式不提升）。<ul><li>提升是JavaScript默认将当前作用域提升到前面的行为，因此函数和变量可以在声明之前调用。</li></ul></li><li>函数是对象，具有属性和方法。<ul><li><code>arguments.length</code>属性返回函数调用过程中接收到的参数个数。</li><li><code>toString()</code>方法将函数作为一个字符串返回（调用方法：fuctionName.toString())。</li></ul></li><li>若函数定义作为对象的属性，称之为<strong>对象方法</strong>。</li><li><p>函数如果用于创建新的对象，称之为<strong>对象的构造函数</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> myFunction(name)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">var myFun = new myFunction(<span class="string">'John'</span>);</span><br></pre></td></tr></table></figure></li><li><p>关于接收函数返回值的问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var myvar=<span class="built_in">test</span>(<span class="string">'abc'</span>)；</span><br><span class="line">//如果<span class="built_in">test</span>函数没有返回值，则返回的就是undefined；如果有返回值，则将返回值赋给myvar</span><br><span class="line">window.alert(myvar);</span><br></pre></td></tr></table></figure></li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li><p>创建数组有三种方式:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//第一种方式：基本方法</span><br><span class="line">var arr=[元素值, 元素值, …..];</span><br><span class="line">//第二种方式：先定义再赋值</span><br><span class="line">var arr = new Array();</span><br><span class="line">arr[0] = 元素值;</span><br><span class="line">arr[1] = 元素值;</span><br><span class="line">...</span><br><span class="line">//第三种方式：定义数组时同时赋值</span><br><span class="line">var arr = new Array(元素值, 元素值,...);</span><br></pre></td></tr></table></figure></li><li><p>元素的值可以是任意类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var arr=[4,56,<span class="string">"hello world"</span>,<span class="literal">true</span>];</span><br></pre></td></tr></table></figure></li></ul><ul><li>js的数组是动态增长的。</li><li>JavaScript不支持真正的多维数组，实现多维数组的方法：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var t = new Array(5);</span><br><span class="line"><span class="keyword">for</span>(var i=0; i&lt;t.length; i++)&#123;</span><br><span class="line">    t[i] = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>对字符串分割，生成一个字符串数组(split函数)。</li><li>数组有多种方法：sort、push、pop、unshift、shift、join、reverse、concat、slice、splice、toString等。</li></ul><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var bubbleSort = <span class="keyword">function</span>(arr)&#123;</span><br><span class="line">    var len = arr.length;</span><br><span class="line">    <span class="keyword">for</span>(var i = 0; i &lt; len - 1; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(var j = 0; j &lt; len - i - 1; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j+1]&#123;</span><br><span class="line">                var temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+1];</span><br><span class="line">                arr[j+1] = temp;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//快速排序算法</span><br><span class="line">var quickSort = <span class="keyword">function</span>(arr)&#123;</span><br><span class="line"><span class="keyword">if</span> (arr.length &lt;= 1)&#123;</span><br><span class="line"><span class="built_in">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line">var pivotIndex = Math.floor(arr.length / 2);</span><br><span class="line">var pivot = arr.splice(pivotIndex, 1)[0];</span><br><span class="line">var left = [];</span><br><span class="line">var right = [];</span><br><span class="line"><span class="keyword">for</span>(var i = 0; i&lt; arr.length; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &lt; pivot)&#123;</span><br><span class="line">left.push(arr[i]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">right.push(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> quickSort(left).concat([pivot], quickSort(right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="js面向（基于）对象编程"><a href="#js面向（基于）对象编程" class="headerlink" title="js面向（基于）对象编程"></a>js面向（基于）对象编程</h3><ul><li>js中没有类class，但是它取了新的名字叫原型对象，因此类等同于原型对象。</li><li>js中的对象属性可以动态的添加。</li><li>属性没有限制。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Cat</span></span>()&#123;//函数</span><br><span class="line">&#125;</span><br><span class="line">var cat1 = new.Cat();//对象</span><br><span class="line">cat1.name = <span class="string">"xiaobai"</span>;</span><br><span class="line">cat1.age = <span class="string">"3"</span>;</span><br><span class="line">cat1.color = <span class="string">"write"</span>;</span><br></pre></td></tr></table></figure></li></ul><blockquote>类（原型对象）和对象的区别和联系</blockquote><ul><li>类是抽象的，概念代表一类事物。</li><li>对象是具体的，代表一个实体。</li><li>对象是以类（原型对象）为模板创建的。</li></ul><blockquote>创建对象的方式有五种</blockquote><ul><li>工厂方法一使用new object创建对象并添加相关属性。</li><li>使用构造函数来定义类（原型对象）。</li><li>使用prototype。</li><li>构造函数及原型混合方式。</li><li>动态原型方式。</li></ul><h3 id="使用构造函数来定义类（原型对象）"><a href="#使用构造函数来定义类（原型对象）" class="headerlink" title="使用构造函数来定义类（原型对象）"></a>使用构造函数来定义类（原型对象）</h3><blockquote>访问对象的属性的方法有两种：</blockquote><ul><li>普通方式：对象名.属性名。</li><li>动态访问：对象名[“属性名”]。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">person</span></span>()&#123;&#125;;</span><br><span class="line">var p1 = new person();</span><br><span class="line">p1.name = <span class="string">"John"</span>；</span><br><span class="line">window.alert(p1.name);//John</span><br><span class="line">var val = <span class="string">"na"</span>+<span class="string">"me"</span>;</span><br><span class="line">window.alert(p1[val]);//John</span><br></pre></td></tr></table></figure></li></ul><blockquote>删除对象的属性</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">delete 对象名.属性名//立即释放对象的属性空间</span><br><span class="line">//或者</span><br><span class="line">对象名.属性名 = null;</span><br></pre></td></tr></table></figure><blockquote>this</blockquote><ul><li>this只能在类定义的内部使用，不能在外部使用。</li><li><blockquote>对象-成员函数（方法）</blockquote></li></ul><blockquote>给对象添加方法有两种方法</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//第一种方法</span><br><span class="line"><span class="keyword">function</span> 类名()&#123;//构造函数</span><br><span class="line"> this.属性；</span><br><span class="line">&#125;</span><br><span class="line">var 对象名 = new 类名()；</span><br><span class="line"><span class="keyword">function</span> 函数名()&#123;</span><br><span class="line">//执行</span><br><span class="line">&#125;</span><br><span class="line">对象名.属性名 = 函数名；</span><br><span class="line">//这样就相当于把函数赋给 对象名.属性名，此时这个属性名就表示一个函数。</span><br><span class="line">对象名.属性名();//调用函数</span><br><span class="line"></span><br><span class="line">//或</span><br><span class="line">对象名.属性名 = <span class="keyword">function</span>(参数列表)&#123;</span><br><span class="line">//代码</span><br><span class="line">&#125;；</span><br><span class="line"> 调用</span><br><span class="line"> 对象名.属性名(实际参数)；</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">前面的方法有一个问题：</span><br><span class="line">就是每个对象独占函数代码。这样若对象很多，则会影响效率.</span><br><span class="line">js设计者，给我们提供另一个方法:</span><br><span class="line">原型(prototype)法：多个对象可以共享函数代码</span><br><span class="line">*/</span><br><span class="line">//第二种方法</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Dog</span></span>()&#123;</span><br><span class="line">&#125;</span><br><span class="line">var dog1 = new Dog();</span><br><span class="line">//使用prototype类去绑定一个函数给shout</span><br><span class="line">Dog.prototype.shout = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">window.alert(<span class="string">"小狗"</span>);</span><br><span class="line">&#125;</span><br><span class="line">dog1.shout();</span><br><span class="line">var dog2 = new Dog();</span><br><span class="line">dog2.shout();</span><br></pre></td></tr></table></figure><blockquote>== 与 === 的比较</blockquote><ul><li>对于string,number等基础类型，==和===是有区别的：<ul><li>不同类型间比较，==比较”转化成同一类型后的值”后，看”值”是否相等；===如果类型不同，其结果就是不等。</li><li>同类型比较，直接进行”值”比较，两者结果一样。</li></ul></li><li>对于Array,Object等高级类型，==和===是没有区别的：<br>进行”指针地址”比较，地址相同则相等。</li></ul><h3 id="对象-object类"><a href="#对象-object类" class="headerlink" title="对象 object类"></a>对象 object类</h3><blockquote>构造函数</blockquote><ul><li>基本用法<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> constrFun(参数列表)&#123;</span><br><span class="line">    this.属性 = 参数值；</span><br><span class="line">&#125;</span><br><span class="line">var 对象名 = new constrFun(参数列表值);</span><br></pre></td></tr></table></figure></li></ul><blockquote>直接创建对象</blockquote><ul><li>如果一个对象比较简单，我们可以直接创建。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var dog = &#123;</span><br><span class="line">    name:<span class="string">'小狗'</span>,</span><br><span class="line">    age:8,</span><br><span class="line">    fun1:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        window.alert(<span class="string">'hello,world'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><blockquote>遍历对象属性</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (var key <span class="keyword">in</span> History)&#123;//History为对象</span><br><span class="line">    console.log(key + <span class="string">":"</span> + History[key] + <span class="string">"&lt;/br&gt;"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h4&gt;&lt;div class=&quot;note danger&quot;&gt;HTML定义了网页的内容&lt;br&gt;CSS描述了网页的布局&lt;br&gt;JavaScript给定了网页的行为&lt;br&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;脚本语言&lt;/strong&gt; 是用于web开发的脚本语言（往往不能独立使用，和html/jsp/php/asp/asp.net 配合使用、有自己的变量、函数、控制语句，顺序、分支、循环）。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>新的开始</title>
    <link href="https://chongtianhong.github.io/2018/02/10/start/"/>
    <id>https://chongtianhong.github.io/2018/02/10/start/</id>
    <published>2018-02-10T15:14:45.000Z</published>
    <updated>2018-02-10T17:47:09.298Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/Nepal2.jpg" width="600" alt="Nepal"><br>终于迎来假期，于是有时间可以开始搭建一直以来都想做的博客，经过一段时间的折腾，终于用 Hexo + GitHub 搭建起了一个属于自己的博客站点，第一时间边学边写，弄出了这第一篇博客，心里甚是欢喜，那就写篇随笔纪念一下吧。<br><a id="more"></a></p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>一直以来都不是一个擅长记录的人，而这个博客，对我来说是一个新的开始，也是我前端道路上的一个重要的实践。<br><br>在偶然的机会下接触前端，发现自己对于这一块特别感兴趣，并决定继续深入学习前端，我开始意识到是时候开始经营一个属于自己的技术博客。<br><br>虽然现在博客的功能还不算特别完善，但我会通过不断积累，一步一步地把这个以 <strong><em>技术交流</em></strong> 为主的博客经营好，尝试将每天学习遇到的一些问题或者是一些学习的心得记录在这里，也希望能通过这种方式和各位技术大牛进行交流。</p><h2 id="Why-amp-How-学习前端"><a href="#Why-amp-How-学习前端" class="headerlink" title="Why &amp; How 学习前端"></a>Why &amp; How 学习前端</h2><p>从2017年6月份忙完了科研论文开始，就开始对自己的职业规划进行考虑。一直以来，都想找到自己的定位，学一门让自己感兴趣的技术。机缘巧合下，听了前端的公开课，觉得这个东西很有趣，做完马上就能看到效果，于是决定学习前端。<br><br>随着深入学习，听<strong>公开课、看教程、看博客</strong>等，发现前端并不仅仅是做特效，越来越觉得这项技术深深地把我吸引。然而，自学了4个月前端，感觉进展有点缓慢，身处学校科研圣地，身边也没有前端前辈可以请教，说实话，心里挺着急。接下来的学期就是实习招聘季，甚至自己的专业与前端并不对口，如果实践经历太少，很难有竞争优势。于是决心在秋季学期，要找到一份关于前端的实习，能够上手去做一些项目，将理论和实践结合起来。</p><h2 id="关于实习"><a href="#关于实习" class="headerlink" title="关于实习"></a>关于实习</h2><p>很多次告诉自己<strong>实习经历真的很重要</strong>，然而对于是否投简历，在什么时间投总是犹豫不决。一是怕自己学的时间太短，能力不够，企业不想要；二是怕不让去实习的导师“查岗”。<br><br>在犹豫中继续自学前端，到11月中旬，终于勇敢地投出了简历。很幸运，去了一家我想去的公司实习，实习的导师也很强。在公司学到了挺多，实习跟自学真的节奏很不一样。我会好好加油，在实习中快速成长，为项目组做出自己的贡献。</p><div class="note info">机会留给有准备的人，越努力，越幸运！</div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/Nepal2.jpg&quot; width=&quot;600&quot; alt=&quot;Nepal&quot;&gt;&lt;br&gt;终于迎来假期，于是有时间可以开始搭建一直以来都想做的博客，经过一段时间的折腾，终于用 Hexo + GitHub 搭建起了一个属于自己的博客站点，第一时间边学边写，弄出了这第一篇博客，心里甚是欢喜，那就写篇随笔纪念一下吧。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://chongtianhong.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://chongtianhong.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://chongtianhong.github.io/2018/02/09/hello-world/"/>
    <id>https://chongtianhong.github.io/2018/02/09/hello-world/</id>
    <published>2018-02-09T01:58:27.385Z</published>
    <updated>2018-02-10T15:16:57.434Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>

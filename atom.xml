<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ice&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/c972cec44268ea709ae89f880845ea12</icon>
  <subtitle>知耻而后勇</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chongtianhong.github.io/"/>
  <updated>2018-02-18T05:14:38.078Z</updated>
  <id>https://chongtianhong.github.io/</id>
  
  <author>
    <name>Xiaobing Hong</name>
    <email>450707109@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>web前端性能优化</title>
    <link href="https://chongtianhong.github.io/2018/02/17/web/"/>
    <id>https://chongtianhong.github.io/2018/02/17/web/</id>
    <published>2018-02-16T16:11:15.000Z</published>
    <updated>2018-02-18T05:14:38.078Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h4><ul><li><strong>前端性能优化</strong>是指从用户访问资源到资源完整的展现在用户面前的过程中，通过技术手段和优化策略，缩短每个步骤的处理时间从而<strong>提升整个资源的访问和呈现速度</strong>。<ul><li>在构建web站点的过程中，任何一个细节都有可能影响网站的访问速度，如果不了解性能优化知识，很多不利网站访问速度的因素会形成累加，从而严重影响网站的性能，导致网站访问速度变慢，用户体验低下，最终导致用户流失。</li></ul></li><li><strong>性能黄金法则</strong>：只有10%~20%的最终用户响应时间是用在从Web服务器获取HTML文档并传送到浏览器的，其余的80%~90%时间花在下载页面中的所有组件上。<a id="more"></a></li><li>网站一般可划分为前端和后台。我们可以理解成<strong>后台是用来实现网站的功能的</strong>，比如：实现用户注册，用户能够为文章发表评论等等，而<strong>前端属于功能的表现</strong>，并且影响用户访问体验的绝大部分来自前端页面。</li><li>网站前端的用户体验决定了用户是否想要去使用网站的功能，而网站的功能决定了用户是否会一票否决前端体验。<ul><li>网站的加载速度严重影响了用户体验，也决定了这个网站的生死存亡。</li></ul></li></ul><blockquote>从浏览器发起请求到页面能正常浏览经过以下9个阶段（process）：</blockquote><ol><li>预处理</li><li>域名（DNS）解析</li><li>发起TCP的3次握手</li><li>建立TCP连接</li><li>发起HTTP请求</li><li>等待服务器响应</li><li>接受HTML代码</li><li>解析HTML代码，并请求HTML代码中的资源（如js、css、图片等）</li><li>浏览器对页面进行渲染呈现给用户</li></ol><blockquote>TCP的3次握手：</blockquote><ul><li>HTTP请应用层协议是建立在TCP传输层协议之上的。在浏览器发送HTTP请求之前，会先通过三次握手建立TCP连接，提供可靠传输。</li></ul><h4 id="性能优化的具体方法"><a href="#性能优化的具体方法" class="headerlink" title="性能优化的具体方法"></a>性能优化的具体方法</h4><ul><li>可从<strong>内容层面</strong>、<strong>网络传输阶段</strong>、<strong>渲染阶段</strong>、<strong>脚本执行阶段</strong>四个方面对前端性能进行优化。</li></ul><h5 id="内容层面"><a href="#内容层面" class="headerlink" title="内容层面"></a>内容层面</h5><h6 id="1-DNS解析优化"><a href="#1-DNS解析优化" class="headerlink" title="1. DNS解析优化"></a>1. DNS解析优化</h6><ul><li>DNS也是开销，通常浏览器查找一个给定域名的IP地址要花费20~120毫秒，在完成域名解析之前，浏览器不能从服务器加载到任何东西。</li></ul><blockquote>1）减少DNS查询次数</blockquote><ul><li>DNS查询也消耗响应时间，如果我们的网页内容来自各个不同的domain (比如嵌入了开放广告，引用了外部图片或脚本)，那么客户端首次解析这些domain也需要消耗一定的时间。DNS查询结果缓存在本地系统和浏览器中一段时间，所以DNS查询一般是对首次访问响应速度有所影响。</li><li>同一个页面的请求资源应尽量少的使用不同的主机名，这可以减少网站并行下载的数量，但很多网站为了加速下载资源其实是特意用了多个主机名，这里需要做一个权衡。</li></ul><blockquote>2）DNS缓存</blockquote><ul><li>为了增加访问效率，计算机有DNS缓存机制，当访问过某个网站并得到其IP后，会将其域名和IP缓存下来，下一次访问的时候，就不需要再请求域名服务器获取IP，直接使用缓存中的IP，提高了响应的速度。</li><li>缓存是有有效时间的，当过了有效时间后，再次请求网站时，还需要先请求域名解析。</li></ul><blockquote>3）HTTP keep-alive</blockquote><ul><li>HTTP协议采用“请求-应答”模式：当使用<strong>普通模式</strong>，即非KeepAlive模式时，每个请求/应答客户和服务器都要<strong>新建一个连接</strong>，<strong>完成之后立即断开连接</strong>（HTTP协议为<strong>无连接</strong>的协议）。</li><li>使用<strong>keep-alive模式</strong>可以改善这种状态，即在一次TCP连接中可以持续发送多份数据而不会断开连接。通过使用keep-alive机制，可以减少TCP连接建立次数，也意味着可以减少TIME_WAIT状态连接，以此提高性能和提高httpd服务器的吞吐率(更少的tcp连接意味着更少的系统内核调用,socket的accept()和close()调用)。</li><li>但是，长时间的TCP连接容易导致系统资源无效占用。配置不当的keep-alive，有时比重复利用连接带来的损失还更大。所以，正确地设置keep-alive timeout时间非常重要。</li></ul><blockquote>4）适当的主机域名</blockquote><ul><li>当客户端DNS缓存（浏览器和操作系统）缓存为空时，DNS查找的数量与要加载的Web页面中唯一主机名的数量相同，包括页面URL、脚本、样式表、图片、Flash对象等的主机名。减少主机名的数量就可以减少DNS查找的数量。</li></ul><ul><li><strong>减少唯一主机名的数量</strong>会潜在<strong>减少页面中并行下载的数量</strong>，这样减少主机名和并行下载的方案会<strong>产生矛盾</strong>，这里需要做一个权衡。建议将组件放到至少两个但不多于4个主机名下，减少DNS查找的同时也允许高度并行下载。</li></ul><h6 id="2-避免重定向（-还是需要的）"><a href="#2-避免重定向（-还是需要的）" class="headerlink" title="2. 避免重定向（/还是需要的）"></a>2. 避免重定向（/还是需要的）</h6><ul><li>重定向用于将用户从一个URL重新路由到另一个URL。</li><li>当页面发生了重定向，就会延迟整个HTML文档的传输。在HTML文档到达之前，页面中不会呈现任何东西，也没有任何组件会被下载。</li><li>一种最耗费资源、经常发生而很容易被忽视的重定向是URL的最后缺少<code>/</code>。</li><li>在定义链接地址的href属性的时候，尽量使用最完整的、直接的地址：<ul><li>使用www.cnblogs.com 而不是cnblogs.com</li><li>使用cn.bing.com 而不是bing.com</li><li>使用www.google.com.hk 而不是google.com</li><li>使用www.mysite.com/products/ 而不是 www.mysite.com/products</li></ul></li><li>在使用Response.Redirect的时候，设置第二个参数为false。</li><li>如果涉及到从测试环境到生产环境的迁移，建议通过DNS中的CNAME的机制来定义别名，而不是强制地重定向来实现。</li></ul><h6 id="3-拆分域名"><a href="#3-拆分域名" class="headerlink" title="3. 拆分域名"></a>3. 拆分域名</h6><ul><li>可利用多个域名来存储网站资源。<ul><li>同一时间针对同一域名下的请求有一定数量限制，超过限制数目的请求会被阻塞。大多数浏览器的并发数量都控制在6以内。有些资源的请求时间很长，因而会阻塞其他资源的请求。因此，对于一些静态资源，如果放到不同的域名下面就能实现与其他资源的并发请求。</li></ul></li><li>过多的域名会使DNS解析负担加重，因此一般控制在2-4个。</li></ul><blockquote>放到同个域名下的内容分类：</blockquote><ul><li>页面类：html、htm等</li><li>样式类：js、css等</li><li>图片类：jpg、png、gif等</li><li>动态类：php、asp等</li></ul><h6 id="4-避免404错误"><a href="#4-避免404错误" class="headerlink" title="4. 避免404错误"></a>4. 避免404错误</h6><ul><li>特别要避免给404指定一个停摆页面，否则所有404错误都将会加载一次页面。</li></ul><h5 id="网络传输阶段"><a href="#网络传输阶段" class="headerlink" title="网络传输阶段"></a>网络传输阶段</h5><h6 id="1-减少传输过程中实体的大小"><a href="#1-减少传输过程中实体的大小" class="headerlink" title="1. 减少传输过程中实体的大小"></a>1. 减少传输过程中实体的大小</h6><blockquote>1）合理设置 HTTP缓存</blockquote><ul><li>页面的初次访问者会进行很多HTTP请求，但是通过使用一个长久的Expires头，可以使这些组件被缓存，下次访问的时候，就可以减少不必要的HTPP请求，从而提高加载速度。</li><li>根据资源的变化频率为文件头指定Expires，使内容具有缓存性。</li><li>原则：能缓存越多越好，能缓存越久越好。</li><li>Web服务器通过Expires header告诉客户端可以使用一个组件的当前副本，直到指定的时间为止。</li></ul><blockquote>2）cookie优化</blockquote><ul><li>减少Cookie大小<ul><li>因为Cookie是本地的磁盘文件，Cookie包含在每次请求和响应中，每次浏览器都会去读取相应的Cookie，太大的cookie会严重影响数据传输，因此哪些数据需要写入cookie需要慎重考虑，尽量减少cookie中传输的数据量。</li></ul></li><li>页面内容使用无cookie域名<ul><li>对于大多数网站的静态资源的访问，如CSS、script等，发送cookie没有意义，可以考虑采用不同的domain来单独存放这些静态文件，避免请求静态资源时发送cookie，减少cookie传输次数。</li><li>这样做不仅可以减少cookie大小从而提高响应速度，而且另一个好处是有些proxy拒绝缓存带有cookie的内容，如果能将这些静态资源cookie去除，那就可以得到这些proxy的缓存支持。</li></ul></li></ul><blockquote>3）文件压缩（Accept-Encoding：g-zip）</blockquote><ul><li>在服务器端对文件进行压缩，在浏览器端对文件解压缩，可有效减少通信传输的数据量。</li><li>如果可以的话，尽可能的将外部的脚本、样式进行合并，多个合为一个。</li><li>文本文件的压缩效率可达到80%以上，因此HTML、CSS、javascript文件启用GZip压缩可达到较好的效果。</li><li>但是压缩对服务器和浏览器产生一定的压力，在通信带宽良好，而服务器资源不足的情况下要权衡考虑。</li></ul><h6 id="2-减少HTTP请求的次数（改善响应时间最简单的途径）"><a href="#2-减少HTTP请求的次数（改善响应时间最简单的途径）" class="headerlink" title="2. 减少HTTP请求的次数（改善响应时间最简单的途径）"></a>2. 减少HTTP请求的次数（改善响应时间最简单的途径）</h6><blockquote>1）合并CSS和JS文件</blockquote><ul><li>将多个样式表或者脚本文件合并到一个文件中，可以减少HTTP请求的数量从而缩短效应时间。</li></ul><blockquote>2）合并图片（css sprites）</blockquote><ul><li>合并后的图片会比分离的图片总和要小，因为它降低了图片自身的开销，譬如颜色表、格式信息等。</li></ul><blockquote>3）图片较多的页面也可以使用 <strong>懒加载（lazyLoad）</strong>等技术进行优化。</blockquote><ul><li>这条策略实际上并不一定能减少 HTTP请求数，但是却能在某些条件下或者页面刚加载时减少HTTP请求数。</li><li>对于图片而言，在页面刚加载的时候可以只加载第一屏，当用户继续往后滚屏的时候才加载后续的图片。这样一来，假如用户只对第一屏的内容感兴趣时，那剩余的图片请求就都节省了。</li></ul><h6 id="3-异步加载（并发-requirejs）"><a href="#3-异步加载（并发-requirejs）" class="headerlink" title="3. 异步加载（并发,requirejs）"></a>3. 异步加载（并发,requirejs）</h6><ul><li>异步加载又叫非阻塞加载，浏览器在下载JS的同时，还会继续进行后续页面的处理。</li><li>JS的加载分为两个部分：下载和执行。异步加载只是解决了下载的问题，但是代码在下载完成后就会立即执行，在执行过程中浏览器处于阻塞状态，响应不了任何需求。</li></ul><h6 id="4-预加载、JS延迟加载、按需加载"><a href="#4-预加载、JS延迟加载、按需加载" class="headerlink" title="4. 预加载、JS延迟加载、按需加载"></a>4. 预加载、JS延迟加载、按需加载</h6><blockquote> 预加载</blockquote><ul><li>预加载是一种浏览器机制，使用浏览器空闲时间来预先下载/加载用户接下来很可能会浏览的页面/资源，当用户访问某个预加载的链接时，如果从缓存命中,页面就得以快速呈现。</li></ul><blockquote>JS延迟加载</blockquote><ul><li>有些JS代码在某些情况在需要使用，并不是页面初始化的时候就要用到。延迟加载就是为了解决这个问题。将JS切分成许多模块，页面初始化时只加载需要立即执行的JS，然后其它JS的加载延迟到第一次需要用到的时候再加载。类似图片的延迟加载。<ul><li>解决思路：可以利用异步加载将JS缓存起来，但不立即执行，需要的时候再执行。</li></ul></li><li>JS延迟加载机制(LazyLoad)：简单来说，就是在浏览器滚动到某个位置在触发相关的函数，实现页面元素的加载或者某些动作的执行。</li></ul><blockquote>按需加载</blockquote><ul><li>按需加载是前端性能优化中的一项重要措施，按需加载指的是当用户触发了动作时才加载对应的功能。触发的动作，是要看具体的业务场景而言，包括但不限于以下几个情况：鼠标点击、输入文字、拉动滚动条，鼠标移动、窗口大小更改等。加载的文件，可以是JS、图片、CSS、HTML等。</li></ul><h6 id="5-使用CDN-Content-Delivery-Network-内容分发网络"><a href="#5-使用CDN-Content-Delivery-Network-内容分发网络" class="headerlink" title="5. 使用CDN(Content Delivery Network, 内容分发网络)"></a>5. 使用CDN(Content Delivery Network, 内容分发网络)</h6><ul><li>使用CDN加速，使用户从离自己最近的服务器下载文件。<ul><li>如果应用程序web服务器离用户更近，那么一个HTTP请求的响应时间将缩短。另一方面，如果组件web服务器离用户更近，则多个HTTP请求的响应时间将缩短。</li></ul></li><li>CDN缓存的一般是静态资源，如图片、文件、CSS、script脚本、静态网页等，这些文件访问频度很高，将其缓存在CDN可极大改善网页的打开速度。</li></ul><h6 id="6-反向代理"><a href="#6-反向代理" class="headerlink" title="6. 反向代理"></a>6. 反向代理</h6><ul><li>反向代理方式是指代理原始服务器来接受来自Internet的链接请求，然后将请求转发给内部网络上的原始服务器，并将从原始服务器上得到的结果转发给Internet上请求数据的客户端。</li><li>反向代理就是位于Internet和原始服务器之间的服务器，对于客户端来说就表现为一台服务器，客户端所发送的请求都是直接发送给反向代理服务器，然后由反向代理服务器统一调配。</li><li>和传统的代理服务器一样，反向代理服务器也有保护网站安全的作用，来自互联网的请求必须经过反向代理服务器，相当于在原始服务器之间增加一道屏障。</li><li>除了安全功能，反向代理服务器也可以通过配置缓存功能加速web请求，当用户第一次访问静态内容的时候，静态内容就被缓存在反向代理服务器上，下一次用户请求静态资源时，直接从反向代理服务器返回静态内容，加速web请求访问速度，减轻原始服务器的压力。</li><li>此外，反向代理也可以实现负载均衡的功能，而通过负载均衡构建的应用集群可以提高系统总体处理能力，进而改善网站高并发情况下的性能。</li></ul><h6 id="7-AJax-优化"><a href="#7-AJax-优化" class="headerlink" title="7. AJax 优化"></a>7. AJax 优化</h6><ul><li>缓存 Ajax<ul><li>POST的请求，是不可以在客户端缓存的，每次请求都需要发送给服务器进行处理，每次都会返回状态码200（可以在服务器端对数据进行缓存，以便提高处理速度）。</li><li>GET的请求，是可以（而且默认）在客户端进行缓存的，除非指定了不同的地址，否则同一个地址的AJAX请求，不会重复在服务器执行，而是返回304。</li></ul></li><li>在进行Ajax请求的时候，可以选择<strong>尽量使用get方法</strong>，这样可以使用客户端的缓存，提高请求速度。<ul><li>仅取决于cookie数量。</li></ul></li></ul><h5 id="渲染阶段"><a href="#渲染阶段" class="headerlink" title="渲染阶段"></a>渲染阶段</h5><h6 id="1-将CSS和JS放到外部文件中引用，CSS放在页面最上部，JavaScript放在页面最下面"><a href="#1-将CSS和JS放到外部文件中引用，CSS放在页面最上部，JavaScript放在页面最下面" class="headerlink" title="1.将CSS和JS放到外部文件中引用，CSS放在页面最上部，JavaScript放在页面最下面"></a>1.将CSS和JS放到外部文件中引用，CSS放在页面最上部，JavaScript放在页面最下面</h6><blockquote>CSS样式表放在页面最上部</blockquote><ul><li>浏览器会在下载完成全部CSS之后才对整个页面进行渲染，因此最好的做法是将CSS放在页面最上面，让浏览器尽快下载CSS。如果将CSS放在其他地方比如BODY中，则浏览器有可能还未下载和解析到CSS就已经开始渲染页面了，这就导致页面由无CSS状态跳转到CSS状态，用户体验比较糟糕，所以可以考虑将CSS放在HEAD中。</li><li>将样式表放在头部对于实际页面加载的时间并不能造成太大影响，但是这会减少页面首屏出现的时间，使页面内容逐步呈现，改善用户体验，防止“白屏”。</li><li>样式表中的内容是绘制网页的关键信息，如果将样式表放在底部，浏览器会拒绝渲染已经下载的网页，因为大多数浏览器在实现时都努力避免重绘。</li></ul><blockquote>JS脚本放在页面最底部</blockquote><ul><li>JS的下载和执行会阻塞DOM树的构建（中断了DOM树的更新），即每次出现都会让页面等待脚本的解析和执行（不论JavaScript是内嵌的还是外链的），JavaScript代码执行完成后，才继续渲染页面。</li><li>浏览器在加载JavaScript后立即执行，有可能会阻塞整个页面，造成页面显示缓慢，因此JavaScript<strong>最好</strong>放在页面最下面。</li><li>但如果页面解析时就需要用到JavaScript，这时不合适将脚本放到底部。</li></ul><blockquote>下载脚本时并行下载是被禁用的</blockquote><ul><li>即使使用了不同的主机名，也不会启用其他的下载。因为脚本可能修改页面内容，因此浏览器会等待脚本执行完成。</li><li>另外，也是为了保证脚本能够按照正确的顺序执行，因为后面的脚本可能与前面的脚本存在依赖关系，不按照顺序执行可能会产生错误。</li></ul><h6 id="2-减少重绘（Repaint）和回流（Reflow）"><a href="#2-减少重绘（Repaint）和回流（Reflow）" class="headerlink" title="2. 减少重绘（Repaint）和回流（Reflow）"></a>2. 减少重绘（Repaint）和回流（Reflow）</h6><ul><li>Repaint（重绘）就是在<strong>一个元素的外观被改变，但没有改变布局(宽高)</strong>的情况下发生，如改变visibility、outline、背景色等等。</li><li>Reflow（回流）就是<strong>DOM的变化影响到了元素的几何属性（宽和高）</strong>，浏览器会重新计算元素的几何属性，会使渲染树中受到影响的部分失效，浏览器会验证DOM树上的所有其它结点的visibility属性，这也是Reflow低效的原因。如：改变窗囗大小、改变文字大小、内容的改变、浏览器窗口变化，style属性的改变等等。如果Reflow的过于频繁，CPU使用率就会大大增加。</li><li>每次对DOM元素的样式操作都会引发重绘，如果涉及布局还会引发回流。</li><li>回流必然会引起重绘，而重绘可以单独出现。</li><li><strong>display：none</strong> 指的是元素完全不陈列出来，不占据空间，涉及到了DOM结构，故产生reflow与repaint。</li><li><strong>visibility：hidden</strong> 指的是元素不可见但存在，保留空间，不影响结构，故只产生repaint。</li></ul><blockquote>减少性能影响的办法</blockquote><ul><li><strong>避免逐项更改样式</strong>。若通过设置style属性改变结点样式，每设置一次都会导致一次reflow，所以最好通过设置class的方式，一次性更改style属性。</li><li><strong>避免循环操作DOM</strong>。创建一个documentFragment或div，在它上面应用所有DOM操作，最后再把它添加到window.document。<ul><li>也可以在一个display:none的元素上进行操作，最终把它显示出来。因为display:none上的DOM操作不会引发回流和重绘。</li></ul></li><li><strong>避免多次读取offsetLeft等属性</strong>。无法避免则将它们缓存到变量。</li><li><strong>将具有复杂动画的元素设置绝对定位或固定定位</strong>，使它脱离文档流，否则会引起父元素及后续元素大量的回流。<ul><li>如果功能需求上不能设置position为fixed或absolute，那么就要权衡速度的平滑性（使用CSS3的transition）。</li></ul></li></ul><h6 id="3-合理使用Viewport等meta头部"><a href="#3-合理使用Viewport等meta头部" class="headerlink" title="3. 合理使用Viewport等meta头部"></a>3. 合理使用Viewport等meta头部</h6><h6 id="4-减少DOM节点"><a href="#4-减少DOM节点" class="headerlink" title="4. 减少DOM节点"></a>4. 减少DOM节点</h6><ul><li>网页中元素过多对网页的加载和脚本的执行都是沉重的负担，500个元素和5000个元素在加载速度上会有很大差别。</li></ul><h6 id="5-BigPipe"><a href="#5-BigPipe" class="headerlink" title="5. BigPipe"></a>5. BigPipe</h6><ul><li>BigPipe目标：前后端分离，提高页面渲染速度。</li></ul><h6 id="6-CSS性能优化"><a href="#6-CSS性能优化" class="headerlink" title="6. CSS性能优化"></a>6. CSS性能优化</h6><ul><li>慎重使用高性能属性：浮动、定位。</li><li>避免使用CSS表达式。<ul><li>CSS表达式是动态设置CSS属性的一种强大并且危险的方式，它受到了IE5以及之后版本、IE8之前版本的支持。应该避免使用CSS表达式。</li></ul></li><li>CSS的精简。<ul><li>移除CSS中的空白和注释。</li><li>移除空的css规则：｛｝；</li></ul></li><li>合并相同的类；移除不使用的类。</li><li>尽量减少页面重排、重绘。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/*重排*/</span><br><span class="line">/*按照css的书写顺序：*/</span><br><span class="line">位置：position、top、left、z-index、<span class="built_in">float</span>、display   </span><br><span class="line">大小：width、height、margin、padding   </span><br><span class="line">文字系列： font、line-height、color、letter-spacing   </span><br><span class="line">背景边框：background、 border   </span><br><span class="line">其它：animation、transition   </span><br><span class="line">/*重绘:*/</span><br><span class="line">border、outline、background、box-shadow</span><br><span class="line">能使用background-color,尽量不要使用background;</span><br></pre></td></tr></table></figure><ul><li>标准化各种浏览器前缀：带浏览器前缀的在前，标准属性在后。</li><li>不使用@import前缀，它会影响css的加载速度。</li><li>充分利用css继承属性，减少代码量。<ul><li>常见的可以继承的属性比如： color，font-size，font-family等。</li><li>不可继承的比如： position，display，float等。</li></ul></li><li>使用CSS缩写，减少代码量。<ul><li>颜色#ffffff使用缩写#fff</li><li>属性值为0时，不加单位（使用0代替0px等）。</li></ul></li><li>避免使用 CSS Filter（CSS滤镜）。</li><li>减少查询层级：如.header .logo 优于 .header .top .logo。</li><li>减少查询范围：如.header&gt;li 优于 .header li。</li></ul><h5 id="脚本执行阶段"><a href="#脚本执行阶段" class="headerlink" title="脚本执行阶段"></a>脚本执行阶段</h5><h6 id="1-缓存节点，尽量减少节点的查找"><a href="#1-缓存节点，尽量减少节点的查找" class="headerlink" title="1. 缓存节点，尽量减少节点的查找"></a>1. 缓存节点，尽量减少节点的查找</h6><ul><li>减少对DOM元素的查询和修改，查询时可将其赋值给局部变量。<ul><li>如a.b.c.d这种查找方式非常耗性能，尽可能把它定义在变量里。</li></ul></li></ul><h6 id="2-减少节点的操作（innerHTML）"><a href="#2-减少节点的操作（innerHTML）" class="headerlink" title="2. 减少节点的操作（innerHTML）"></a>2. 减少节点的操作（innerHTML）</h6><ul><li>修改和访问DOM元素会造成页面的Repaint和Reflow，更不允许循环对DOM操作。所以应合理的使用JavaScript变量储存内容，考虑大量DOM元素中循环的性能开销，在循环结束时一次性写入。</li></ul><h6 id="3-避免无谓的循环，break、continue、return的适当使用"><a href="#3-避免无谓的循环，break、continue、return的适当使用" class="headerlink" title="3. 避免无谓的循环，break、continue、return的适当使用"></a>3. 避免无谓的循环，break、continue、return的适当使用</h6><h6 id="4-事件委托（事件代理）"><a href="#4-事件委托（事件代理）" class="headerlink" title="4. 事件委托（事件代理）"></a>4. 事件委托（事件代理）</h6><ul><li>在JavaScript中，添加到页面上的事件处理程序数量将直接关系到页面的整体运行性能，因为需要不断的与DOM节点进行交互，访问DOM的次数越多，引起浏览器重绘与重排的次数也就越多，就会延长整个页面的交互就绪时间，<strong>性能优化的主要思想之一就是减少DOM操作</strong>。</li><li>如果使用<strong>事件委托</strong>，就会将所有的操作放到js程序里面，与DOM的操作就只需要交互一次，这样就能大大的减少与DOM的交互次数，提高性能。</li></ul><h6 id="5-不使用EVAL"><a href="#5-不使用EVAL" class="headerlink" title="5. 不使用EVAL"></a>5. 不使用EVAL</h6><ul><li>eval函数会运行编译器，影响性能。</li></ul><h6 id="6-最小化JavaScript代码"><a href="#6-最小化JavaScript代码" class="headerlink" title="6. 最小化JavaScript代码"></a>6. 最小化JavaScript代码</h6><ul><li>删除重复的脚本文件。</li><li>精简JavaScript代码。</li></ul><h6 id="7-使用JSON格式来进行数据交换"><a href="#7-使用JSON格式来进行数据交换" class="headerlink" title="7. 使用JSON格式来进行数据交换"></a>7. 使用JSON格式来进行数据交换</h6><ul><li>JSON转JS对象：<code>JSON.parse(str); //str为变量，即json字符串</code></li><li>JS对象转JSON：<code>JSON.stringify(obj);//obj为js对象，转为JSON字符串</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基本内容&quot;&gt;&lt;a href=&quot;#基本内容&quot; class=&quot;headerlink&quot; title=&quot;基本内容&quot;&gt;&lt;/a&gt;基本内容&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;前端性能优化&lt;/strong&gt;是指从用户访问资源到资源完整的展现在用户面前的过程中，通过技术手段和优化策略，缩短每个步骤的处理时间从而&lt;strong&gt;提升整个资源的访问和呈现速度&lt;/strong&gt;。&lt;ul&gt;
&lt;li&gt;在构建web站点的过程中，任何一个细节都有可能影响网站的访问速度，如果不了解性能优化知识，很多不利网站访问速度的因素会形成累加，从而严重影响网站的性能，导致网站访问速度变慢，用户体验低下，最终导致用户流失。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能黄金法则&lt;/strong&gt;：只有10%~20%的最终用户响应时间是用在从Web服务器获取HTML文档并传送到浏览器的，其余的80%~90%时间花在下载页面中的所有组件上。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>前端工程与搜索引擎优化（SEO）</title>
    <link href="https://chongtianhong.github.io/2018/02/16/seo/"/>
    <id>https://chongtianhong.github.io/2018/02/16/seo/</id>
    <published>2018-02-16T03:20:22.000Z</published>
    <updated>2018-02-16T16:02:42.873Z</updated>
    
    <content type="html"><![CDATA[<h4 id="搜索引擎工作原理"><a href="#搜索引擎工作原理" class="headerlink" title="搜索引擎工作原理"></a>搜索引擎工作原理</h4><blockquote>当我们在输入框中输入关键词，点击搜索或查询时，然后得到结果。深究其背后的故事，搜索引擎做了很多事情。</blockquote><ul><li>搜索引擎网站，比如百度，其后台有一个非常庞大的数据库，里面存储了海量的关键词，而每个关键词又对应着很多网址，这些网址都是由<strong>百度程序（爬虫）</strong>从互联网上下载收集而来的。<strong>网络爬虫</strong>每天在互联网上爬行，从一个链接到另一个链接，下载其中的内容，进行分析提炼，找到其中的关键词，如果爬虫认为该关键词<strong>在数据库中没有</strong>而<strong>对用户是有用的便存入数据库</strong>。反之，如果爬虫认为是<strong>垃圾信息或重复信息</strong>，就<strong>舍弃不要</strong>，继续爬行，寻找最新的、有用的信息保存起来提供用户搜索。当用户搜索时，就能检索出<strong>与关键字相关的网址</strong>显示给访客。<a id="more"></a></li><li>由于一个关键字会对应多个网站，因此就出现了排序的问题，而<strong>与关键词越吻合</strong>的网址就会<strong>越靠前</strong>。</li><li>在爬虫抓取网页内容，提炼关键词的过程中，存在一个<strong>爬虫是否能读懂</strong>的问题。如果网站是Flash和JS生成的，则爬虫无法读懂网页，即使关键字再贴切也没法将网页存入数据库。相应的，如果网站内容是它的语言，那么爬虫便能看懂，它的语言即<strong>搜索引擎优化</strong>（Search Engine Optimization，简称SEO）。</li></ul><h4 id="SEO简介"><a href="#SEO简介" class="headerlink" title="SEO简介"></a>SEO简介</h4><ul><li>搜索引擎优化（Search Engine Optimization，简称SEO）是一种利用搜索引擎的搜索规则来<strong>提高目的网站</strong>在有关搜索引擎内的<strong>排名</strong>的方式。</li><li>SEO存在的意义：为了提升网页在搜索引擎自然搜索结果中的收录数量以及排序位置而做的优化行为。</li><li>SEO可以分为<strong>白帽SEO</strong>和<strong>黑帽SEO</strong>。<ul><li>白帽SEO，旨在保持良好的互联网秩序，起到了改良和规范网站设计的作用，使网站对搜索引擎和用户更加友好，并且网站也能从搜索引擎中获取合理的流量，这是<strong>搜索引擎鼓励和支持的</strong>。</li><li>黑帽SEO，利用和放大搜索引擎政策缺陷来获取更多用户的访问量，这类行为大多是欺骗搜索引擎，一般<strong>搜索引擎公司是不支持与鼓励的</strong>。</li></ul></li></ul><blockquote>针对白帽SEO，可以做什么？</blockquote><ol><li>对网站的<strong>标题（title）</strong>、<strong>关键字（keywords）</strong>、<strong>描述(description)</strong>精心设置，反映网站的定位，让搜索引擎明白网站是做什么的；</li><li>网站内容优化：内容与关键字的对应，增加关键字的密度，设置<strong>长尾关键字</strong>；<ul><li>长尾关键词(Long Tail Keyword)是指网站上非目标关键词但也可以带来搜索流量的关键词。例如，目标关键词是服装，其长尾关键词可以是男士服装、冬装、户外运动装等。长尾关键词基本属性是：可延伸性，针对性强，范围广。</li></ul></li><li>在网站上合理设置<strong>Robot.txt文件</strong>；<ul><li>网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取。百度官方建议，仅当您的网站包含不希望被搜索引擎收录的内容时，才需要使用robots.txt文件。如果您希望搜索引擎收录网站上所有内容，请勿建立robots.txt文件。</li></ul></li><li>生成针对搜索引擎友好的网站地图；</li><li>增加外部链接，到各个网站上宣传。</li></ol><h4 id="前端SEO"><a href="#前端SEO" class="headerlink" title="前端SEO"></a>前端SEO</h4><ul><li>通过<strong>网站结构布局优化</strong>和<strong>网页代码优化</strong>，使前端页面既能让浏览器用户能够看懂，也能让爬虫看懂。</li></ul><h5 id="网站结构布局优化"><a href="#网站结构布局优化" class="headerlink" title="网站结构布局优化"></a>网站结构布局优化</h5><ul><li>合理优化站点结构，我们要让爬虫看懂我们的网站，就不能设置太复杂的结构。使用<strong>扁平化结构</strong>，建立的<strong>网站目录层次越少越容易被收入</strong>。一般的<strong>中小型网站</strong>目录层次结构不要超过三层。</li></ul><blockquote>如何做到扁平化结构</blockquote><ol><li>控制首页链接数量<ul><li>网站首页是权重最高的地方，如果首页链接太少，没有“桥”，爬虫则无法继续往下爬到内页，直接影响网站收录数量。但是首页链接也不能太多，一旦太多，没有实质性的链接，很容易影响用户体验，也会降低网站首页的权重，收录效果也不好。</li><li>因此对于<strong>中小型企业网站</strong>，建议首页链接在100个以内，链接的性质可以包含页面导航、底部导航、锚文字链接等等，注意链接要<strong>建立在用户的良好体验</strong>和<strong>引导用户获取信息</strong>的基础之上。</li></ul></li><li><strong>扁平化的目录层次</strong>，尽量让搜索引擎程序跳转3次就能到达网站内的任何一个内页。<ul><li>扁平化的目录结构，比如：“植物”–&gt; “水果” –&gt; “苹果”、“桔子”、“香蕉”，通过3级就能找到香蕉了。</li></ul></li><li>导航优化<ul><li>从搜索引擎优化角度来看，导航设计最好用文字。但为了用户体验，有时也可以搭配图片导航，但是图片代码一定要进行优化，<code>&lt;img&gt;</code>标签必须添加“alt”和“title”属性，告诉搜索引擎导航的定位，即使图片未能正常显示时，用户也能看到提示文字。</li><li>其次，在每一个网页上应该加上面包屑导航，这样做的好处是：<ul><li>从用户体验方面来说，可以让用户了解当前所处的位置以及当前页面在整个网站中的位置，帮助用户很快了解网站组织形式，从而形成更好的位置感，同时提供了返回各个页面的接口，方便用户操作；</li><li>从SEO方面来说，能够让网络爬虫清楚的了解网站结构，同时还增加了大量的内部链接，方便抓取，降低跳出率。</li></ul></li></ul></li><li>网站的结构布局（<strong>不可忽略的细节</strong>）<ul><li>页面头部：logo及主导航，以及用户的信息。</li><li>页面主体：左边正文，包括面包屑导航及正文；右边放热门文章及相关文章，好处：<ul><li>留住访客，让访客多停留；</li><li>对“蜘蛛”而言，这些文章属于相关链接，增强了页面相关性，也能增强页面的权重。</li></ul></li><li>页面底部：版权信息和友情链接。</li></ul></li><li>分页处理<ul><li>栏目内有多条记录时，我们会进行分页处理。</li><li>分页导航推荐写法：“首页 1 2 3 4 5 6 7 8 9 下拉框”，这样“蜘蛛”能够根据相应页码直接跳转，下拉框直接选择页面跳转。</li><li>而不推荐，“首页 下一页 尾页”这种写法，特别是当分页数量特别多时，“蜘蛛”需要经过很多次往下爬，才能抓取，会很累、会容易放弃。</li></ul></li><li>控制页面的大小，减少http请求，提高网站的加载速度。<ul><li>一个页面最好不要超过100k，页面太大，加载速度慢。当速度很慢时，用户体验不好，留不住访客，并且一旦超时，网络爬虫也会离开。</li></ul></li></ol><h5 id="网页代码优化"><a href="#网页代码优化" class="headerlink" title="网页代码优化"></a>网页代码优化</h5><ol><li><code>&lt;title&gt;</code>标题：<ul><li>标题要强调重点，尽量把重要的关键词放在前面，关键词不要重复出现，尽量做到每个页面的<code>&lt;title&gt;</code>不要设置相同的内容。</li></ul></li><li><code>&lt;meta keywords&gt;</code>关键词标签：<ul><li>列举出几个重要关键字即可，不要过分堆砌。</li></ul></li><li><code>&lt;meta description&gt;</code>网页描述标签：<ul><li>需要高度概括网页内容，切记不能太长，不要过分堆砌关键词，每个页面的描述也要有所不同。</li></ul></li><li>对于<code>&lt;body&gt;</code>中的标签，要遵循<strong>代码语义化</strong><ul><li>在适当的位置使用适当的标签，用正确的标签做正确的事。让阅读源码者和爬虫都一目了然。比如：h1-h6 是用于标题类的，<code>&lt;nav&gt;</code>标签是用来设置页面主导航的，<code>&lt;span&gt;</code>标签是html里面最没有语义的等。</li></ul></li><li><code>&lt;a&gt;</code>链接标签：<ul><li>对于页内链接，要加 “title” 属性加以说明，让访客和网络爬虫知道。</li><li>对于外部链接，链接到其他网站的，则需要加上rel=”nofollow” 属性, 告诉爬虫不要爬取该链接，因为一旦爬虫爬了外部链接之后，就不会再回来了。</li></ul></li><li><code>&lt;h1&gt;</code>标题标签：<ul><li>正文标题要用<code>&lt;h1&gt;</code>标签：因为爬虫认为它最重要，若不喜欢<code>&lt;h1&gt;</code>的默认样式可以通过CSS设置。</li><li>尽量做到正文标题用<code>&lt;h1&gt;</code>标签，副标题用<code>&lt;h2&gt;</code>标签, 而其它不重要的地方不应该随便乱用<code>&lt;h&gt;</code>标题标签。</li></ul></li><li><p><code>&lt;p&gt;</code>标签与<code>&lt;br&gt;</code>标签：</p><ul><li>爬虫读到<code>&lt;p&gt;</code>标签就知道这是一个段落，而对于<code>&lt;br&gt;</code>标签，默认该标签只用于文本内的换行，例如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">　　 第一行文字内容&lt;br/&gt;</span><br><span class="line">    第二行文字内容&lt;br/&gt;</span><br><span class="line">    第三行文字内容</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>表格应该使用<code>&lt;caption&gt;</code>标签。</p></li><li><code>&lt;img&gt;</code>应使用”alt”属性加以说明，因为爬虫对图片的读取有限。</li><li><code>&lt;strong&gt;</code><code>&lt;em&gt;</code>与<code>&lt;b&gt;</code><code>&lt;i&gt;</code>标签:<ul><li><code>&lt;strong&gt;</code>、<code>&lt;em&gt;</code>标签是在需要强调时使用。</li><li><code>&lt;strong&gt;</code>标签在搜索引擎中能够得到高度的重视（权重NO.1），它能突出关键词，表现重要的内容。</li><li><code>&lt;em&gt;</code>标签强调效果仅次于<code>&lt;strong&gt;</code>标签。</li><li><code>&lt;b&gt;</code>、<code>&lt;i&gt;</code>标签：只是用于显示效果时使用，在SEO中不会起任何效果。</li></ul></li><li>文本缩进不要使用特殊符号<code>&amp;nbsp；</code>，应当使用CSS进行设置（text-indent）。版权符号不要使用特殊符号<code>&amp;copy；</code>可以直接使用输入法，拼“banquan”，选择序号5就能打出版权符号©。</li><li>巧妙利用CSS布局，将重要内容的HTML代码放在最前面，爬虫是从上到下进行内容关键词抓取，最前面的内容被认为是最重要的。</li><li>重要内容不要用JS输出，因为爬虫不认识。</li><li>尽量少使用iframe框架,因为爬虫一般不会读取其中的内容。</li><li>谨慎使用<code>display: none</code>，对于不想显示的文字内容，应当<strong>设置z-index</strong> 或 <strong>设置到浏览器显示器之外</strong>。因为搜索引擎会过滤掉<code>display:none</code>其中的内容。</li><li>不断精简代码，能用一个标签完成的就不要用两个。</li><li>JS代码如果是操作DOM操作，应尽量放在<code>&lt;/body&gt;</code>之前，html代码之后；JS 调用应该尽量放到网页底部。<ul><li>因为浏览器渲染HTML文件是从上往下渲染的，即先执行head标签里面的内容，再执行body标签里的，一行行渲染下去。无论当前JS代码是内嵌还是在外链文件中，页面的下载和渲染都必须停下来等待脚本执行完成。JS执行过程耗时越久，浏览器等待相应用户输入的时间就越长，所以JS尽量放底部可以有一定的性能优化效果。</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;搜索引擎工作原理&quot;&gt;&lt;a href=&quot;#搜索引擎工作原理&quot; class=&quot;headerlink&quot; title=&quot;搜索引擎工作原理&quot;&gt;&lt;/a&gt;搜索引擎工作原理&lt;/h4&gt;&lt;blockquote&gt;当我们在输入框中输入关键词，点击搜索或查询时，然后得到结果。深究其背后的故事，搜索引擎做了很多事情。&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;搜索引擎网站，比如百度，其后台有一个非常庞大的数据库，里面存储了海量的关键词，而每个关键词又对应着很多网址，这些网址都是由&lt;strong&gt;百度程序（爬虫）&lt;/strong&gt;从互联网上下载收集而来的。&lt;strong&gt;网络爬虫&lt;/strong&gt;每天在互联网上爬行，从一个链接到另一个链接，下载其中的内容，进行分析提炼，找到其中的关键词，如果爬虫认为该关键词&lt;strong&gt;在数据库中没有&lt;/strong&gt;而&lt;strong&gt;对用户是有用的便存入数据库&lt;/strong&gt;。反之，如果爬虫认为是&lt;strong&gt;垃圾信息或重复信息&lt;/strong&gt;，就&lt;strong&gt;舍弃不要&lt;/strong&gt;，继续爬行，寻找最新的、有用的信息保存起来提供用户搜索。当用户搜索时，就能检索出&lt;strong&gt;与关键字相关的网址&lt;/strong&gt;显示给访客。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>静态网页与动态网页的理解</title>
    <link href="https://chongtianhong.github.io/2018/02/15/static/"/>
    <id>https://chongtianhong.github.io/2018/02/15/static/</id>
    <published>2018-02-14T16:04:29.000Z</published>
    <updated>2018-02-14T18:09:36.324Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>浏览器从服务器得到的超文本标记文档的后缀通常分为两大类：<ul><li>静态页面：htm、html、shtml、xml</li><li>动态页面：asp、jsp、php、perl、cgi</li></ul></li><li>静态网页和动态网页有着相同的使命，二者的共同之处在于：<ul><li>首先，它们的目标都是呈现内容给用户</li><li>其次，内容都是用超文本标记语言（HTML）表示的<a id="more"></a></li></ul></li><li>静态网页中的内容是固定写在html文件中的，只需要使用单纯的html语言就可写出一个静态页面。它基本不需要与数据库和后端语言（如java,python,ruby等）的支持；</li><li>动态网页则不同，它的完整页面大体上可以认为是分为两个部分，即<strong>视图模板</strong>和<strong>数据</strong>，<strong>数据</strong>是从后端获得（如从数据库中），然后插入到<strong>视图模板</strong>中。</li></ul><h3 id="静态网页"><a href="#静态网页" class="headerlink" title="静态网页"></a>静态网页</h3><ul><li>静态网页是指存放在服务器文件系统中实实在在的HTML文件。当用户在浏览器中输入页面的URL，然后回车，浏览器就会将对应的html文件下载、渲染并呈现在窗口中。早期的网站通常都是由静态页面制作的。</li><li>通常，使用HTML或XML即可完成静态页面的制作。</li><li>静态网页<strong>一经制成，内容就不会变化</strong>，不管何人何时访问，显示的内容都是一样的。</li><li>如果要修改网页的内容，就必须修改其源代码，然后重新上传到服务器上。</li></ul><h4 id="静态网页的工作原理"><a href="#静态网页的工作原理" class="headerlink" title="静态网页的工作原理"></a>静态网页的工作原理</h4><ul><li>静态网页的工作流程可以分为以下4个步骤：<br>  ① 编写一个静态文件，并在web服务器上发布；<br>  ② 用户在浏览器的地址栏中输入该静态网页的URL并按回车键，浏览器发送访问请求到web服务器；<br>  ③ web服务器找到此静态文件的位置，并将它转换为<strong>HTML流</strong>传到用户的浏览器；<br>  ④ 浏览器收到<strong>HTML流</strong>后，显示此网页的内容。</li><li>在步骤② - ④中，静态网页的内容不会发生任何变化。</li></ul><h3 id="动态网页"><a href="#动态网页" class="headerlink" title="动态网页"></a>动态网页</h3><ul><li>动态网页是指在网页文件中除了HTML标记以外，还包括一些实现特定功能的程序代码，这些程序代码使得浏览器与服务器之间可以进行交互，即<strong>服务端可以根据客户端的不同请求动态产生网页内容</strong>。</li><li>动态网页是相对于静态网页而言的。当浏览器请求服务器的某个页面时，服务器根据当前时间、环境参数、数据库操作等动态的生成HTML页面，然后再发送给浏览器（后面的处理跟静态网页一样）。</li><li>动态网页中的“动态”是指服务器端页面的动态生成，相反，“静态”则指页面是实实在在的、独立的文件。</li><li>动态网页的后缀名通常取决于所用的程序设计语言，一般为.asp、.aspx、.cgi、.psp、.perl、.jsp等。</li><li>动态网页可以<strong>根据</strong> <em>不同的时间</em>、<em>不同的浏览器</em> 显示 <em>不同的信息</em>，比如常见的留言板、论坛、聊天室都是用动态网页实现的。</li><li>动态网页相对复杂，不能直接双击打开。</li></ul><h4 id="动态网页的工作原理"><a href="#动态网页的工作原理" class="headerlink" title="动态网页的工作原理"></a>动态网页的工作原理</h4><ul><li>动态网页的工作流程分为以下4个步骤：<br>  ① 编写动态网页文件，其中包括程序代码，并在web服务器上发布；<br>  ② 用户在浏览器的地址栏中输入该动态网页的URL并按回车键，浏览器发送访问请求到web服务器；<br>  ③ web服务器找到此动态网页的位置，并根据其中的程序代码<strong>动态建立HTML流</strong>传到用户的浏览器；<br>  ④ 浏览器收到<strong>HTML流</strong>后，显示此网页的内容。</li><li>从整个工作流程可以看出，用户浏览动态页面时，需要在服务器上<strong>动态执行</strong>该网页文件，将含有程序代码的<strong>动态网页转化为标准的静态页面</strong>，最后把静态页面发送给用户。</li></ul><h4 id="动态网页的开发技术"><a href="#动态网页的开发技术" class="headerlink" title="动态网页的开发技术"></a>动态网页的开发技术</h4><ul><li>动态网页的生成技术有多中，常见的有：<ul><li>HTML+JavaScript(Node.js)</li><li>HTML+PHP</li><li>HTML+ASP.NET(或ASP)</li><li>HTML+JSP</li><li>HTML+CGI(早期的动态网页技术)</li></ul></li></ul><h4 id="动态网页的特征"><a href="#动态网页的特征" class="headerlink" title="动态网页的特征"></a>动态网页的特征</h4><ul><li>动态网页一般以<strong>数据库</strong>技术为基础，可以大大降低网站维护的工作量；</li><li>采用动态网页技术的网站可以实现更多的功能，如用户注册、用户登录、在线调查、用户管理、订单管理等等；</li><li>动态网页实际上并不是独立存在于服务器上的网页文件，只有当用户请求时服务器才返回一个完整的网页；</li><li>动态网页地址中的“?”对<strong>搜索引擎检索</strong>存在一定的问题，搜索引擎一般不可能从一个网站的数据库中访问全部网页，或者出于技术方面的考虑，搜索爬虫不去抓取网址中“?”后面的内容，因此采用动态网页的网站在进行搜索引擎推广时<strong>需要做一定的技术处理</strong>才能适应搜索引擎的要求。</li></ul><h4 id="动态网页的好处"><a href="#动态网页的好处" class="headerlink" title="动态网页的好处"></a>动态网页的好处</h4><ul><li>维护方便，能实现人们需要的各种需求。</li><li>查询信息方便，能存储大量数据，需要时能立即查询。</li></ul><h4 id="动态网页的不足"><a href="#动态网页的不足" class="headerlink" title="动态网页的不足"></a>动态网页的不足</h4><ul><li>动态网站用到数据库，所以对数据库的安全和保密性要求较高，要专业技术人员提供维护才能保证网站的安全。</li><li>动态网站不利于搜索引擎收录。</li><li>动态网站制作成本较高。</li></ul><h3 id="和谐统一"><a href="#和谐统一" class="headerlink" title="和谐统一"></a>和谐统一</h3><ul><li>静态网页和动态网页各有特点，网站采用动态网页还是静态网页主要取决于网站的功能需求和网站内容的多少，如果网站功能比较简单，内容更新量不是很大，采用纯静态网页的方式会更简单，反之一般要采用动态网页技术来实现。</li><li>静态网页是网站建设的基础，静态网页和动态网页之间也并不矛盾，为了网站适应搜索引擎检索的需要，即使采用动态网站技术，也可以将网页内容转化为静态网页发布。</li><li>动态网站也可以采用静动结合的原则，适合采用动态网页的地方用动态网页，如果必要使用静态网页，则可以考虑用静态网页的方法来实现，在同一个网站上，动态网页内容和静态网页内容同时存在也是很常见的事情。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;浏览器从服务器得到的超文本标记文档的后缀通常分为两大类：&lt;ul&gt;
&lt;li&gt;静态页面：htm、html、shtml、xml&lt;/li&gt;
&lt;li&gt;动态页面：asp、jsp、php、perl、cgi&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;静态网页和动态网页有着相同的使命，二者的共同之处在于：&lt;ul&gt;
&lt;li&gt;首先，它们的目标都是呈现内容给用户&lt;/li&gt;
&lt;li&gt;其次，内容都是用超文本标记语言（HTML）表示的
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的this引用</title>
    <link href="https://chongtianhong.github.io/2018/02/14/this/"/>
    <id>https://chongtianhong.github.io/2018/02/14/this/</id>
    <published>2018-02-14T11:48:39.000Z</published>
    <updated>2018-02-14T15:47:52.600Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>JavaScript函数有4种调用模式，分别是：函数直接执行模式、对象方法的调用模式、构造器的调用模式和call和apply调用模式。</li><li>函数调用每种方式的不同在于this值的初始化。</li><li>一般而言，在JavaScript中，this指向函数执行时的当前对象。</li><li>this是保留关键字，不能修改this的值。<a id="more"></a></li></ul><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><ul><li>this是函数内部的一个特殊对象（或this引用）–它引用的是函数据以执行的环境对象。</li><li>this是JavaScript的一个关键字，随着函数使用场合不同，this的值会发生变化。但总有一个原则，即this指的是<strong>调用当前函数的对象</strong>。<ul><li>JavaScript是动态语言，this关键字在执行的时候才能确定其值。</li><li>this永远指向调用者，即对“调用对象”的引用。简单点说，this指向调用当前函数的所属对象。</li><li>根据函数调用方式的不同，this可以指向全局对象，当前对象，或其他任意对象。</li></ul></li><li>this对象（引用）的使用情况可总结为：<ul><li>全局函数调用</li><li>构造函数调用</li><li>对象方法的调用</li><li>通过apply或call方法调用</li><li>原型链中的this</li><li>闭包中的this</li><li>内嵌在HTML元素中的脚本段</li></ul></li></ul><h5 id="全局函数调用"><a href="#全局函数调用" class="headerlink" title="全局函数调用"></a>全局函数调用</h5><ul><li>全局函数中的this会指向全局对象window。（函数调用模式）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var message = <span class="string">"this in window"</span>; //这一句写在函数外面和里面是一样效果</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span>(this == window)&#123;</span><br><span class="line">        alert(<span class="string">"this == window"</span>); </span><br><span class="line">        alert(message);</span><br><span class="line">        this.methodA = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">            alert(<span class="string">"I'm a function"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">func(); //如果不调用func方法，则里面定义的属性或方法会取不到 </span><br><span class="line">methodA();</span><br></pre></td></tr></table></figure><h5 id="构造函数调用"><a href="#构造函数调用" class="headerlink" title="构造函数调用"></a>构造函数调用</h5><ul><li>使用new的方式实例化一个对象，this会指向通过构造函数生成的对象。（构造器调用模式）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Func</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (this == window) &#123;</span><br><span class="line">        alert(<span class="string">"this == window"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">"this != window"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    this.fieldA = <span class="string">"I'm a field"</span>;</span><br><span class="line">    alert(this);</span><br><span class="line">&#125;</span><br><span class="line">var obj = new Func();</span><br><span class="line">alert(obj.fieldA); //this指向的是对象obj</span><br></pre></td></tr></table></figure><h5 id="对象方法的调用"><a href="#对象方法的调用" class="headerlink" title="对象方法的调用"></a>对象方法的调用</h5><ul><li>对象方法的调用，this指向当前对象。任何函数，只要该函数被当做一个对象的方法使用或赋值时，该函数内部的this都是对该对象本身的引用。也可理解为this写在一个普通对象中，this指向的就是对象本身。（方法调用模式）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    x: 3,</span><br><span class="line">    doit: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="keyword">if</span>(this == window)&#123;</span><br><span class="line">            alert(<span class="string">"this == window"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            alert(<span class="string">"method is called: "</span> + this.x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.doit(); //this指向的是对象obj</span><br></pre></td></tr></table></figure><h5 id="对象方法的调用-1"><a href="#对象方法的调用-1" class="headerlink" title="对象方法的调用"></a>对象方法的调用</h5><ul><li>通过apply或call方法改变this的指向，this指向传入的对象。</li><li>apply或call方法可以用来代替另一个对象调用一个方法。</li><li>apply或call方法可将一个函数的对象上下文从初始的上下文改变为由thisObj指定的新对象。</li><li>如果没有提供thisObj参数，那么全局对象被用作 thisObj。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    x: 3,</span><br><span class="line">    doit: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        alert(<span class="string">"method is called: "</span> + this.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var obj2 = &#123;x: 4&#125;;</span><br><span class="line">obj.doit(); //3,this指向obj</span><br><span class="line">obj.doit.apply(obj2); //4,this指向obj2</span><br><span class="line">obj.doit.call(obj2); //4,this指向obj2</span><br></pre></td></tr></table></figure><h5 id="原型链中的this"><a href="#原型链中的this" class="headerlink" title="原型链中的this"></a>原型链中的this</h5><ul><li>原型对象及构造函数中的this指向新创建的实例对象。</li><li>使用prototype扩展方法可以使用this获取到源对象的实例，<strong>私有字段</strong>无法通过原型链获取。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Func</span></span>() &#123;</span><br><span class="line">    this.fieldA = <span class="string">"I'm a field"</span>;</span><br><span class="line">    var privateFieldA = <span class="string">"I'm a var"</span>;//私有属性</span><br><span class="line">&#125;</span><br><span class="line">Func.prototype = &#123;//prototype扩展方法可以获取到Func对象的实例</span><br><span class="line">    ExtendMethod: <span class="keyword">function</span>(str) &#123;</span><br><span class="line">        alert(str + <span class="string">" :"</span> + this.fieldA);</span><br><span class="line">        alert(privateFieldA); //出错,私有字段无法通过原型链获取。</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var obj = new Func();</span><br><span class="line">obj.ExtendMethod(<span class="string">"From prototype"</span>); //此时构造函数及原型链中的this指向对象obj</span><br></pre></td></tr></table></figure><h5 id="闭包中的this"><a href="#闭包中的this" class="headerlink" title="闭包中的this"></a>闭包中的this</h5><ul><li>闭包：写在function中的function，this指向全局对象window。</li></ul><blockquote>对象中的闭包</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var name = <span class="string">"The window"</span>;</span><br><span class="line">var obj = &#123;</span><br><span class="line">    name: <span class="string">"My Object"</span>,</span><br><span class="line">    getNameFunc: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">            <span class="built_in">return</span> this.name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">alert(obj.getNameFunc()()); //The window</span><br></pre></td></tr></table></figure><p>可见，闭包中的this指向全局对象window，只能取到全局对象的属性。若要访问对象内部的属性（外部函数的变量），则要把外部函数的this对象保存为一个闭包能访问的变量(that)。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var name = <span class="string">"The window"</span>;</span><br><span class="line">var obj = &#123;</span><br><span class="line">    name: <span class="string">"My Object"</span>,</span><br><span class="line">    getNameFunc: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        var that = this;</span><br><span class="line">        <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">            <span class="built_in">return</span> that.name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">alert(obj.getNameFunc()()); //My object</span><br></pre></td></tr></table></figure></p><ul><li>不管是直接引用function，还是实例化一个function，其返回的闭包函数里的this都是指向window。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">a</span></span>() &#123;</span><br><span class="line">    alert(this == window);</span><br><span class="line">    var that = this;</span><br><span class="line">    var func = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        alert(this == window);</span><br><span class="line">        alert(that);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">return</span> func;</span><br><span class="line">&#125;</span><br><span class="line">var b = a();</span><br><span class="line">b(); //<span class="literal">true</span>, <span class="literal">true</span>, [object Window]</span><br><span class="line">var c = new a();</span><br><span class="line">c(); //<span class="literal">false</span>, <span class="literal">true</span>, [object object]</span><br></pre></td></tr></table></figure><h5 id="内嵌在HTML元素中的脚本段"><a href="#内嵌在HTML元素中的脚本段" class="headerlink" title="内嵌在HTML元素中的脚本段"></a>内嵌在HTML元素中的脚本段</h5><ul><li>内嵌在HTML元素中的脚本段，this指向元素本身。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div onclick=<span class="string">"test(this)"</span> id=<span class="string">"div"</span>&gt;Click Me&lt;/div&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="built_in">test</span>(obj) &#123;</span><br><span class="line">    alert(obj); //[object HTMLDivElement]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="js函数的四种调用方式"><a href="#js函数的四种调用方式" class="headerlink" title="js函数的四种调用方式"></a>js函数的四种调用方式</h4><h5 id="函数直接执行模式"><a href="#函数直接执行模式" class="headerlink" title="函数直接执行模式"></a>函数直接执行模式</h5><ul><li>此时this是全局的,即this指向window。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var c=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    alert(this==window)</span><br><span class="line">&#125;</span><br><span class="line">c()//<span class="literal">true</span></span><br></pre></td></tr></table></figure><h5 id="对象方法的调用模式"><a href="#对象方法的调用模式" class="headerlink" title="对象方法的调用模式"></a>对象方法的调用模式</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var myObj=&#123;</span><br><span class="line">    value:2,</span><br><span class="line">    inc:<span class="keyword">function</span>(num)&#123;</span><br><span class="line">        alert(this.value+num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">myobject.inc(1); //结果3，因为this指向myObj</span><br></pre></td></tr></table></figure><ul><li>注意：内部匿名函数不属于当前对象的函数，因此this指向了全局对象window。</li></ul><h5 id="构造函数调用模式"><a href="#构造函数调用模式" class="headerlink" title="构造函数调用模式"></a>构造函数调用模式</h5><ul><li>用new关键字来新建一个函数对象的调用,this指向被绑定到构造函数的实例上。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ar fn = <span class="keyword">function</span> (status)&#123;</span><br><span class="line">    this.status = status;</span><br><span class="line">&#125;</span><br><span class="line">fn.prototype.get_status = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> this.status;</span><br><span class="line">&#125;</span><br><span class="line">var <span class="built_in">test</span> = new fn(<span class="string">'my status'</span>);</span><br><span class="line">alert(test.get_status);//my status,this指向<span class="built_in">test</span></span><br></pre></td></tr></table></figure><h5 id="apply-call调用模式"><a href="#apply-call调用模式" class="headerlink" title="apply/call调用模式"></a>apply/call调用模式</h5><ul><li>通过call和apply可以重新定义函数的执行环境，即this的指向。</li><li>apply和call一样的用法，只不过apply第二个参数用数组进行传递。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> MyObject(name)&#123;</span><br><span class="line">    this.name=name ||<span class="string">'MyObject'</span>;</span><br><span class="line">    this.value=0;</span><br><span class="line">    this.increment=<span class="keyword">function</span>(num)&#123;</span><br><span class="line">        this.value += typeof(num) === <span class="string">'number'</span> ? num : 0;</span><br><span class="line">    &#125;;</span><br><span class="line">    this.toString=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">'[Object:'</span>+this.name+<span class="string">' &#123;value:'</span>+this.value+<span class="string">'&#125;]'</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    this.target=this;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getInfo</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> this.toString();</span><br><span class="line">&#125;</span><br><span class="line">var myObj=new MyObject();</span><br><span class="line">alert(getInfo.apply(myObj));//[Object:MyObject &#123;value:0&#125;],this指向myObj</span><br><span class="line">alert(getInfo.apply(window));//[object Window],this指向window</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;JavaScript函数有4种调用模式，分别是：函数直接执行模式、对象方法的调用模式、构造器的调用模式和call和apply调用模式。&lt;/li&gt;
&lt;li&gt;函数调用每种方式的不同在于this值的初始化。&lt;/li&gt;
&lt;li&gt;一般而言，在JavaScript中，this指向函数执行时的当前对象。&lt;/li&gt;
&lt;li&gt;this是保留关键字，不能修改this的值。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（三）</title>
    <link href="https://chongtianhong.github.io/2018/02/13/js3/"/>
    <id>https://chongtianhong.github.io/2018/02/13/js3/</id>
    <published>2018-02-13T13:17:10.000Z</published>
    <updated>2018-02-13T15:07:28.293Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JS事件驱动机制"><a href="#JS事件驱动机制" class="headerlink" title="JS事件驱动机制"></a>JS事件驱动机制</h3><ul><li>由鼠标或热键引发的一连串程序的动作，称之为事件驱动</li><li>对事件进行处理程序或函数，我们称之为事件处理程序<a id="more"></a></li></ul><h4 id="事件的分类"><a href="#事件的分类" class="headerlink" title="事件的分类"></a>事件的分类</h4><ul><li>鼠标事件：当用户在页面上用鼠标点击页面元素时，对应的dom节点会触发鼠标事件，主要有click、dblclick、mousedown、mouseout、mouseover、mousemove等。</li><li>键盘事件：当用户用键盘输入信息时，会触发键盘操作事件。主要包括keydown、keypress、keyup三个。</li><li>HTML事件：在HTML节点加载变更等相关的事件，比如window的onload、unload、abort、error，文本框select、change等。</li><li>其他事件：页面中一些特殊对象运行过程中产生的事件，比如xmlhttprequest对象的相关事件。</li></ul><h5 id="关于事件绑定"><a href="#关于事件绑定" class="headerlink" title="关于事件绑定"></a>关于事件绑定</h5><ol><li><p>直接和某个html控件绑定 比如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"刷新页面"</span> onclick=<span class="string">"test()"</span>/&gt;</span><br></pre></td></tr></table></figure></li><li><p>通过getElementById()获取到元素后，再绑定监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    document.getElementById(<span class="string">"but1"</span>).onclik=<span class="built_in">test</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>detachEvent与attachEvent，假设我们有一个投票系统，但是只能投一次票，需要解除绑定机制，非ie浏览器用的addEventListener/RemoveEventListener，代码实例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    document.getElementById(<span class="string">"but1"</span>).attachEvent(<span class="string">"onclick"</span>,<span class="built_in">test</span>);</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">test</span></span>()&#123;</span><br><span class="line">    window.alert(<span class="string">'you have one vote'</span>);</span><br><span class="line">    document.getElementById(<span class="string">"but1"</span>).detachEvent(<span class="string">"onclick"</span>,<span class="built_in">test</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"button"</span> id=<span class="string">"but1"</span> value=<span class="string">"vote"</span>/&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="DOM编程"><a href="#DOM编程" class="headerlink" title="DOM编程"></a>DOM编程</h3><ul><li>通过DOM编程，可以写出各种网页游戏</li><li>DOM编程也是ajax的重要基础</li><li>将HTML文档看成一颗DOM树,<code>&lt;html&gt;</code>标签为网页的根节点</li><li>HTML DOM把html文档呈现为带有元素、属性和文本的树结构(节点树)</li><li>HTML DOM对象只通过方法对元素进行动态的控制</li></ul><p><img src="/images/dom.png" width="500" alt="dom" style="border:none"></p><h3 id="BOM-浏览器对象模型"><a href="#BOM-浏览器对象模型" class="headerlink" title="BOM 浏览器对象模型"></a>BOM 浏览器对象模型</h3><h4 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h4><blockquote>confirm</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span>()&#123;</span><br><span class="line">    var res=window.confirm(<span class="string">"你要删除吗？"</span>);</span><br><span class="line">    <span class="keyword">if</span>(res)&#123;</span><br><span class="line">        window.alert(<span class="string">"删除"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        window.alert(<span class="string">"放弃删除"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote>setInterval()</blockquote><ul><li>该函数可以<strong>按照指定的周期</strong>（以毫秒计）来调用函数或计算表达式。</li></ul><blockquote>clearInrerval()</blockquote><ul><li>取消由 setInterval() 设置的 timeout。</li></ul><blockquote>setTimeout()</blockquote><ul><li>在指定的毫秒数后调用函数或计算表达式(只能调用一次)。</li></ul><blockquote>clearTimeout()</blockquote><ul><li>取消由 setTimeout() 方法设置的 timeout。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span>()&#123;</span><br><span class="line">window.alert(<span class="string">"hello"</span>);</span><br><span class="line">&#125;</span><br><span class="line">var mytimer=setTimeout(<span class="string">"test()"</span>,3000);</span><br><span class="line">clearTimeout(mytimer);</span><br></pre></td></tr></table></figure><blockquote>moveTo()/moveBy()</blockquote><ul><li>moveTo() 方法可把窗口的左上角移动到一个指定的坐标。</li><li>moveBy() 方法可相对窗口的当前坐标把它移动指定的像素。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">window.moveTo(100,100)//相对屏幕的左上角，移动到(100,100)</span><br><span class="line">window.moveBy(100,100)//相对当前这个窗口的左上角再移动(100,100)</span><br></pre></td></tr></table></figure><blockquote>resizeTo()/resizeBy()</blockquote><ul><li>resizeTo() 方法用于把窗口大小调整为指定的宽度和高度。</li><li>resizeBy() 方法用于根据指定的像素来调整窗口的大小。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resizeTo(100,100)//把窗口调整到100,100</span><br><span class="line">resizeBy(100,100)//把窗口再增加100，100</span><br></pre></td></tr></table></figure><h4 id="Screen-对象"><a href="#Screen-对象" class="headerlink" title="Screen 对象"></a>Screen 对象</h4><ul><li>Screen 对象包含有关客户端显示屏幕的信息。</li></ul><h4 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h4><ul><li>History 对象包含用户（在浏览器窗口中）访问过的 URL。</li><li>History 对象是 window 对象的一部分，可通过 window.history 属性对其进行访问。</li><li>back() 方法可加载历史列表中的前一个 URL（如果存在）。<ul><li>history.back() ~ history.go(-1)</li></ul></li><li>属性： history.length 返回浏览器历史列表中的 URL 数量。</li></ul><h4 id="Location-对象"><a href="#Location-对象" class="headerlink" title="Location 对象"></a>Location 对象</h4><ul><li>Location 对象包含有关当前 URL 的信息。</li><li>Location 对象是 Window 对象的一个部分，可通过window.location 属性来访问。</li><li>reload() 重新加载改文档。</li></ul><h4 id="Navigator对象"><a href="#Navigator对象" class="headerlink" title="Navigator对象"></a>Navigator对象</h4><ul><li>包含有关浏览器的信息</li></ul><h3 id="Document-对象"><a href="#Document-对象" class="headerlink" title="Document 对象"></a>Document 对象</h3><ul><li>定义：document 对象代表的整个html文档，因此可以去访问到文档中的各个对象（元素）</li></ul><blockquote>document.write</blockquote><ul><li>向文档输出文本或是js代码</li></ul><blockquote>document.writeln</blockquote><ul><li>这个是向文档输出文本或是js代码，与write不一样的地方是，writeln是换行输出。</li><li>但是对于浏览器来说，输出效果没什么区别</li></ul><blockquote>document.getElementById()</blockquote><ul><li>规定html文档中id号要唯一，如果不唯一，则只取第一个元素。</li><li>id不能用数字开头</li></ul><blockquote>document.getElementsByName()</blockquote><ul><li>通过html控件的名字返回<strong>对象集合</strong>(注意不是数组)</li></ul><blockquote>document.getElementsByTagName</blockquote><ul><li>通过html的标签名返回<strong>对象集合</strong>(注意不是数组)</li></ul><h4 id="如何动态的创建添加删除html元素"><a href="#如何动态的创建添加删除html元素" class="headerlink" title="如何动态的创建添加删除html元素"></a>如何动态的创建添加删除html元素</h4><ul><li>createElement()</li><li>appendChild()</li><li>removeChild() 必须获得父元素</li><li>parentNode 属性以 Node 对象的形式返回指定节点的父节点。</li><li>在dom编程中，一个html文档会被当做一个dom树来对待，dom会把所有的html元素映射成Node节点，于是就可以使用Node节点（对象）的属性和方法</li></ul><h4 id="body对象"><a href="#body对象" class="headerlink" title="body对象"></a>body对象</h4><ul><li>innerHTML 作为html来解析</li><li>innerText 当做文本来解析</li><li>appendChild()</li><li>removeChild()</li><li>getElementByTagName()</li><li>bgColor 该属性规定文档的背景颜色</li><li>onload 文档加载时触发</li><li>onunload 文档关闭时触发</li><li>onbeforeunload事件 文档关闭前触发</li><li>onScroll事件 用户拉动滚动条时触发</li><li>onselectstart事件 用户选中文档body体的内容时触发</li><li>body.clientWidth 网页可见区域宽，该属性包括内边距，但不包括垂直滚动条（如果有）、边框和外边距</li><li>body.clientHeight 网页可见区域高，该属性包括内边距，但不包括垂直滚动条（如果有）、边框和外边距</li><li>offsetWidth 网页可见区域宽(包括边线的宽)</li><li>offsetHeight 网页可见区域高(包括边线的高)</li></ul><h4 id="style对象"><a href="#style对象" class="headerlink" title="style对象"></a>style对象</h4><h4 id="forms-对象"><a href="#forms-对象" class="headerlink" title="forms 对象"></a>forms 对象</h4><ul><li>document.forms</li><li>length:返回大小</li><li>item(index):指定取出forms对象集合的第几个form对象</li><li>document.forms[i].value</li><li>document.forms.item[i].value</li></ul><h4 id="img-对象"><a href="#img-对象" class="headerlink" title="img 对象"></a>img 对象</h4><ul><li>onload()</li><li>onerror()</li></ul><h4 id="table-对象"><a href="#table-对象" class="headerlink" title="table 对象"></a>table 对象</h4><ul><li>rows 行</li><li>cells 列</li><li>deletRow() 删除一行</li><li>insertRow() insertCell() 插入行再在行中插入列</li><li>遍历一个table<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(var i=0;i&lt;mytab.rows.length;i++)&#123;</span><br><span class="line">//取出一行</span><br><span class="line">    var eachRow=mytab.rows[i];</span><br><span class="line">//对该行遍历</span><br><span class="line"><span class="keyword">for</span>(var j=0;j&lt;eachRow.cells.length;j++)&#123;</span><br><span class="line">    window.alert(eachRow.cells[j].innerText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JS事件驱动机制&quot;&gt;&lt;a href=&quot;#JS事件驱动机制&quot; class=&quot;headerlink&quot; title=&quot;JS事件驱动机制&quot;&gt;&lt;/a&gt;JS事件驱动机制&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;由鼠标或热键引发的一连串程序的动作，称之为事件驱动&lt;/li&gt;
&lt;li&gt;对事件进行处理程序或函数，我们称之为事件处理程序
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（二）</title>
    <link href="https://chongtianhong.github.io/2018/02/12/js2/"/>
    <id>https://chongtianhong.github.io/2018/02/12/js2/</id>
    <published>2018-02-12T07:37:37.000Z</published>
    <updated>2018-02-12T09:55:46.433Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>Javascript<strong>基于对象的三大特征</strong>和C++，Java面向对象的三大特征一样，即<strong>封装(encapsulation)</strong>、<strong>继承(inheritance)</strong>和<strong>多态(polymorphism)</strong>。</li><li>JavaScript中，<strong>函数内部</strong>可以直接<strong>读取全局变量</strong>；另一方面，若不使用闭包，在函数外部<strong>无法读取</strong>函数内的<strong>局部变量</strong>。</li><li>要实现从外部读取局部变量，可使用闭包，即在函数的内部再定义一个函数。（闭包就是能读取其他函数内部变量的函数，一个定义在函数内部的函数）</li><li>JavaScript中本身有提供一些可以直接使用的内部类。<a id="more"></a></li></ul><h4 id="Javascript基于对象的三大特征"><a href="#Javascript基于对象的三大特征" class="headerlink" title="Javascript基于对象的三大特征"></a>Javascript基于对象的三大特征</h4><ul><li>封装(encapsulation)</li><li>继承(inheritance)</li><li>多态(polymorphism)</li></ul><h5 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h5><ul><li><strong>封装</strong> 就是把 <em>抽象出来的数据</em> 和 <em>对数据的操作</em> 封装在一起，数据被保护在内部，程序的其它部分只有通过<strong>被授权的操作</strong>(成员方法)，才能对数据进行操作。</li><li>JS封装只有两种状态，一种是<strong>公开</strong>的，一种是<strong>私有</strong>的。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Person(name,agei,sal)&#123;</span><br><span class="line">    this.name=name;//公开属性</span><br><span class="line">    var age=agei;//私有属性</span><br><span class="line">    var salary=sal;//私有属性</span><br><span class="line">    //在类中如何定义公开方法（特权方法），私有方法（内部方法）</span><br><span class="line">    //如果我们希望操作私有的属性，则可用公开方法实现</span><br><span class="line">    this.show=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        window.alert(age+<span class="string">" "</span>+salary)</span><br><span class="line">    &#125;</span><br><span class="line">    //私有方法，可用访问对象的属性</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">show2</span></span>()&#123;</span><br><span class="line">        window.alert(age+<span class="string">" "</span>+salary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><strong>构造函数</strong>方式 与 <strong>原型</strong>方式给对象添加方法的区别：</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//1.通过构造函数方式给对象添加方法</span><br><span class="line"><span class="keyword">function</span> Dog(name)&#123;</span><br><span class="line">    this.name=name;</span><br><span class="line">    this.shout=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        window.alert(<span class="string">"小狗尖叫"</span>+this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var dog1=new Dog(<span class="string">"aa"</span>);</span><br><span class="line">var dog2=new Dog(<span class="string">"bb"</span>);</span><br><span class="line"><span class="keyword">if</span>(dog1.shout==dog2.shout)&#123;</span><br><span class="line">    window.alert(<span class="string">"相等"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    window.alert(<span class="string">"不相等"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//会输出“不相等”</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//2.通过原型方式给对象添加方法</span><br><span class="line"><span class="keyword">function</span> Dog(name)&#123;</span><br><span class="line">    this.name=name;    </span><br><span class="line">&#125;</span><br><span class="line">Dog.prototype.shout=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    window.alert(<span class="string">"小狗尖叫"</span>+this.name);</span><br><span class="line">&#125;</span><br><span class="line">var dog1=new Dog(<span class="string">"aa"</span>);</span><br><span class="line">var dog2=new Dog(<span class="string">"bb"</span>);</span><br><span class="line"><span class="keyword">if</span>(dog1.shout==dog2.shout)&#123;</span><br><span class="line">    window.alert(<span class="string">"相等"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    window.alert(<span class="string">"不相等"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//会输出“相等”</span><br></pre></td></tr></table></figure><ul><li>以上的两个例子说明通过<strong>构造函数</strong>来分配成员方法，给每个对象分配一份独立的代码。这样的弊端就是如果对象实例有很多，那函数的资源占用就会很大，而且有可能造成内存泄漏。而<strong>原型法</strong>是大家共享同一份代码，就不会有那种弊端。</li><li>因此，通过构造函数添加成员方法和通过原型法添加成员方法的区别：<br>1.通过原型法分配的函数是<strong>所有对象共享</strong>的；<br>2.通过原型法分配的属性是<strong>独立</strong>的；（如果你不修改属性，他们是共享）<br>3.如果希望所有的对象使用同一个函数，最好使用<strong>原型法</strong>添加方法，这样比较节省内存。</li></ul><blockquote>prototype可以给所有对象添加方法，但是这种方式，不能去访问类的私有变量和方法</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Person</span></span>()&#123;</span><br><span class="line">    this.name=<span class="string">"Cece"</span>; //公开</span><br><span class="line">    var age=18; //私有</span><br><span class="line">    this.abc=<span class="function"><span class="title">function</span></span>()&#123;    //公开</span><br><span class="line">        window.alert(<span class="string">"abc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">abc2</span></span>()&#123;        //私有</span><br><span class="line">        window.alert(<span class="string">"abc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.fun1=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    window.alert(this.name);//Cece</span><br><span class="line">    //window.alert(age);//Uncaught ReferenceError: age is not defined(…)</span><br><span class="line">    //abc2();           //Uncaught ReferenceError: abc2 is not defined(…)</span><br><span class="line">    this.abc();         //abc</span><br><span class="line">&#125;</span><br><span class="line">var p1=new Person();</span><br><span class="line">p1.fun1();</span><br></pre></td></tr></table></figure><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><ul><li>继承可以解决代码复用(冗余)。当多个类存在相同的属性(变量)和方法时，可以从这些类中抽象出父类，在父类中定义这些相同的属性和方法，所有的子类不需要重新定义这些属性和方法，只需要通过继承父类中的属性和方法。</li><li>JS中实现继承的方式：<ul><li>对象冒充</li><li>通过call或者apply实现</li><li>原型继承</li><li>混合继承（构造+原型）</li><li>多重继承</li></ul></li></ul><blockquote>对象冒充</blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> //1.把子类中共有的属性和方法抽取出，定义一个父类Stu </span><br><span class="line"><span class="keyword">function</span> Stu(name, age)&#123; </span><br><span class="line">    this.name = name; </span><br><span class="line">    this.age = age; </span><br><span class="line">    this.show = <span class="function"><span class="title">function</span></span>()&#123; </span><br><span class="line">        window.alert(this.name + <span class="string">" "</span> + this.age); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">function</span> MidStu(name, age) &#123; </span><br><span class="line">    this.stu = Stu; </span><br><span class="line">    // 通过对象冒充实现继承,这句话不能少,因为js是动态语言，如果你不执行，则不能实现继承效果</span><br><span class="line">    // 对象冒充,即获取那个类的所有成员，因此MidStu就有了父类Stu的成员 </span><br><span class="line">    this.stu(name, age); </span><br><span class="line">    //MidStu可以覆盖Stu父类的show方法</span><br><span class="line">    this.show=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        window.alert(<span class="string">"MidStu show();"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">function</span> Pupil(name, age) &#123; </span><br><span class="line">    this.stu = Stu; </span><br><span class="line">    // 通过对象冒充实现继承 </span><br><span class="line">    this.stu(name, age); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">var midStu = new MidStu(<span class="string">"zs"</span>, 13); </span><br><span class="line">midStu.show(); //MidStu自己的show方法</span><br><span class="line">var pupil = new Pupil(<span class="string">"ls"</span>, 10); </span><br><span class="line">pupil.show(); //父类Stu的show方法</span><br></pre></td></tr></table></figure><blockquote>通过call或者apply实现</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//把子类中共有的属性和方法抽取出，定义一个父类Stu </span><br><span class="line"><span class="keyword">function</span> Stu(name,age)&#123; </span><br><span class="line">    this.name=name; </span><br><span class="line">    this.age=age; </span><br><span class="line">    this.show=<span class="function"><span class="title">function</span></span>()&#123; </span><br><span class="line">        window.alert(this.name+<span class="string">"年龄是="</span>+this.age); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">//通过call或者apply来继承父类的属性的方法 </span><br><span class="line"><span class="keyword">function</span> MidStu(name,age)&#123; </span><br><span class="line">    //通过call修改了Stu构造函数的this指向,让它指向了调用者本身. </span><br><span class="line">    Stu.call(this,name,age); </span><br><span class="line">    //如果用apply实现，则可以 </span><br><span class="line">    //Stu.apply(this,[name,age]); //说明传入的参数是 数组 方式 </span><br><span class="line">    //可以写MidStu自己的方法. </span><br><span class="line">    this.pay=<span class="keyword">function</span>(fee)&#123; </span><br><span class="line">        window.alert(<span class="string">"你的学费是"</span>+fee*0.8); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">function</span> Pupil(name,age)&#123; </span><br><span class="line">    Stu.call(this,name,age);//当创建Pupil对象实例,Stu的构造函数会被执行,当执行后，Pupil对象就获取到从Stu封装的属性和方法 </span><br><span class="line">    //可以写Pupil自己的方法. </span><br><span class="line">    this.pay=<span class="keyword">function</span>(fee)&#123; </span><br><span class="line">        window.alert(<span class="string">"你的学费是"</span>+fee*0.5); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">//<span class="built_in">test</span> </span><br><span class="line">var midstu=new MidStu(<span class="string">"zs"</span>,15); </span><br><span class="line">var pupil=new Pupil(<span class="string">"ls"</span>,12); </span><br><span class="line">midstu.show(); </span><br><span class="line">midstu.pay(100); </span><br><span class="line">pupil.show(); </span><br><span class="line">pupil.pay(100);</span><br></pre></td></tr></table></figure><blockquote>混合继承（构造+原型）</blockquote><ul><li>混合继承是把多种继承方式一起使用，发挥各个优势，来实现各种复杂的应用。最常见的就是把构造函数和原型继承一起使用。做法是将<strong>需要独立的属性方法</strong>放入<strong>构造函数</strong>中，而<strong>可以共享的部分</strong>则放入<strong>原型</strong>中，这样做可以<strong>最大限度节省内存</strong>而又<strong>保留对象实例的独立性</strong>。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> A(x,y)&#123;  //属性写到构造函数中</span><br><span class="line">    this.x = x;  </span><br><span class="line">    this.y = y;  </span><br><span class="line">&#125;  </span><br><span class="line">A.prototype.add = <span class="function"><span class="title">function</span></span>()&#123;  //方法写到原型中</span><br><span class="line">    <span class="built_in">return</span> (this.x-0) + (this.y-0);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">function</span> B(x,y)&#123;  </span><br><span class="line">    A.call(this,x,y);  </span><br><span class="line">&#125;  </span><br><span class="line">B.prototype = new A();  </span><br><span class="line"></span><br><span class="line">// 测试  </span><br><span class="line">var b = new B(2,1);  </span><br><span class="line">console.log(b.x); // 2  </span><br><span class="line">console.log(b.add()); // 3</span><br></pre></td></tr></table></figure><ul><li>注意：<ol><li>把<strong>方法写在原型中</strong>比写在构造函数中<strong>消耗的内存更小</strong>，因为在内存中一个类的原型只有一个，写在原型中的行为可以被所有实例共享，实例化的时候并不会在实例的内存中再复制一份; 而<strong>写在构造函数中的方法</strong>，实例化的时候会在每个实例中再复制一份，所以<strong>消耗的内存更高</strong>。所以一般把<strong>属性</strong>写到<strong>构造函数</strong>中，而<strong>方法</strong>写到<strong>原型</strong>中。</li><li><strong>构造函数中定义的属性和方法</strong>要比原型中定义的属性和方法的<strong>优先级高</strong>，如果定义了同名称的属性和方法，<strong>构造函数</strong>中的将会<strong>覆盖原型</strong>中的。</li></ol></li></ul><h5 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h5><blockquote>JS的函数重载</blockquote><ul><li>函数重载是多态的基础，JS函数不支持重载(即，不可以通过参数的个数来决定调用哪个函数)，但是事实上JS函数是无态的，支持任意长度，类型的参数列表。</li><li><p>如果同时定义了多个<strong>同名函数</strong>，则以<strong>最后一个函数</strong>为准。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/*****************说明js不支持重载*****/</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Person</span></span>()&#123; </span><br><span class="line">    this.test1=<span class="keyword">function</span> (a,b)&#123; </span><br><span class="line">        window.alert(<span class="string">'function (a,b)'</span>);  </span><br><span class="line">    &#125; </span><br><span class="line">    this.test1=<span class="keyword">function</span> (a)&#123; </span><br><span class="line">        window.alert(<span class="string">'function (a)'</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">var p1=new Person(); </span><br><span class="line">//js中不支持重载. </span><br><span class="line">//但是这不会报错，js会默认是最后同名一个函数，可以看做是后面的把前面的覆盖了。 </span><br><span class="line">p1.test1(<span class="string">"a"</span>,<span class="string">"b"</span>); </span><br><span class="line">p1.test1(<span class="string">"a"</span>);</span><br></pre></td></tr></table></figure></li><li><p>js可通过判断参数的个数来实现重载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//js怎么实现重载.通过判断参数的个数来实现重载 </span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Person</span></span>()&#123; </span><br><span class="line">    this.test1=<span class="function"><span class="title">function</span></span> ()&#123; </span><br><span class="line">        <span class="keyword">if</span>(arguments.length==1)&#123; </span><br><span class="line">            this.show1(arguments[0]); </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arguments.length==2)&#123; </span><br><span class="line">            this.show2(arguments[0],arguments[1]); </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arguments.length==3)&#123; </span><br><span class="line">            this.show3(arguments[0],arguments[1],arguments[2]); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    this.show1=<span class="keyword">function</span>(a)&#123; </span><br><span class="line">        window.alert(<span class="string">"show1()被调用"</span>+a); </span><br><span class="line">    &#125; </span><br><span class="line">    this.show2=<span class="keyword">function</span>(a,b)&#123; </span><br><span class="line">        window.alert(<span class="string">"show2()被调用"</span>+<span class="string">"--"</span>+a+<span class="string">"--"</span>+b); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">function</span> show3(a,b,c)&#123; </span><br><span class="line">        window.alert(<span class="string">"show3()被调用"</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">var p1=new Person(); </span><br><span class="line">//js中不支持重载. </span><br><span class="line">p1.test1(<span class="string">"a"</span>,<span class="string">"b"</span>); </span><br><span class="line">p1.test1(<span class="string">"a"</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li>重写：子类可以重新写函数，来覆盖父类的某个方法 </li></ul><blockquote>多态</blockquote><ul><li>多态是指一个引用(类型)在不同情况下的多种状态。</li><li>也可以理解成：多态是指通过指向父类的引用，来调用在不同子类中实现的方法。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Master</span></span>()&#123;</span><br><span class="line">    //给动物喂食</span><br><span class="line">    this.feed=<span class="keyword">function</span>(animal,food)&#123;</span><br><span class="line">    document.write(<span class="string">"主人给"</span>+animal.name+<span class="string">"喂"</span>+food.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//写食物</span><br><span class="line"><span class="keyword">function</span> Food(name)&#123;</span><br><span class="line">    this.name=name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> Fish(name)&#123;</span><br><span class="line">    this.food=Food;//对象冒充</span><br><span class="line">    this.food(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> Bone(name)&#123;</span><br><span class="line">    this.food=Food;//对象冒充</span><br><span class="line">    this.food(name);</span><br><span class="line">&#125;</span><br><span class="line">//动物</span><br><span class="line"><span class="keyword">function</span> Animal(name)&#123;</span><br><span class="line">    this.name=name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> Cat(name)&#123;</span><br><span class="line">    this.animal=Animal;//对象冒充</span><br><span class="line">    this.animal(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> Dog(name)&#123;</span><br><span class="line">    this.animal=Animal;//对象冒充</span><br><span class="line">    this.animal(name);</span><br><span class="line">&#125;</span><br><span class="line">var cat=new Cat(<span class="string">"小猫咪"</span>);</span><br><span class="line">var dog=new Dog(<span class="string">"小狗"</span>);</span><br><span class="line">var fish=new Fish(<span class="string">"小鱼"</span>);</span><br><span class="line">var bone=new Bone(<span class="string">"骨头"</span>)</span><br><span class="line">var bone=new Master();</span><br><span class="line">master.feed(cat,fish);</span><br></pre></td></tr></table></figure></li></ul><h4 id="闭包-closure"><a href="#闭包-closure" class="headerlink" title="闭包(closure)"></a>闭包(closure)</h4><ul><li><p><strong>闭包</strong>可以用在许多地方。它的最大用处有两个：</p><ul><li>可以<strong>读取函数内部的变量</strong></li><li>让这些<strong>变量的值始终保持在内存</strong>中<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">f1</span></span>()&#123;</span><br><span class="line">    var n=999;</span><br><span class="line">    nAdd=<span class="function"><span class="title">function</span></span>()&#123;//全局函数</span><br><span class="line">        n+=1</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">f2</span></span>()&#123;</span><br><span class="line">　　　　alert(n);</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="built_in">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line">　　var result=f1();//闭包f2函数</span><br><span class="line">　　result(); // 999</span><br><span class="line">　　nAdd();</span><br><span class="line">　　result(); // 1000</span><br></pre></td></tr></table></figure></li></ul><p>可见，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。</p></li><li><strong>有权访问另一个函数作用域内变量的函数</strong>都是<strong>闭包</strong>。一般是定义在外层函数中的内层函数。</li><li>使用闭包的原因：局部变量无法共享和长久的保存，而全局变量可能造成变量污染，所以我们希望有一种机制既可以长久的保存变量又不会造成全局污染。</li><li>下面代码有助于更好地了解<strong>闭包机制</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//代码片段一</span><br><span class="line">var name = <span class="string">"The Window"</span>;</span><br><span class="line">var object = &#123;</span><br><span class="line">    name : <span class="string">"My Object"</span>,</span><br><span class="line">    getNameFunc : <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">            <span class="built_in">return</span> this.name;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">alert(object.getNameFunc()());//The Window</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//代码片段二</span><br><span class="line">var name = <span class="string">"The Window"</span>;</span><br><span class="line">var object = &#123;</span><br><span class="line">    name : <span class="string">"My Object"</span>,</span><br><span class="line">    getNameFunc : <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        var that = this;</span><br><span class="line">        <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">            <span class="built_in">return</span> that.name;</span><br><span class="line">            &#125;;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;;</span><br><span class="line">alert(object.getNameFunc()());//My Object</span><br></pre></td></tr></table></figure><h4 id="JavaScript的内部类"><a href="#JavaScript的内部类" class="headerlink" title="JavaScript的内部类"></a>JavaScript的内部类</h4><p>JavaScript中本身有提供一些可以直接使用的类，这种类就是内部类，主要有：<br>Object/Array/Math/Boolean/String/<font color="red">RegExp</font>/Date/Number</p><blockquote>分类:</blockquote><ul><li><p>静态类：类名.属性/方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.alert(Math.abs(-12));</span><br></pre></td></tr></table></figure></li><li><p>动态类：使用var对象=new 动态类（）对象.属性/方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var nowdata=new Data();</span><br><span class="line">window.alert(nowdate.toLocaleString());</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Javascript&lt;strong&gt;基于对象的三大特征&lt;/strong&gt;和C++，Java面向对象的三大特征一样，即&lt;strong&gt;封装(encapsulation)&lt;/strong&gt;、&lt;strong&gt;继承(inheritance)&lt;/strong&gt;和&lt;strong&gt;多态(polymorphism)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;JavaScript中，&lt;strong&gt;函数内部&lt;/strong&gt;可以直接&lt;strong&gt;读取全局变量&lt;/strong&gt;；另一方面，若不使用闭包，在函数外部&lt;strong&gt;无法读取&lt;/strong&gt;函数内的&lt;strong&gt;局部变量&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;要实现从外部读取局部变量，可使用闭包，即在函数的内部再定义一个函数。（闭包就是能读取其他函数内部变量的函数，一个定义在函数内部的函数）&lt;/li&gt;
&lt;li&gt;JavaScript中本身有提供一些可以直接使用的内部类。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（一）</title>
    <link href="https://chongtianhong.github.io/2018/02/11/js1/"/>
    <id>https://chongtianhong.github.io/2018/02/11/js1/</id>
    <published>2018-02-11T02:11:09.000Z</published>
    <updated>2018-02-11T08:43:09.010Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><div class="note danger">HTML定义了网页的内容<br>CSS描述了网页的布局<br>JavaScript给定了网页的行为<br></div><ul><li><strong>脚本语言</strong> 是用于web开发的脚本语言（往往不能独立使用，和html/jsp/php/asp/asp.net 配合使用、有自己的变量、函数、控制语句，顺序、分支、循环）。<a id="more"></a></li><li><strong>脚本语言</strong>即解释性语言，即在执行时候，直接对源码进行执行。</li><li><strong>JavaScript 是脚本语言</strong>。轻量级、可插入HTML页面的任意位置、在客户端运行、由现代浏览器执行(Node.js可运行在服务端)。</li><li>因为js是由<strong>浏览器</strong>来执行的，因此这不同类型的浏览器可能对js的支持不一样。</li><li>通过使用<code>&lt;script&gt;</code>标签可在HTML页面中引入js，<code>&lt;script&gt;</code>和<code>&lt;/script&gt;</code>会告诉js在何时开始和结束。</li><li>在一个html文件中可以出现多对<code>&lt;script&gt;</code>片段，浏览器会按照先后顺序<strong>依次执行</strong>。</li><li>js中的变量的数据类型是<strong>由js引擎</strong>决定的。</li><li>js严格<strong>区分大小写</strong>（标记语言不区分）。</li></ul><h4 id="js命名规范"><a href="#js命名规范" class="headerlink" title="js命名规范"></a>js命名规范</h4><ul><li>使用大小写字母、数字、_、$可以命名；</li><li>不能以数字开头；</li><li>不能使用js的关键字/保留字；</li><li>区分大小写；</li><li>单行注释使用 //，多行注释使用 /**/。</li></ul><h5 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h5><ul><li><code>window.prompt</code> 请输入值对话框；</li><li><code>parseFloat()</code>、<code>parseInt()</code> 转换成浮点数、整数；</li><li><code>a++</code> 先判断再++；</li><li><code>++a</code> 先++再判断；</li><li>逻辑运算中，0 、””、 flase、 null、 undefined、 NaN均表示<code>flase</code>；<br>js中非0的数都为<code>True</code>；</li><li>|| 返回第一个不为<code>flase</code>那个值（对象亦可），或者是返回最后一个值（如果全部是<code>flase</code>的话）。</li></ul><h5 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h5><blockquote>顺序控制</blockquote><ul><li>对于编程而言，不控制其流程就是顺序执行。</li></ul><blockquote>分支控制</blockquote><ul><li><p>单分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">//执行语句；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>多分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式1)&#123;</span><br><span class="line">//执行</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表示式2)&#123;</span><br><span class="line">//执行</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表示式)&#123;//可以有多个<span class="keyword">else</span> <span class="keyword">if</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;//可以没有</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>switch</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">switch(表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 常量1：</span><br><span class="line">//执行语句；</span><br><span class="line"><span class="built_in">break</span>；//作用是跳出整个switch</span><br><span class="line"><span class="keyword">case</span> 常量2：</span><br><span class="line">//执行语句；</span><br><span class="line"><span class="built_in">break</span>；</span><br><span class="line">……</span><br><span class="line">default：</span><br><span class="line">//执行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>数据类型可以是js支持的任何类型（<strong>数组</strong>和<strong>对象</strong>除外）。</li><li>case后面的数据类型也可以任意（<strong>数组</strong>和<strong>对象</strong>除外）。</li><li>break的作用是跳出整个switch。</li><li>如果没有匹配的则执行default。</li></ul><blockquote>循环控制</blockquote><ul><li><p>for循环基本结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(循环初值; 循环条件; 步长)&#123;</span><br><span class="line">语句;//循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>while循环</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件表达式)&#123;</span><br><span class="line">//执行语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>do while</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">语句；//循环体</span><br><span class="line">&#125;<span class="keyword">while</span>(循环条件);</span><br></pre></td></tr></table></figure></li></ul><h3 id="js函数"><a href="#js函数" class="headerlink" title="js函数"></a>js函数</h3><ul><li>函数是为完成某一功能的代码（语句，指令）的集合，当调用该函数时，会执行函数内的代码。</li><li>基本语法<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(参数列表)&#123;</span><br><span class="line">        //执行代码</span><br><span class="line">     renturn 值;//可以选择，实现函数将值返回到调用它的地方</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>一个程序中有可能具有相同名称的局部变量和全局变量，在这种情况下，局部变量会优先于全局变量。</li><li>函数可以通过声明定义（使用关键字function），不是一个可执行语句，所以不以分号结束（函数声明后不会立即执行，会在我们需要的时候调用执行）。</li><li>函数也可以通过一个表达式定义（var myvar=函数名），函数存储在变量中，函数表达式是一个执行语句，以分号结尾。</li><li>函数声明后不会立即执行，会在我们需要的时候调用执行。</li><li>提升应用在变量的声明（变量初始化不提升）与函数的声明（函数表达式不提升）。<ul><li>提升是JavaScript默认将当前作用域提升到前面的行为，因此函数和变量可以在声明之前调用。</li></ul></li><li>函数是对象，具有属性和方法。<ul><li><code>arguments.length</code>属性返回函数调用过程中接收到的参数个数。</li><li><code>toString()</code>方法将函数作为一个字符串返回（调用方法：fuctionName.toString())。</li></ul></li><li>若函数定义作为对象的属性，称之为<strong>对象方法</strong>。</li><li><p>函数如果用于创建新的对象，称之为<strong>对象的构造函数</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> myFunction(name)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">var myFun = new myFunction(<span class="string">'John'</span>);</span><br></pre></td></tr></table></figure></li><li><p>关于接收函数返回值的问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var myvar=<span class="built_in">test</span>(<span class="string">'abc'</span>)；</span><br><span class="line">//如果<span class="built_in">test</span>函数没有返回值，则返回的就是undefined；如果有返回值，则将返回值赋给myvar</span><br><span class="line">window.alert(myvar);</span><br></pre></td></tr></table></figure></li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li><p>创建数组有三种方式:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//第一种方式：基本方法</span><br><span class="line">var arr=[元素值, 元素值, …..];</span><br><span class="line">//第二种方式：先定义再赋值</span><br><span class="line">var arr = new Array();</span><br><span class="line">arr[0] = 元素值;</span><br><span class="line">arr[1] = 元素值;</span><br><span class="line">...</span><br><span class="line">//第三种方式：定义数组时同时赋值</span><br><span class="line">var arr = new Array(元素值, 元素值,...);</span><br></pre></td></tr></table></figure></li><li><p>元素的值可以是任意类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var arr=[4,56,<span class="string">"hello world"</span>,<span class="literal">true</span>];</span><br></pre></td></tr></table></figure></li></ul><ul><li>js的数组是动态增长的。</li><li>JavaScript不支持真正的多维数组，实现多维数组的方法：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var t = new Array(5);</span><br><span class="line"><span class="keyword">for</span>(var i=0; i&lt;t.length; i++)&#123;</span><br><span class="line">    t[i] = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>对字符串分割，生成一个字符串数组(split函数)。</li><li>数组有多种方法：sort、push、pop、unshift、shift、join、reverse、concat、slice、splice、toString等。</li></ul><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var bubbleSort = <span class="keyword">function</span>(arr)&#123;</span><br><span class="line">    var len = arr.length;</span><br><span class="line">    <span class="keyword">for</span>(var i = 0; i &lt; len - 1; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(var j = 0; j &lt; len - i - 1; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j+1]&#123;</span><br><span class="line">                var temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+1];</span><br><span class="line">                arr[j+1] = temp;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//快速排序算法</span><br><span class="line">var quickSort = <span class="keyword">function</span>(arr)&#123;</span><br><span class="line"><span class="keyword">if</span> (arr.length &lt;= 1)&#123;</span><br><span class="line"><span class="built_in">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line">var pivotIndex = Math.floor(arr.length / 2);</span><br><span class="line">var pivot = arr.splice(pivotIndex, 1)[0];</span><br><span class="line">var left = [];</span><br><span class="line">var right = [];</span><br><span class="line"><span class="keyword">for</span>(var i = 0; i&lt; arr.length; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &lt; pivot)&#123;</span><br><span class="line">left.push(arr[i]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">right.push(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> quickSort(left).concat([pivot], quickSort(right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="js面向（基于）对象编程"><a href="#js面向（基于）对象编程" class="headerlink" title="js面向（基于）对象编程"></a>js面向（基于）对象编程</h3><ul><li>js中没有类class，但是它取了新的名字叫原型对象，因此类等同于原型对象。</li><li>js中的对象属性可以动态的添加。</li><li>属性没有限制。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Cat</span></span>()&#123;//函数</span><br><span class="line">&#125;</span><br><span class="line">var cat1 = new.Cat();//对象</span><br><span class="line">cat1.name = <span class="string">"xiaobai"</span>;</span><br><span class="line">cat1.age = <span class="string">"3"</span>;</span><br><span class="line">cat1.color = <span class="string">"write"</span>;</span><br></pre></td></tr></table></figure></li></ul><blockquote>类（原型对象）和对象的区别和联系</blockquote><ul><li>类是抽象的，概念代表一类事物。</li><li>对象是具体的，代表一个实体。</li><li>对象是以类（原型对象）为模板创建的。</li></ul><blockquote>创建对象的方式有五种</blockquote><ul><li>工厂方法一使用new object创建对象并添加相关属性。</li><li>使用构造函数来定义类（原型对象）。</li><li>使用prototype。</li><li>构造函数及原型混合方式。</li><li>动态原型方式。</li></ul><h3 id="使用构造函数来定义类（原型对象）"><a href="#使用构造函数来定义类（原型对象）" class="headerlink" title="使用构造函数来定义类（原型对象）"></a>使用构造函数来定义类（原型对象）</h3><blockquote>访问对象的属性的方法有两种：</blockquote><ul><li>普通方式：对象名.属性名。</li><li>动态访问：对象名[“属性名”]。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">person</span></span>()&#123;&#125;;</span><br><span class="line">var p1 = new person();</span><br><span class="line">p1.name = <span class="string">"John"</span>；</span><br><span class="line">window.alert(p1.name);//John</span><br><span class="line">var val = <span class="string">"na"</span>+<span class="string">"me"</span>;</span><br><span class="line">window.alert(p1[val]);//John</span><br></pre></td></tr></table></figure></li></ul><blockquote>删除对象的属性</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">delete 对象名.属性名//立即释放对象的属性空间</span><br><span class="line">//或者</span><br><span class="line">对象名.属性名 = null;</span><br></pre></td></tr></table></figure><blockquote>this</blockquote><ul><li>this只能在类定义的内部使用，不能在外部使用。</li><li><blockquote>对象-成员函数（方法）</blockquote></li></ul><blockquote>给对象添加方法有两种方法</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//第一种方法</span><br><span class="line"><span class="keyword">function</span> 类名()&#123;//构造函数</span><br><span class="line"> this.属性；</span><br><span class="line">&#125;</span><br><span class="line">var 对象名 = new 类名()；</span><br><span class="line"><span class="keyword">function</span> 函数名()&#123;</span><br><span class="line">//执行</span><br><span class="line">&#125;</span><br><span class="line">对象名.属性名 = 函数名；</span><br><span class="line">//这样就相当于把函数赋给 对象名.属性名，此时这个属性名就表示一个函数。</span><br><span class="line">对象名.属性名();//调用函数</span><br><span class="line"></span><br><span class="line">//或</span><br><span class="line">对象名.属性名 = <span class="keyword">function</span>(参数列表)&#123;</span><br><span class="line">//代码</span><br><span class="line">&#125;；</span><br><span class="line"> 调用</span><br><span class="line"> 对象名.属性名(实际参数)；</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">前面的方法有一个问题：</span><br><span class="line">就是每个对象独占函数代码。这样若对象很多，则会影响效率.</span><br><span class="line">js设计者，给我们提供另一个方法:</span><br><span class="line">原型(prototype)法：多个对象可以共享函数代码</span><br><span class="line">*/</span><br><span class="line">//第二种方法</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Dog</span></span>()&#123;</span><br><span class="line">&#125;</span><br><span class="line">var dog1 = new Dog();</span><br><span class="line">//使用prototype类去绑定一个函数给shout</span><br><span class="line">Dog.prototype.shout = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">window.alert(<span class="string">"小狗"</span>);</span><br><span class="line">&#125;</span><br><span class="line">dog1.shout();</span><br><span class="line">var dog2 = new Dog();</span><br><span class="line">dog2.shout();</span><br></pre></td></tr></table></figure><blockquote>== 与 === 的比较</blockquote><ul><li>对于string,number等基础类型，==和===是有区别的：<ul><li>不同类型间比较，==比较”转化成同一类型后的值”后，看”值”是否相等；===如果类型不同，其结果就是不等。</li><li>同类型比较，直接进行”值”比较，两者结果一样。</li></ul></li><li>对于Array,Object等高级类型，==和===是没有区别的：<br>进行”指针地址”比较，地址相同则相等。</li></ul><h3 id="对象-object类"><a href="#对象-object类" class="headerlink" title="对象 object类"></a>对象 object类</h3><blockquote>构造函数</blockquote><ul><li>基本用法<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> constrFun(参数列表)&#123;</span><br><span class="line">    this.属性 = 参数值；</span><br><span class="line">&#125;</span><br><span class="line">var 对象名 = new constrFun(参数列表值);</span><br></pre></td></tr></table></figure></li></ul><blockquote>直接创建对象</blockquote><ul><li>如果一个对象比较简单，我们可以直接创建。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var dog = &#123;</span><br><span class="line">    name:<span class="string">'小狗'</span>,</span><br><span class="line">    age:8,</span><br><span class="line">    fun1:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        window.alert(<span class="string">'hello,world'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><blockquote>遍历对象属性</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (var key <span class="keyword">in</span> History)&#123;//History为对象</span><br><span class="line">    console.log(key + <span class="string">":"</span> + History[key] + <span class="string">"&lt;/br&gt;"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h4&gt;&lt;div class=&quot;note danger&quot;&gt;HTML定义了网页的内容&lt;br&gt;CSS描述了网页的布局&lt;br&gt;JavaScript给定了网页的行为&lt;br&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;脚本语言&lt;/strong&gt; 是用于web开发的脚本语言（往往不能独立使用，和html/jsp/php/asp/asp.net 配合使用、有自己的变量、函数、控制语句，顺序、分支、循环）。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>新的开始</title>
    <link href="https://chongtianhong.github.io/2018/02/10/start/"/>
    <id>https://chongtianhong.github.io/2018/02/10/start/</id>
    <published>2018-02-10T15:14:45.000Z</published>
    <updated>2018-02-10T17:47:09.298Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/Nepal2.jpg" width="600" alt="Nepal"><br>终于迎来假期，于是有时间可以开始搭建一直以来都想做的博客，经过一段时间的折腾，终于用 Hexo + GitHub 搭建起了一个属于自己的博客站点，第一时间边学边写，弄出了这第一篇博客，心里甚是欢喜，那就写篇随笔纪念一下吧。<br><a id="more"></a></p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>一直以来都不是一个擅长记录的人，而这个博客，对我来说是一个新的开始，也是我前端道路上的一个重要的实践。<br><br>在偶然的机会下接触前端，发现自己对于这一块特别感兴趣，并决定继续深入学习前端，我开始意识到是时候开始经营一个属于自己的技术博客。<br><br>虽然现在博客的功能还不算特别完善，但我会通过不断积累，一步一步地把这个以 <strong><em>技术交流</em></strong> 为主的博客经营好，尝试将每天学习遇到的一些问题或者是一些学习的心得记录在这里，也希望能通过这种方式和各位技术大牛进行交流。</p><h2 id="Why-amp-How-学习前端"><a href="#Why-amp-How-学习前端" class="headerlink" title="Why &amp; How 学习前端"></a>Why &amp; How 学习前端</h2><p>从2017年6月份忙完了科研论文开始，就开始对自己的职业规划进行考虑。一直以来，都想找到自己的定位，学一门让自己感兴趣的技术。机缘巧合下，听了前端的公开课，觉得这个东西很有趣，做完马上就能看到效果，于是决定学习前端。<br><br>随着深入学习，听<strong>公开课、看教程、看博客</strong>等，发现前端并不仅仅是做特效，越来越觉得这项技术深深地把我吸引。然而，自学了4个月前端，感觉进展有点缓慢，身处学校科研圣地，身边也没有前端前辈可以请教，说实话，心里挺着急。接下来的学期就是实习招聘季，甚至自己的专业与前端并不对口，如果实践经历太少，很难有竞争优势。于是决心在秋季学期，要找到一份关于前端的实习，能够上手去做一些项目，将理论和实践结合起来。</p><h2 id="关于实习"><a href="#关于实习" class="headerlink" title="关于实习"></a>关于实习</h2><p>很多次告诉自己<strong>实习经历真的很重要</strong>，然而对于是否投简历，在什么时间投总是犹豫不决。一是怕自己学的时间太短，能力不够，企业不想要；二是怕不让去实习的导师“查岗”。<br><br>在犹豫中继续自学前端，到11月中旬，终于勇敢地投出了简历。很幸运，去了一家我想去的公司实习，实习的导师也很强。在公司学到了挺多，实习跟自学真的节奏很不一样。我会好好加油，在实习中快速成长，为项目组做出自己的贡献。</p><div class="note info">机会留给有准备的人，越努力，越幸运！</div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/Nepal2.jpg&quot; width=&quot;600&quot; alt=&quot;Nepal&quot;&gt;&lt;br&gt;终于迎来假期，于是有时间可以开始搭建一直以来都想做的博客，经过一段时间的折腾，终于用 Hexo + GitHub 搭建起了一个属于自己的博客站点，第一时间边学边写，弄出了这第一篇博客，心里甚是欢喜，那就写篇随笔纪念一下吧。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://chongtianhong.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://chongtianhong.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ice&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/c972cec44268ea709ae89f880845ea12</icon>
  <subtitle>知耻而后勇</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chongtianhong.github.io/"/>
  <updated>2018-02-14T15:37:13.528Z</updated>
  <id>https://chongtianhong.github.io/</id>
  
  <author>
    <name>Xiaobing Hong</name>
    <email>450707109@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript中的this引用</title>
    <link href="https://chongtianhong.github.io/2018/02/14/this/"/>
    <id>https://chongtianhong.github.io/2018/02/14/this/</id>
    <published>2018-02-14T11:48:39.000Z</published>
    <updated>2018-02-14T15:37:13.528Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>JavaScript函数有4种调用模式，分别是：函数直接执行模式、对象方法的调用模式、构造器的调用模式和call和apply调用模式。</li><li>函数调用每种方式的不同在于this值的初始化。</li><li>一般而言，在JavaScript中，this指向函数执行时的当前对象。</li><li>this是保留关键字，不能修改this的值。<a id="more"></a></li></ul><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><ul><li>this是函数内部的一个特殊对象（或this引用）–它引用的是函数据以执行的环境对象。</li><li>this是JavaScript的一个关键字，随着函数使用场合不同，this的值会发生变化。但总有一个原则，即this指的是<strong>调用当前函数的对象</strong>。<ul><li>JavaScript是动态语言，this关键字在执行的时候才能确定其值。</li><li>this永远指向调用者，即对“调用对象”的引用。简单点说，this指向调用当前函数的所属对象。</li><li>根据函数调用方式的不同，this可以指向全局对象，当前对象，或其他任意对象。</li></ul></li><li>this对象（引用）的使用情况可总结为：<ul><li>全局函数调用</li><li>构造函数调用</li><li>对象方法的调用</li><li>通过apply或call方法调用</li><li>原型链中的this</li><li>闭包中的this</li><li>内嵌在HTML元素中的脚本段</li></ul></li></ul><h5 id="全局函数调用"><a href="#全局函数调用" class="headerlink" title="全局函数调用"></a>全局函数调用</h5><ul><li>全局函数中的this会指向全局对象window。（函数调用模式）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var message = <span class="string">"this in window"</span>; //这一句写在函数外面和里面是一样效果</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span>(this == window)&#123;</span><br><span class="line">        alert(<span class="string">"this == window"</span>); </span><br><span class="line">        alert(message);</span><br><span class="line">        this.methodA = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">            alert(<span class="string">"I'm a function"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">func(); //如果不调用func方法，则里面定义的属性或方法会取不到 </span><br><span class="line">methodA();</span><br></pre></td></tr></table></figure><h5 id="构造函数调用"><a href="#构造函数调用" class="headerlink" title="构造函数调用"></a>构造函数调用</h5><ul><li>使用new的方式实例化一个对象，this会指向通过构造函数生成的对象。（构造器调用模式）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Func</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (this == window) &#123;</span><br><span class="line">        alert(<span class="string">"this == window"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">"this != window"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    this.fieldA = <span class="string">"I'm a field"</span>;</span><br><span class="line">    alert(this);</span><br><span class="line">&#125;</span><br><span class="line">var obj = new Func();</span><br><span class="line">alert(obj.fieldA); //this指向的是对象obj</span><br></pre></td></tr></table></figure><h5 id="对象方法的调用"><a href="#对象方法的调用" class="headerlink" title="对象方法的调用"></a>对象方法的调用</h5><ul><li>对象方法的调用，this指向当前对象。任何函数，只要该函数被当做一个对象的方法使用或赋值时，该函数内部的this都是对该对象本身的引用。也可理解为this写在一个普通对象中，this指向的就是对象本身。（方法调用模式）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    x: 3,</span><br><span class="line">    doit: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="keyword">if</span>(this == window)&#123;</span><br><span class="line">            alert(<span class="string">"this == window"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            alert(<span class="string">"method is called: "</span> + this.x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.doit(); //this指向的是对象obj</span><br></pre></td></tr></table></figure><h5 id="对象方法的调用-1"><a href="#对象方法的调用-1" class="headerlink" title="对象方法的调用"></a>对象方法的调用</h5><ul><li>通过apply或call方法改变this的指向，this指向传入的对象。</li><li>apply或call方法可以用来代替另一个对象调用一个方法。</li><li>apply或call方法可将一个函数的对象上下文从初始的上下文改变为由thisObj指定的新对象。</li><li>如果没有提供thisObj参数，那么全局对象被用作 thisObj。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    x: 3,</span><br><span class="line">    doit: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        alert(<span class="string">"method is called: "</span> + this.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var obj2 = &#123;x: 4&#125;;</span><br><span class="line">obj.doit(); //3,this指向obj</span><br><span class="line">obj.doit.apply(obj2); //4,this指向obj2</span><br><span class="line">obj.doit.call(obj2); //4,this指向obj2</span><br></pre></td></tr></table></figure><h5 id="原型链中的this"><a href="#原型链中的this" class="headerlink" title="原型链中的this"></a>原型链中的this</h5><ul><li>原型对象及构造函数中的this指向新创建的实例对象。</li><li>使用prototype扩展方法可以使用this获取到源对象的实例，<strong>私有字段</strong>无法通过原型链获取。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Func</span></span>() &#123;</span><br><span class="line">    this.fieldA = <span class="string">"I'm a field"</span>;</span><br><span class="line">    var privateFieldA = <span class="string">"I'm a var"</span>;//私有属性</span><br><span class="line">&#125;</span><br><span class="line">Func.prototype = &#123;//prototype扩展方法可以获取到Func对象的实例</span><br><span class="line">    ExtendMethod: <span class="keyword">function</span>(str) &#123;</span><br><span class="line">        alert(str + <span class="string">" :"</span> + this.fieldA);</span><br><span class="line">        alert(privateFieldA); //出错,私有字段无法通过原型链获取。</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var obj = new Func();</span><br><span class="line">obj.ExtendMethod(<span class="string">"From prototype"</span>); //此时构造函数及原型链中的this指向对象obj</span><br></pre></td></tr></table></figure><h5 id="闭包中的this"><a href="#闭包中的this" class="headerlink" title="闭包中的this"></a>闭包中的this</h5><ul><li>闭包：写在function中的function，this指向全局对象window。</li></ul><blockquote>对象中的闭包</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var name = <span class="string">"The window"</span>;</span><br><span class="line">var obj = &#123;</span><br><span class="line">    name: <span class="string">"My Object"</span>,</span><br><span class="line">    getNameFunc: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">            <span class="built_in">return</span> this.name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">alert(obj.getNameFunc()()); //The window</span><br></pre></td></tr></table></figure><p>可见，闭包中的this指向全局对象window，只能取到全局对象的属性。若要访问对象内部的属性（外部函数的变量），则要把外部函数的this对象保存为一个闭包能访问的变量(that)。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var name = <span class="string">"The window"</span>;</span><br><span class="line">var obj = &#123;</span><br><span class="line">    name: <span class="string">"My Object"</span>,</span><br><span class="line">    getNameFunc: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        var that = this;</span><br><span class="line">        <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">            <span class="built_in">return</span> that.name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">alert(obj.getNameFunc()()); //My object</span><br></pre></td></tr></table></figure></p><ul><li>不管是直接引用function，还是实例化一个function，其返回的闭包函数里的this都是指向window。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">a</span></span>() &#123;</span><br><span class="line">    alert(this == window);</span><br><span class="line">    var that = this;</span><br><span class="line">    var func = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        alert(this == window);</span><br><span class="line">        alert(that);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">return</span> func;</span><br><span class="line">&#125;</span><br><span class="line">var b = a();</span><br><span class="line">b(); //<span class="literal">true</span>, <span class="literal">true</span>, [object Window]</span><br><span class="line">var c = new a();</span><br><span class="line">c(); //<span class="literal">false</span>, <span class="literal">true</span>, [object object]</span><br></pre></td></tr></table></figure><h5 id="内嵌在HTML元素中的脚本段"><a href="#内嵌在HTML元素中的脚本段" class="headerlink" title="内嵌在HTML元素中的脚本段"></a>内嵌在HTML元素中的脚本段</h5><ul><li>内嵌在HTML元素中的脚本段，this指向元素本身</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div onclick=<span class="string">"test(this)"</span> id=<span class="string">"div"</span>&gt;Click Me&lt;/div&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="built_in">test</span>(obj) &#123;</span><br><span class="line">    alert(obj); //[object HTMLDivElement]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="js函数的四种调用方式"><a href="#js函数的四种调用方式" class="headerlink" title="js函数的四种调用方式"></a>js函数的四种调用方式</h4><h5 id="函数直接执行模式"><a href="#函数直接执行模式" class="headerlink" title="函数直接执行模式"></a>函数直接执行模式</h5><ul><li>此时this是全局的,即this指向window</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var c=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    alert(this==window)</span><br><span class="line">&#125;</span><br><span class="line">c()//<span class="literal">true</span></span><br></pre></td></tr></table></figure><h5 id="对象方法的调用模式"><a href="#对象方法的调用模式" class="headerlink" title="对象方法的调用模式"></a>对象方法的调用模式</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var myObj=&#123;</span><br><span class="line">    value:2,</span><br><span class="line">    inc:<span class="keyword">function</span>(num)&#123;</span><br><span class="line">        alert(this.value+num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">myobject.inc(1); //结果3，因为this指向myObj</span><br></pre></td></tr></table></figure><ul><li>注意：内部匿名函数不属于当前对象的函数，因此this指向了全局对象window</li></ul><h5 id="构造函数调用模式"><a href="#构造函数调用模式" class="headerlink" title="构造函数调用模式"></a>构造函数调用模式</h5><ul><li>用new关键字来新建一个函数对象的调用,this指向被绑定到构造函数的实例上</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ar fn = <span class="keyword">function</span> (status)&#123;</span><br><span class="line">    this.status = status;</span><br><span class="line">&#125;</span><br><span class="line">fn.prototype.get_status = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> this.status;</span><br><span class="line">&#125;</span><br><span class="line">var <span class="built_in">test</span> = new fn(<span class="string">'my status'</span>);</span><br><span class="line">alert(test.get_status);//my status,this指向<span class="built_in">test</span></span><br></pre></td></tr></table></figure><h5 id="apply-call调用模式"><a href="#apply-call调用模式" class="headerlink" title="apply/call调用模式"></a>apply/call调用模式</h5><ul><li>通过call和apply可以重新定义函数的执行环境，即this的指向</li><li>apply和call一样的用法，只不过apply第二个参数用数组进行传递</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> MyObject(name)&#123;</span><br><span class="line">    this.name=name ||<span class="string">'MyObject'</span>;</span><br><span class="line">    this.value=0;</span><br><span class="line">    this.increment=<span class="keyword">function</span>(num)&#123;</span><br><span class="line">        this.value += typeof(num) === <span class="string">'number'</span> ? num : 0;</span><br><span class="line">    &#125;;</span><br><span class="line">    this.toString=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">'[Object:'</span>+this.name+<span class="string">' &#123;value:'</span>+this.value+<span class="string">'&#125;]'</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    this.target=this;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getInfo</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> this.toString();</span><br><span class="line">&#125;</span><br><span class="line">var myObj=new MyObject();</span><br><span class="line">alert(getInfo.apply(myObj));//[Object:MyObject &#123;value:0&#125;],this指向myObj</span><br><span class="line">alert(getInfo.apply(window));//[object Window],this指向window</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;JavaScript函数有4种调用模式，分别是：函数直接执行模式、对象方法的调用模式、构造器的调用模式和call和apply调用模式。&lt;/li&gt;
&lt;li&gt;函数调用每种方式的不同在于this值的初始化。&lt;/li&gt;
&lt;li&gt;一般而言，在JavaScript中，this指向函数执行时的当前对象。&lt;/li&gt;
&lt;li&gt;this是保留关键字，不能修改this的值。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（三）</title>
    <link href="https://chongtianhong.github.io/2018/02/13/js3/"/>
    <id>https://chongtianhong.github.io/2018/02/13/js3/</id>
    <published>2018-02-13T13:17:10.000Z</published>
    <updated>2018-02-13T15:07:28.293Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JS事件驱动机制"><a href="#JS事件驱动机制" class="headerlink" title="JS事件驱动机制"></a>JS事件驱动机制</h3><ul><li>由鼠标或热键引发的一连串程序的动作，称之为事件驱动</li><li>对事件进行处理程序或函数，我们称之为事件处理程序<a id="more"></a></li></ul><h4 id="事件的分类"><a href="#事件的分类" class="headerlink" title="事件的分类"></a>事件的分类</h4><ul><li>鼠标事件：当用户在页面上用鼠标点击页面元素时，对应的dom节点会触发鼠标事件，主要有click、dblclick、mousedown、mouseout、mouseover、mousemove等。</li><li>键盘事件：当用户用键盘输入信息时，会触发键盘操作事件。主要包括keydown、keypress、keyup三个。</li><li>HTML事件：在HTML节点加载变更等相关的事件，比如window的onload、unload、abort、error，文本框select、change等。</li><li>其他事件：页面中一些特殊对象运行过程中产生的事件，比如xmlhttprequest对象的相关事件。</li></ul><h5 id="关于事件绑定"><a href="#关于事件绑定" class="headerlink" title="关于事件绑定"></a>关于事件绑定</h5><ol><li><p>直接和某个html控件绑定 比如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"刷新页面"</span> onclick=<span class="string">"test()"</span>/&gt;</span><br></pre></td></tr></table></figure></li><li><p>通过getElementById()获取到元素后，再绑定监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    document.getElementById(<span class="string">"but1"</span>).onclik=<span class="built_in">test</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>detachEvent与attachEvent，假设我们有一个投票系统，但是只能投一次票，需要解除绑定机制，非ie浏览器用的addEventListener/RemoveEventListener，代码实例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    document.getElementById(<span class="string">"but1"</span>).attachEvent(<span class="string">"onclick"</span>,<span class="built_in">test</span>);</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">test</span></span>()&#123;</span><br><span class="line">    window.alert(<span class="string">'you have one vote'</span>);</span><br><span class="line">    document.getElementById(<span class="string">"but1"</span>).detachEvent(<span class="string">"onclick"</span>,<span class="built_in">test</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"button"</span> id=<span class="string">"but1"</span> value=<span class="string">"vote"</span>/&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="DOM编程"><a href="#DOM编程" class="headerlink" title="DOM编程"></a>DOM编程</h3><ul><li>通过DOM编程，可以写出各种网页游戏</li><li>DOM编程也是ajax的重要基础</li><li>将HTML文档看成一颗DOM树,<code>&lt;html&gt;</code>标签为网页的根节点</li><li>HTML DOM把html文档呈现为带有元素、属性和文本的树结构(节点树)</li><li>HTML DOM对象只通过方法对元素进行动态的控制</li></ul><p><img src="/images/dom.png" width="500" alt="dom" style="border:none"></p><h3 id="BOM-浏览器对象模型"><a href="#BOM-浏览器对象模型" class="headerlink" title="BOM 浏览器对象模型"></a>BOM 浏览器对象模型</h3><h4 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h4><blockquote>confirm</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span>()&#123;</span><br><span class="line">    var res=window.confirm(<span class="string">"你要删除吗？"</span>);</span><br><span class="line">    <span class="keyword">if</span>(res)&#123;</span><br><span class="line">        window.alert(<span class="string">"删除"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        window.alert(<span class="string">"放弃删除"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote>setInterval()</blockquote><ul><li>该函数可以<strong>按照指定的周期</strong>（以毫秒计）来调用函数或计算表达式。</li></ul><blockquote>clearInrerval()</blockquote><ul><li>取消由 setInterval() 设置的 timeout。</li></ul><blockquote>setTimeout()</blockquote><ul><li>在指定的毫秒数后调用函数或计算表达式(只能调用一次)。</li></ul><blockquote>clearTimeout()</blockquote><ul><li>取消由 setTimeout() 方法设置的 timeout。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span>()&#123;</span><br><span class="line">window.alert(<span class="string">"hello"</span>);</span><br><span class="line">&#125;</span><br><span class="line">var mytimer=setTimeout(<span class="string">"test()"</span>,3000);</span><br><span class="line">clearTimeout(mytimer);</span><br></pre></td></tr></table></figure><blockquote>moveTo()/moveBy()</blockquote><ul><li>moveTo() 方法可把窗口的左上角移动到一个指定的坐标。</li><li>moveBy() 方法可相对窗口的当前坐标把它移动指定的像素。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">window.moveTo(100,100)//相对屏幕的左上角，移动到(100,100)</span><br><span class="line">window.moveBy(100,100)//相对当前这个窗口的左上角再移动(100,100)</span><br></pre></td></tr></table></figure><blockquote>resizeTo()/resizeBy()</blockquote><ul><li>resizeTo() 方法用于把窗口大小调整为指定的宽度和高度。</li><li>resizeBy() 方法用于根据指定的像素来调整窗口的大小。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resizeTo(100,100)//把窗口调整到100,100</span><br><span class="line">resizeBy(100,100)//把窗口再增加100，100</span><br></pre></td></tr></table></figure><h4 id="Screen-对象"><a href="#Screen-对象" class="headerlink" title="Screen 对象"></a>Screen 对象</h4><ul><li>Screen 对象包含有关客户端显示屏幕的信息。</li></ul><h4 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h4><ul><li>History 对象包含用户（在浏览器窗口中）访问过的 URL。</li><li>History 对象是 window 对象的一部分，可通过 window.history 属性对其进行访问。</li><li>back() 方法可加载历史列表中的前一个 URL（如果存在）。<ul><li>history.back() ~ history.go(-1)</li></ul></li><li>属性： history.length 返回浏览器历史列表中的 URL 数量。</li></ul><h4 id="Location-对象"><a href="#Location-对象" class="headerlink" title="Location 对象"></a>Location 对象</h4><ul><li>Location 对象包含有关当前 URL 的信息。</li><li>Location 对象是 Window 对象的一个部分，可通过window.location 属性来访问。</li><li>reload() 重新加载改文档。</li></ul><h4 id="Navigator对象"><a href="#Navigator对象" class="headerlink" title="Navigator对象"></a>Navigator对象</h4><ul><li>包含有关浏览器的信息</li></ul><h3 id="Document-对象"><a href="#Document-对象" class="headerlink" title="Document 对象"></a>Document 对象</h3><ul><li>定义：document 对象代表的整个html文档，因此可以去访问到文档中的各个对象（元素）</li></ul><blockquote>document.write</blockquote><ul><li>向文档输出文本或是js代码</li></ul><blockquote>document.writeln</blockquote><ul><li>这个是向文档输出文本或是js代码，与write不一样的地方是，writeln是换行输出。</li><li>但是对于浏览器来说，输出效果没什么区别</li></ul><blockquote>document.getElementById()</blockquote><ul><li>规定html文档中id号要唯一，如果不唯一，则只取第一个元素。</li><li>id不能用数字开头</li></ul><blockquote>document.getElementsByName()</blockquote><ul><li>通过html控件的名字返回<strong>对象集合</strong>(注意不是数组)</li></ul><blockquote>document.getElementsByTagName</blockquote><ul><li>通过html的标签名返回<strong>对象集合</strong>(注意不是数组)</li></ul><h4 id="如何动态的创建添加删除html元素"><a href="#如何动态的创建添加删除html元素" class="headerlink" title="如何动态的创建添加删除html元素"></a>如何动态的创建添加删除html元素</h4><ul><li>createElement()</li><li>appendChild()</li><li>removeChild() 必须获得父元素</li><li>parentNode 属性以 Node 对象的形式返回指定节点的父节点。</li><li>在dom编程中，一个html文档会被当做一个dom树来对待，dom会把所有的html元素映射成Node节点，于是就可以使用Node节点（对象）的属性和方法</li></ul><h4 id="body对象"><a href="#body对象" class="headerlink" title="body对象"></a>body对象</h4><ul><li>innerHTML 作为html来解析</li><li>innerText 当做文本来解析</li><li>appendChild()</li><li>removeChild()</li><li>getElementByTagName()</li><li>bgColor 该属性规定文档的背景颜色</li><li>onload 文档加载时触发</li><li>onunload 文档关闭时触发</li><li>onbeforeunload事件 文档关闭前触发</li><li>onScroll事件 用户拉动滚动条时触发</li><li>onselectstart事件 用户选中文档body体的内容时触发</li><li>body.clientWidth 网页可见区域宽，该属性包括内边距，但不包括垂直滚动条（如果有）、边框和外边距</li><li>body.clientHeight 网页可见区域高，该属性包括内边距，但不包括垂直滚动条（如果有）、边框和外边距</li><li>offsetWidth 网页可见区域宽(包括边线的宽)</li><li>offsetHeight 网页可见区域高(包括边线的高)</li></ul><h4 id="style对象"><a href="#style对象" class="headerlink" title="style对象"></a>style对象</h4><h4 id="forms-对象"><a href="#forms-对象" class="headerlink" title="forms 对象"></a>forms 对象</h4><ul><li>document.forms</li><li>length:返回大小</li><li>item(index):指定取出forms对象集合的第几个form对象</li><li>document.forms[i].value</li><li>document.forms.item[i].value</li></ul><h4 id="img-对象"><a href="#img-对象" class="headerlink" title="img 对象"></a>img 对象</h4><ul><li>onload()</li><li>onerror()</li></ul><h4 id="table-对象"><a href="#table-对象" class="headerlink" title="table 对象"></a>table 对象</h4><ul><li>rows 行</li><li>cells 列</li><li>deletRow() 删除一行</li><li>insertRow() insertCell() 插入行再在行中插入列</li><li>遍历一个table<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(var i=0;i&lt;mytab.rows.length;i++)&#123;</span><br><span class="line">//取出一行</span><br><span class="line">    var eachRow=mytab.rows[i];</span><br><span class="line">//对该行遍历</span><br><span class="line"><span class="keyword">for</span>(var j=0;j&lt;eachRow.cells.length;j++)&#123;</span><br><span class="line">    window.alert(eachRow.cells[j].innerText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JS事件驱动机制&quot;&gt;&lt;a href=&quot;#JS事件驱动机制&quot; class=&quot;headerlink&quot; title=&quot;JS事件驱动机制&quot;&gt;&lt;/a&gt;JS事件驱动机制&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;由鼠标或热键引发的一连串程序的动作，称之为事件驱动&lt;/li&gt;
&lt;li&gt;对事件进行处理程序或函数，我们称之为事件处理程序
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（二）</title>
    <link href="https://chongtianhong.github.io/2018/02/12/js2/"/>
    <id>https://chongtianhong.github.io/2018/02/12/js2/</id>
    <published>2018-02-12T07:37:37.000Z</published>
    <updated>2018-02-12T09:55:46.433Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>Javascript<strong>基于对象的三大特征</strong>和C++，Java面向对象的三大特征一样，即<strong>封装(encapsulation)</strong>、<strong>继承(inheritance)</strong>和<strong>多态(polymorphism)</strong>。</li><li>JavaScript中，<strong>函数内部</strong>可以直接<strong>读取全局变量</strong>；另一方面，若不使用闭包，在函数外部<strong>无法读取</strong>函数内的<strong>局部变量</strong>。</li><li>要实现从外部读取局部变量，可使用闭包，即在函数的内部再定义一个函数。（闭包就是能读取其他函数内部变量的函数，一个定义在函数内部的函数）</li><li>JavaScript中本身有提供一些可以直接使用的内部类。<a id="more"></a></li></ul><h4 id="Javascript基于对象的三大特征"><a href="#Javascript基于对象的三大特征" class="headerlink" title="Javascript基于对象的三大特征"></a>Javascript基于对象的三大特征</h4><ul><li>封装(encapsulation)</li><li>继承(inheritance)</li><li>多态(polymorphism)</li></ul><h5 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h5><ul><li><strong>封装</strong> 就是把 <em>抽象出来的数据</em> 和 <em>对数据的操作</em> 封装在一起，数据被保护在内部，程序的其它部分只有通过<strong>被授权的操作</strong>(成员方法)，才能对数据进行操作。</li><li>JS封装只有两种状态，一种是<strong>公开</strong>的，一种是<strong>私有</strong>的。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Person(name,agei,sal)&#123;</span><br><span class="line">    this.name=name;//公开属性</span><br><span class="line">    var age=agei;//私有属性</span><br><span class="line">    var salary=sal;//私有属性</span><br><span class="line">    //在类中如何定义公开方法（特权方法），私有方法（内部方法）</span><br><span class="line">    //如果我们希望操作私有的属性，则可用公开方法实现</span><br><span class="line">    this.show=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        window.alert(age+<span class="string">" "</span>+salary)</span><br><span class="line">    &#125;</span><br><span class="line">    //私有方法，可用访问对象的属性</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">show2</span></span>()&#123;</span><br><span class="line">        window.alert(age+<span class="string">" "</span>+salary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><strong>构造函数</strong>方式 与 <strong>原型</strong>方式给对象添加方法的区别：</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//1.通过构造函数方式给对象添加方法</span><br><span class="line"><span class="keyword">function</span> Dog(name)&#123;</span><br><span class="line">    this.name=name;</span><br><span class="line">    this.shout=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        window.alert(<span class="string">"小狗尖叫"</span>+this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var dog1=new Dog(<span class="string">"aa"</span>);</span><br><span class="line">var dog2=new Dog(<span class="string">"bb"</span>);</span><br><span class="line"><span class="keyword">if</span>(dog1.shout==dog2.shout)&#123;</span><br><span class="line">    window.alert(<span class="string">"相等"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    window.alert(<span class="string">"不相等"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//会输出“不相等”</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//2.通过原型方式给对象添加方法</span><br><span class="line"><span class="keyword">function</span> Dog(name)&#123;</span><br><span class="line">    this.name=name;    </span><br><span class="line">&#125;</span><br><span class="line">Dog.prototype.shout=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    window.alert(<span class="string">"小狗尖叫"</span>+this.name);</span><br><span class="line">&#125;</span><br><span class="line">var dog1=new Dog(<span class="string">"aa"</span>);</span><br><span class="line">var dog2=new Dog(<span class="string">"bb"</span>);</span><br><span class="line"><span class="keyword">if</span>(dog1.shout==dog2.shout)&#123;</span><br><span class="line">    window.alert(<span class="string">"相等"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    window.alert(<span class="string">"不相等"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//会输出“相等”</span><br></pre></td></tr></table></figure><ul><li>以上的两个例子说明通过<strong>构造函数</strong>来分配成员方法，给每个对象分配一份独立的代码。这样的弊端就是如果对象实例有很多，那函数的资源占用就会很大，而且有可能造成内存泄漏。而<strong>原型法</strong>是大家共享同一份代码，就不会有那种弊端。</li><li>因此，通过构造函数添加成员方法和通过原型法添加成员方法的区别：<br>1.通过原型法分配的函数是<strong>所有对象共享</strong>的；<br>2.通过原型法分配的属性是<strong>独立</strong>的；（如果你不修改属性，他们是共享）<br>3.如果希望所有的对象使用同一个函数，最好使用<strong>原型法</strong>添加方法，这样比较节省内存。</li></ul><blockquote>prototype可以给所有对象添加方法，但是这种方式，不能去访问类的私有变量和方法</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Person</span></span>()&#123;</span><br><span class="line">    this.name=<span class="string">"Cece"</span>; //公开</span><br><span class="line">    var age=18; //私有</span><br><span class="line">    this.abc=<span class="function"><span class="title">function</span></span>()&#123;    //公开</span><br><span class="line">        window.alert(<span class="string">"abc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">abc2</span></span>()&#123;        //私有</span><br><span class="line">        window.alert(<span class="string">"abc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.fun1=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    window.alert(this.name);//Cece</span><br><span class="line">    //window.alert(age);//Uncaught ReferenceError: age is not defined(…)</span><br><span class="line">    //abc2();           //Uncaught ReferenceError: abc2 is not defined(…)</span><br><span class="line">    this.abc();         //abc</span><br><span class="line">&#125;</span><br><span class="line">var p1=new Person();</span><br><span class="line">p1.fun1();</span><br></pre></td></tr></table></figure><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><ul><li>继承可以解决代码复用(冗余)。当多个类存在相同的属性(变量)和方法时，可以从这些类中抽象出父类，在父类中定义这些相同的属性和方法，所有的子类不需要重新定义这些属性和方法，只需要通过继承父类中的属性和方法。</li><li>JS中实现继承的方式：<ul><li>对象冒充</li><li>通过call或者apply实现</li><li>原型继承</li><li>混合继承（构造+原型）</li><li>多重继承</li></ul></li></ul><blockquote>对象冒充</blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> //1.把子类中共有的属性和方法抽取出，定义一个父类Stu </span><br><span class="line"><span class="keyword">function</span> Stu(name, age)&#123; </span><br><span class="line">    this.name = name; </span><br><span class="line">    this.age = age; </span><br><span class="line">    this.show = <span class="function"><span class="title">function</span></span>()&#123; </span><br><span class="line">        window.alert(this.name + <span class="string">" "</span> + this.age); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">function</span> MidStu(name, age) &#123; </span><br><span class="line">    this.stu = Stu; </span><br><span class="line">    // 通过对象冒充实现继承,这句话不能少,因为js是动态语言，如果你不执行，则不能实现继承效果</span><br><span class="line">    // 对象冒充,即获取那个类的所有成员，因此MidStu就有了父类Stu的成员 </span><br><span class="line">    this.stu(name, age); </span><br><span class="line">    //MidStu可以覆盖Stu父类的show方法</span><br><span class="line">    this.show=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        window.alert(<span class="string">"MidStu show();"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">function</span> Pupil(name, age) &#123; </span><br><span class="line">    this.stu = Stu; </span><br><span class="line">    // 通过对象冒充实现继承 </span><br><span class="line">    this.stu(name, age); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">var midStu = new MidStu(<span class="string">"zs"</span>, 13); </span><br><span class="line">midStu.show(); //MidStu自己的show方法</span><br><span class="line">var pupil = new Pupil(<span class="string">"ls"</span>, 10); </span><br><span class="line">pupil.show(); //父类Stu的show方法</span><br></pre></td></tr></table></figure><blockquote>通过call或者apply实现</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//把子类中共有的属性和方法抽取出，定义一个父类Stu </span><br><span class="line"><span class="keyword">function</span> Stu(name,age)&#123; </span><br><span class="line">    this.name=name; </span><br><span class="line">    this.age=age; </span><br><span class="line">    this.show=<span class="function"><span class="title">function</span></span>()&#123; </span><br><span class="line">        window.alert(this.name+<span class="string">"年龄是="</span>+this.age); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">//通过call或者apply来继承父类的属性的方法 </span><br><span class="line"><span class="keyword">function</span> MidStu(name,age)&#123; </span><br><span class="line">    //通过call修改了Stu构造函数的this指向,让它指向了调用者本身. </span><br><span class="line">    Stu.call(this,name,age); </span><br><span class="line">    //如果用apply实现，则可以 </span><br><span class="line">    //Stu.apply(this,[name,age]); //说明传入的参数是 数组 方式 </span><br><span class="line">    //可以写MidStu自己的方法. </span><br><span class="line">    this.pay=<span class="keyword">function</span>(fee)&#123; </span><br><span class="line">        window.alert(<span class="string">"你的学费是"</span>+fee*0.8); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">function</span> Pupil(name,age)&#123; </span><br><span class="line">    Stu.call(this,name,age);//当创建Pupil对象实例,Stu的构造函数会被执行,当执行后，Pupil对象就获取到从Stu封装的属性和方法 </span><br><span class="line">    //可以写Pupil自己的方法. </span><br><span class="line">    this.pay=<span class="keyword">function</span>(fee)&#123; </span><br><span class="line">        window.alert(<span class="string">"你的学费是"</span>+fee*0.5); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">//<span class="built_in">test</span> </span><br><span class="line">var midstu=new MidStu(<span class="string">"zs"</span>,15); </span><br><span class="line">var pupil=new Pupil(<span class="string">"ls"</span>,12); </span><br><span class="line">midstu.show(); </span><br><span class="line">midstu.pay(100); </span><br><span class="line">pupil.show(); </span><br><span class="line">pupil.pay(100);</span><br></pre></td></tr></table></figure><blockquote>混合继承（构造+原型）</blockquote><ul><li>混合继承是把多种继承方式一起使用，发挥各个优势，来实现各种复杂的应用。最常见的就是把构造函数和原型继承一起使用。做法是将<strong>需要独立的属性方法</strong>放入<strong>构造函数</strong>中，而<strong>可以共享的部分</strong>则放入<strong>原型</strong>中，这样做可以<strong>最大限度节省内存</strong>而又<strong>保留对象实例的独立性</strong>。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> A(x,y)&#123;  //属性写到构造函数中</span><br><span class="line">    this.x = x;  </span><br><span class="line">    this.y = y;  </span><br><span class="line">&#125;  </span><br><span class="line">A.prototype.add = <span class="function"><span class="title">function</span></span>()&#123;  //方法写到原型中</span><br><span class="line">    <span class="built_in">return</span> (this.x-0) + (this.y-0);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">function</span> B(x,y)&#123;  </span><br><span class="line">    A.call(this,x,y);  </span><br><span class="line">&#125;  </span><br><span class="line">B.prototype = new A();  </span><br><span class="line"></span><br><span class="line">// 测试  </span><br><span class="line">var b = new B(2,1);  </span><br><span class="line">console.log(b.x); // 2  </span><br><span class="line">console.log(b.add()); // 3</span><br></pre></td></tr></table></figure><ul><li>注意：<ol><li>把<strong>方法写在原型中</strong>比写在构造函数中<strong>消耗的内存更小</strong>，因为在内存中一个类的原型只有一个，写在原型中的行为可以被所有实例共享，实例化的时候并不会在实例的内存中再复制一份; 而<strong>写在构造函数中的方法</strong>，实例化的时候会在每个实例中再复制一份，所以<strong>消耗的内存更高</strong>。所以一般把<strong>属性</strong>写到<strong>构造函数</strong>中，而<strong>方法</strong>写到<strong>原型</strong>中。</li><li><strong>构造函数中定义的属性和方法</strong>要比原型中定义的属性和方法的<strong>优先级高</strong>，如果定义了同名称的属性和方法，<strong>构造函数</strong>中的将会<strong>覆盖原型</strong>中的。</li></ol></li></ul><h5 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h5><blockquote>JS的函数重载</blockquote><ul><li>函数重载是多态的基础，JS函数不支持重载(即，不可以通过参数的个数来决定调用哪个函数)，但是事实上JS函数是无态的，支持任意长度，类型的参数列表。</li><li><p>如果同时定义了多个<strong>同名函数</strong>，则以<strong>最后一个函数</strong>为准。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/*****************说明js不支持重载*****/</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Person</span></span>()&#123; </span><br><span class="line">    this.test1=<span class="keyword">function</span> (a,b)&#123; </span><br><span class="line">        window.alert(<span class="string">'function (a,b)'</span>);  </span><br><span class="line">    &#125; </span><br><span class="line">    this.test1=<span class="keyword">function</span> (a)&#123; </span><br><span class="line">        window.alert(<span class="string">'function (a)'</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">var p1=new Person(); </span><br><span class="line">//js中不支持重载. </span><br><span class="line">//但是这不会报错，js会默认是最后同名一个函数，可以看做是后面的把前面的覆盖了。 </span><br><span class="line">p1.test1(<span class="string">"a"</span>,<span class="string">"b"</span>); </span><br><span class="line">p1.test1(<span class="string">"a"</span>);</span><br></pre></td></tr></table></figure></li><li><p>js可通过判断参数的个数来实现重载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//js怎么实现重载.通过判断参数的个数来实现重载 </span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Person</span></span>()&#123; </span><br><span class="line">    this.test1=<span class="function"><span class="title">function</span></span> ()&#123; </span><br><span class="line">        <span class="keyword">if</span>(arguments.length==1)&#123; </span><br><span class="line">            this.show1(arguments[0]); </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arguments.length==2)&#123; </span><br><span class="line">            this.show2(arguments[0],arguments[1]); </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arguments.length==3)&#123; </span><br><span class="line">            this.show3(arguments[0],arguments[1],arguments[2]); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    this.show1=<span class="keyword">function</span>(a)&#123; </span><br><span class="line">        window.alert(<span class="string">"show1()被调用"</span>+a); </span><br><span class="line">    &#125; </span><br><span class="line">    this.show2=<span class="keyword">function</span>(a,b)&#123; </span><br><span class="line">        window.alert(<span class="string">"show2()被调用"</span>+<span class="string">"--"</span>+a+<span class="string">"--"</span>+b); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">function</span> show3(a,b,c)&#123; </span><br><span class="line">        window.alert(<span class="string">"show3()被调用"</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">var p1=new Person(); </span><br><span class="line">//js中不支持重载. </span><br><span class="line">p1.test1(<span class="string">"a"</span>,<span class="string">"b"</span>); </span><br><span class="line">p1.test1(<span class="string">"a"</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li>重写：子类可以重新写函数，来覆盖父类的某个方法 </li></ul><blockquote>多态</blockquote><ul><li>多态是指一个引用(类型)在不同情况下的多种状态。</li><li>也可以理解成：多态是指通过指向父类的引用，来调用在不同子类中实现的方法。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Master</span></span>()&#123;</span><br><span class="line">    //给动物喂食</span><br><span class="line">    this.feed=<span class="keyword">function</span>(animal,food)&#123;</span><br><span class="line">    document.write(<span class="string">"主人给"</span>+animal.name+<span class="string">"喂"</span>+food.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//写食物</span><br><span class="line"><span class="keyword">function</span> Food(name)&#123;</span><br><span class="line">    this.name=name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> Fish(name)&#123;</span><br><span class="line">    this.food=Food;//对象冒充</span><br><span class="line">    this.food(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> Bone(name)&#123;</span><br><span class="line">    this.food=Food;//对象冒充</span><br><span class="line">    this.food(name);</span><br><span class="line">&#125;</span><br><span class="line">//动物</span><br><span class="line"><span class="keyword">function</span> Animal(name)&#123;</span><br><span class="line">    this.name=name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> Cat(name)&#123;</span><br><span class="line">    this.animal=Animal;//对象冒充</span><br><span class="line">    this.animal(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> Dog(name)&#123;</span><br><span class="line">    this.animal=Animal;//对象冒充</span><br><span class="line">    this.animal(name);</span><br><span class="line">&#125;</span><br><span class="line">var cat=new Cat(<span class="string">"小猫咪"</span>);</span><br><span class="line">var dog=new Dog(<span class="string">"小狗"</span>);</span><br><span class="line">var fish=new Fish(<span class="string">"小鱼"</span>);</span><br><span class="line">var bone=new Bone(<span class="string">"骨头"</span>)</span><br><span class="line">var bone=new Master();</span><br><span class="line">master.feed(cat,fish);</span><br></pre></td></tr></table></figure></li></ul><h4 id="闭包-closure"><a href="#闭包-closure" class="headerlink" title="闭包(closure)"></a>闭包(closure)</h4><ul><li><p><strong>闭包</strong>可以用在许多地方。它的最大用处有两个：</p><ul><li>可以<strong>读取函数内部的变量</strong></li><li>让这些<strong>变量的值始终保持在内存</strong>中<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">f1</span></span>()&#123;</span><br><span class="line">    var n=999;</span><br><span class="line">    nAdd=<span class="function"><span class="title">function</span></span>()&#123;//全局函数</span><br><span class="line">        n+=1</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">f2</span></span>()&#123;</span><br><span class="line">　　　　alert(n);</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="built_in">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line">　　var result=f1();//闭包f2函数</span><br><span class="line">　　result(); // 999</span><br><span class="line">　　nAdd();</span><br><span class="line">　　result(); // 1000</span><br></pre></td></tr></table></figure></li></ul><p>可见，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。</p></li><li><strong>有权访问另一个函数作用域内变量的函数</strong>都是<strong>闭包</strong>。一般是定义在外层函数中的内层函数。</li><li>使用闭包的原因：局部变量无法共享和长久的保存，而全局变量可能造成变量污染，所以我们希望有一种机制既可以长久的保存变量又不会造成全局污染。</li><li>下面代码有助于更好地了解<strong>闭包机制</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//代码片段一</span><br><span class="line">var name = <span class="string">"The Window"</span>;</span><br><span class="line">var object = &#123;</span><br><span class="line">    name : <span class="string">"My Object"</span>,</span><br><span class="line">    getNameFunc : <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">            <span class="built_in">return</span> this.name;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">alert(object.getNameFunc()());//The Window</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//代码片段二</span><br><span class="line">var name = <span class="string">"The Window"</span>;</span><br><span class="line">var object = &#123;</span><br><span class="line">    name : <span class="string">"My Object"</span>,</span><br><span class="line">    getNameFunc : <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        var that = this;</span><br><span class="line">        <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">            <span class="built_in">return</span> that.name;</span><br><span class="line">            &#125;;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;;</span><br><span class="line">alert(object.getNameFunc()());//My Object</span><br></pre></td></tr></table></figure><h4 id="JavaScript的内部类"><a href="#JavaScript的内部类" class="headerlink" title="JavaScript的内部类"></a>JavaScript的内部类</h4><p>JavaScript中本身有提供一些可以直接使用的类，这种类就是内部类，主要有：<br>Object/Array/Math/Boolean/String/<font color="red">RegExp</font>/Date/Number</p><blockquote>分类:</blockquote><ul><li><p>静态类：类名.属性/方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.alert(Math.abs(-12));</span><br></pre></td></tr></table></figure></li><li><p>动态类：使用var对象=new 动态类（）对象.属性/方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var nowdata=new Data();</span><br><span class="line">window.alert(nowdate.toLocaleString());</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Javascript&lt;strong&gt;基于对象的三大特征&lt;/strong&gt;和C++，Java面向对象的三大特征一样，即&lt;strong&gt;封装(encapsulation)&lt;/strong&gt;、&lt;strong&gt;继承(inheritance)&lt;/strong&gt;和&lt;strong&gt;多态(polymorphism)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;JavaScript中，&lt;strong&gt;函数内部&lt;/strong&gt;可以直接&lt;strong&gt;读取全局变量&lt;/strong&gt;；另一方面，若不使用闭包，在函数外部&lt;strong&gt;无法读取&lt;/strong&gt;函数内的&lt;strong&gt;局部变量&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;要实现从外部读取局部变量，可使用闭包，即在函数的内部再定义一个函数。（闭包就是能读取其他函数内部变量的函数，一个定义在函数内部的函数）&lt;/li&gt;
&lt;li&gt;JavaScript中本身有提供一些可以直接使用的内部类。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（一）</title>
    <link href="https://chongtianhong.github.io/2018/02/11/js1/"/>
    <id>https://chongtianhong.github.io/2018/02/11/js1/</id>
    <published>2018-02-11T02:11:09.000Z</published>
    <updated>2018-02-11T08:43:09.010Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><div class="note danger">HTML定义了网页的内容<br>CSS描述了网页的布局<br>JavaScript给定了网页的行为<br></div><ul><li><strong>脚本语言</strong> 是用于web开发的脚本语言（往往不能独立使用，和html/jsp/php/asp/asp.net 配合使用、有自己的变量、函数、控制语句，顺序、分支、循环）。<a id="more"></a></li><li><strong>脚本语言</strong>即解释性语言，即在执行时候，直接对源码进行执行。</li><li><strong>JavaScript 是脚本语言</strong>。轻量级、可插入HTML页面的任意位置、在客户端运行、由现代浏览器执行(Node.js可运行在服务端)。</li><li>因为js是由<strong>浏览器</strong>来执行的，因此这不同类型的浏览器可能对js的支持不一样。</li><li>通过使用<code>&lt;script&gt;</code>标签可在HTML页面中引入js，<code>&lt;script&gt;</code>和<code>&lt;/script&gt;</code>会告诉js在何时开始和结束。</li><li>在一个html文件中可以出现多对<code>&lt;script&gt;</code>片段，浏览器会按照先后顺序<strong>依次执行</strong>。</li><li>js中的变量的数据类型是<strong>由js引擎</strong>决定的。</li><li>js严格<strong>区分大小写</strong>（标记语言不区分）。</li></ul><h4 id="js命名规范"><a href="#js命名规范" class="headerlink" title="js命名规范"></a>js命名规范</h4><ul><li>使用大小写字母、数字、_、$可以命名；</li><li>不能以数字开头；</li><li>不能使用js的关键字/保留字；</li><li>区分大小写；</li><li>单行注释使用 //，多行注释使用 /**/。</li></ul><h5 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h5><ul><li><code>window.prompt</code> 请输入值对话框；</li><li><code>parseFloat()</code>、<code>parseInt()</code> 转换成浮点数、整数；</li><li><code>a++</code> 先判断再++；</li><li><code>++a</code> 先++再判断；</li><li>逻辑运算中，0 、””、 flase、 null、 undefined、 NaN均表示<code>flase</code>；<br>js中非0的数都为<code>True</code>；</li><li>|| 返回第一个不为<code>flase</code>那个值（对象亦可），或者是返回最后一个值（如果全部是<code>flase</code>的话）。</li></ul><h5 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h5><blockquote>顺序控制</blockquote><ul><li>对于编程而言，不控制其流程就是顺序执行。</li></ul><blockquote>分支控制</blockquote><ul><li><p>单分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">//执行语句；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>多分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式1)&#123;</span><br><span class="line">//执行</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表示式2)&#123;</span><br><span class="line">//执行</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表示式)&#123;//可以有多个<span class="keyword">else</span> <span class="keyword">if</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;//可以没有</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>switch</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">switch(表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 常量1：</span><br><span class="line">//执行语句；</span><br><span class="line"><span class="built_in">break</span>；//作用是跳出整个switch</span><br><span class="line"><span class="keyword">case</span> 常量2：</span><br><span class="line">//执行语句；</span><br><span class="line"><span class="built_in">break</span>；</span><br><span class="line">……</span><br><span class="line">default：</span><br><span class="line">//执行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>数据类型可以是js支持的任何类型（<strong>数组</strong>和<strong>对象</strong>除外）。</li><li>case后面的数据类型也可以任意（<strong>数组</strong>和<strong>对象</strong>除外）。</li><li>break的作用是跳出整个switch。</li><li>如果没有匹配的则执行default。</li></ul><blockquote>循环控制</blockquote><ul><li><p>for循环基本结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(循环初值; 循环条件; 步长)&#123;</span><br><span class="line">语句;//循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>while循环</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件表达式)&#123;</span><br><span class="line">//执行语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>do while</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">语句；//循环体</span><br><span class="line">&#125;<span class="keyword">while</span>(循环条件);</span><br></pre></td></tr></table></figure></li></ul><h3 id="js函数"><a href="#js函数" class="headerlink" title="js函数"></a>js函数</h3><ul><li>函数是为完成某一功能的代码（语句，指令）的集合，当调用该函数时，会执行函数内的代码。</li><li>基本语法<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(参数列表)&#123;</span><br><span class="line">        //执行代码</span><br><span class="line">     renturn 值;//可以选择，实现函数将值返回到调用它的地方</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>一个程序中有可能具有相同名称的局部变量和全局变量，在这种情况下，局部变量会优先于全局变量。</li><li>函数可以通过声明定义（使用关键字function），不是一个可执行语句，所以不以分号结束（函数声明后不会立即执行，会在我们需要的时候调用执行）。</li><li>函数也可以通过一个表达式定义（var myvar=函数名），函数存储在变量中，函数表达式是一个执行语句，以分号结尾。</li><li>函数声明后不会立即执行，会在我们需要的时候调用执行。</li><li>提升应用在变量的声明（变量初始化不提升）与函数的声明（函数表达式不提升）。<ul><li>提升是JavaScript默认将当前作用域提升到前面的行为，因此函数和变量可以在声明之前调用。</li></ul></li><li>函数是对象，具有属性和方法。<ul><li><code>arguments.length</code>属性返回函数调用过程中接收到的参数个数。</li><li><code>toString()</code>方法将函数作为一个字符串返回（调用方法：fuctionName.toString())。</li></ul></li><li>若函数定义作为对象的属性，称之为<strong>对象方法</strong>。</li><li><p>函数如果用于创建新的对象，称之为<strong>对象的构造函数</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> myFunction(name)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">var myFun = new myFunction(<span class="string">'John'</span>);</span><br></pre></td></tr></table></figure></li><li><p>关于接收函数返回值的问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var myvar=<span class="built_in">test</span>(<span class="string">'abc'</span>)；</span><br><span class="line">//如果<span class="built_in">test</span>函数没有返回值，则返回的就是undefined；如果有返回值，则将返回值赋给myvar</span><br><span class="line">window.alert(myvar);</span><br></pre></td></tr></table></figure></li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li><p>创建数组有三种方式:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//第一种方式：基本方法</span><br><span class="line">var arr=[元素值, 元素值, …..];</span><br><span class="line">//第二种方式：先定义再赋值</span><br><span class="line">var arr = new Array();</span><br><span class="line">arr[0] = 元素值;</span><br><span class="line">arr[1] = 元素值;</span><br><span class="line">...</span><br><span class="line">//第三种方式：定义数组时同时赋值</span><br><span class="line">var arr = new Array(元素值, 元素值,...);</span><br></pre></td></tr></table></figure></li><li><p>元素的值可以是任意类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var arr=[4,56,<span class="string">"hello world"</span>,<span class="literal">true</span>];</span><br></pre></td></tr></table></figure></li></ul><ul><li>js的数组是动态增长的。</li><li>JavaScript不支持真正的多维数组，实现多维数组的方法：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var t = new Array(5);</span><br><span class="line"><span class="keyword">for</span>(var i=0; i&lt;t.length; i++)&#123;</span><br><span class="line">    t[i] = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>对字符串分割，生成一个字符串数组(split函数)。</li><li>数组有多种方法：sort、push、pop、unshift、shift、join、reverse、concat、slice、splice、toString等。</li></ul><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var bubbleSort = <span class="keyword">function</span>(arr)&#123;</span><br><span class="line">    var len = arr.length;</span><br><span class="line">    <span class="keyword">for</span>(var i = 0; i &lt; len - 1; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(var j = 0; j &lt; len - i - 1; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j+1]&#123;</span><br><span class="line">                var temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+1];</span><br><span class="line">                arr[j+1] = temp;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//快速排序算法</span><br><span class="line">var quickSort = <span class="keyword">function</span>(arr)&#123;</span><br><span class="line"><span class="keyword">if</span> (arr.length &lt;= 1)&#123;</span><br><span class="line"><span class="built_in">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line">var pivotIndex = Math.floor(arr.length / 2);</span><br><span class="line">var pivot = arr.splice(pivotIndex, 1)[0];</span><br><span class="line">var left = [];</span><br><span class="line">var right = [];</span><br><span class="line"><span class="keyword">for</span>(var i = 0; i&lt; arr.length; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &lt; pivot)&#123;</span><br><span class="line">left.push(arr[i]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">right.push(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> quickSort(left).concat([pivot], quickSort(right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="js面向（基于）对象编程"><a href="#js面向（基于）对象编程" class="headerlink" title="js面向（基于）对象编程"></a>js面向（基于）对象编程</h3><ul><li>js中没有类class，但是它取了新的名字叫原型对象，因此类等同于原型对象。</li><li>js中的对象属性可以动态的添加。</li><li>属性没有限制。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Cat</span></span>()&#123;//函数</span><br><span class="line">&#125;</span><br><span class="line">var cat1 = new.Cat();//对象</span><br><span class="line">cat1.name = <span class="string">"xiaobai"</span>;</span><br><span class="line">cat1.age = <span class="string">"3"</span>;</span><br><span class="line">cat1.color = <span class="string">"write"</span>;</span><br></pre></td></tr></table></figure></li></ul><blockquote>类（原型对象）和对象的区别和联系</blockquote><ul><li>类是抽象的，概念代表一类事物。</li><li>对象是具体的，代表一个实体。</li><li>对象是以类（原型对象）为模板创建的。</li></ul><blockquote>创建对象的方式有五种</blockquote><ul><li>工厂方法一使用new object创建对象并添加相关属性。</li><li>使用构造函数来定义类（原型对象）。</li><li>使用prototype。</li><li>构造函数及原型混合方式。</li><li>动态原型方式。</li></ul><h3 id="使用构造函数来定义类（原型对象）"><a href="#使用构造函数来定义类（原型对象）" class="headerlink" title="使用构造函数来定义类（原型对象）"></a>使用构造函数来定义类（原型对象）</h3><blockquote>访问对象的属性的方法有两种：</blockquote><ul><li>普通方式：对象名.属性名。</li><li>动态访问：对象名[“属性名”]。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">person</span></span>()&#123;&#125;;</span><br><span class="line">var p1 = new person();</span><br><span class="line">p1.name = <span class="string">"John"</span>；</span><br><span class="line">window.alert(p1.name);//John</span><br><span class="line">var val = <span class="string">"na"</span>+<span class="string">"me"</span>;</span><br><span class="line">window.alert(p1[val]);//John</span><br></pre></td></tr></table></figure></li></ul><blockquote>删除对象的属性</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">delete 对象名.属性名//立即释放对象的属性空间</span><br><span class="line">//或者</span><br><span class="line">对象名.属性名 = null;</span><br></pre></td></tr></table></figure><blockquote>this</blockquote><ul><li>this只能在类定义的内部使用，不能在外部使用。</li><li><blockquote>对象-成员函数（方法）</blockquote></li></ul><blockquote>给对象添加方法有两种方法</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//第一种方法</span><br><span class="line"><span class="keyword">function</span> 类名()&#123;//构造函数</span><br><span class="line"> this.属性；</span><br><span class="line">&#125;</span><br><span class="line">var 对象名 = new 类名()；</span><br><span class="line"><span class="keyword">function</span> 函数名()&#123;</span><br><span class="line">//执行</span><br><span class="line">&#125;</span><br><span class="line">对象名.属性名 = 函数名；</span><br><span class="line">//这样就相当于把函数赋给 对象名.属性名，此时这个属性名就表示一个函数。</span><br><span class="line">对象名.属性名();//调用函数</span><br><span class="line"></span><br><span class="line">//或</span><br><span class="line">对象名.属性名 = <span class="keyword">function</span>(参数列表)&#123;</span><br><span class="line">//代码</span><br><span class="line">&#125;；</span><br><span class="line"> 调用</span><br><span class="line"> 对象名.属性名(实际参数)；</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">前面的方法有一个问题：</span><br><span class="line">就是每个对象独占函数代码。这样若对象很多，则会影响效率.</span><br><span class="line">js设计者，给我们提供另一个方法:</span><br><span class="line">原型(prototype)法：多个对象可以共享函数代码</span><br><span class="line">*/</span><br><span class="line">//第二种方法</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Dog</span></span>()&#123;</span><br><span class="line">&#125;</span><br><span class="line">var dog1 = new Dog();</span><br><span class="line">//使用prototype类去绑定一个函数给shout</span><br><span class="line">Dog.prototype.shout = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">window.alert(<span class="string">"小狗"</span>);</span><br><span class="line">&#125;</span><br><span class="line">dog1.shout();</span><br><span class="line">var dog2 = new Dog();</span><br><span class="line">dog2.shout();</span><br></pre></td></tr></table></figure><blockquote>== 与 === 的比较</blockquote><ul><li>对于string,number等基础类型，==和===是有区别的：<ul><li>不同类型间比较，==比较”转化成同一类型后的值”后，看”值”是否相等；===如果类型不同，其结果就是不等。</li><li>同类型比较，直接进行”值”比较，两者结果一样。</li></ul></li><li>对于Array,Object等高级类型，==和===是没有区别的：<br>进行”指针地址”比较，地址相同则相等。</li></ul><h3 id="对象-object类"><a href="#对象-object类" class="headerlink" title="对象 object类"></a>对象 object类</h3><blockquote>构造函数</blockquote><ul><li>基本用法<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> constrFun(参数列表)&#123;</span><br><span class="line">    this.属性 = 参数值；</span><br><span class="line">&#125;</span><br><span class="line">var 对象名 = new constrFun(参数列表值);</span><br></pre></td></tr></table></figure></li></ul><blockquote>直接创建对象</blockquote><ul><li>如果一个对象比较简单，我们可以直接创建。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var dog = &#123;</span><br><span class="line">    name:<span class="string">'小狗'</span>,</span><br><span class="line">    age:8,</span><br><span class="line">    fun1:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        window.alert(<span class="string">'hello,world'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><blockquote>遍历对象属性</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (var key <span class="keyword">in</span> History)&#123;//History为对象</span><br><span class="line">    console.log(key + <span class="string">":"</span> + History[key] + <span class="string">"&lt;/br&gt;"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h4&gt;&lt;div class=&quot;note danger&quot;&gt;HTML定义了网页的内容&lt;br&gt;CSS描述了网页的布局&lt;br&gt;JavaScript给定了网页的行为&lt;br&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;脚本语言&lt;/strong&gt; 是用于web开发的脚本语言（往往不能独立使用，和html/jsp/php/asp/asp.net 配合使用、有自己的变量、函数、控制语句，顺序、分支、循环）。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>新的开始</title>
    <link href="https://chongtianhong.github.io/2018/02/10/start/"/>
    <id>https://chongtianhong.github.io/2018/02/10/start/</id>
    <published>2018-02-10T15:14:45.000Z</published>
    <updated>2018-02-10T17:47:09.298Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/Nepal2.jpg" width="600" alt="Nepal"><br>终于迎来假期，于是有时间可以开始搭建一直以来都想做的博客，经过一段时间的折腾，终于用 Hexo + GitHub 搭建起了一个属于自己的博客站点，第一时间边学边写，弄出了这第一篇博客，心里甚是欢喜，那就写篇随笔纪念一下吧。<br><a id="more"></a></p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>一直以来都不是一个擅长记录的人，而这个博客，对我来说是一个新的开始，也是我前端道路上的一个重要的实践。<br><br>在偶然的机会下接触前端，发现自己对于这一块特别感兴趣，并决定继续深入学习前端，我开始意识到是时候开始经营一个属于自己的技术博客。<br><br>虽然现在博客的功能还不算特别完善，但我会通过不断积累，一步一步地把这个以 <strong><em>技术交流</em></strong> 为主的博客经营好，尝试将每天学习遇到的一些问题或者是一些学习的心得记录在这里，也希望能通过这种方式和各位技术大牛进行交流。</p><h2 id="Why-amp-How-学习前端"><a href="#Why-amp-How-学习前端" class="headerlink" title="Why &amp; How 学习前端"></a>Why &amp; How 学习前端</h2><p>从2017年6月份忙完了科研论文开始，就开始对自己的职业规划进行考虑。一直以来，都想找到自己的定位，学一门让自己感兴趣的技术。机缘巧合下，听了前端的公开课，觉得这个东西很有趣，做完马上就能看到效果，于是决定学习前端。<br><br>随着深入学习，听<strong>公开课、看教程、看博客</strong>等，发现前端并不仅仅是做特效，越来越觉得这项技术深深地把我吸引。然而，自学了4个月前端，感觉进展有点缓慢，身处学校科研圣地，身边也没有前端前辈可以请教，说实话，心里挺着急。接下来的学期就是实习招聘季，甚至自己的专业与前端并不对口，如果实践经历太少，很难有竞争优势。于是决心在秋季学期，要找到一份关于前端的实习，能够上手去做一些项目，将理论和实践结合起来。</p><h2 id="关于实习"><a href="#关于实习" class="headerlink" title="关于实习"></a>关于实习</h2><p>很多次告诉自己<strong>实习经历真的很重要</strong>，然而对于是否投简历，在什么时间投总是犹豫不决。一是怕自己学的时间太短，能力不够，企业不想要；二是怕不让去实习的导师“查岗”。<br><br>在犹豫中继续自学前端，到11月中旬，终于勇敢地投出了简历。很幸运，去了一家我想去的公司实习，实习的导师也很强。在公司学到了挺多，实习跟自学真的节奏很不一样。我会好好加油，在实习中快速成长，为项目组做出自己的贡献。</p><div class="note info">机会留给有准备的人，越努力，越幸运！</div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/Nepal2.jpg&quot; width=&quot;600&quot; alt=&quot;Nepal&quot;&gt;&lt;br&gt;终于迎来假期，于是有时间可以开始搭建一直以来都想做的博客，经过一段时间的折腾，终于用 Hexo + GitHub 搭建起了一个属于自己的博客站点，第一时间边学边写，弄出了这第一篇博客，心里甚是欢喜，那就写篇随笔纪念一下吧。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://chongtianhong.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://chongtianhong.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>

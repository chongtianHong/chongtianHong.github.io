<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ice&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/c972cec44268ea709ae89f880845ea12</icon>
  <subtitle>知耻而后勇</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chongtianhong.github.io/"/>
  <updated>2018-07-17T14:40:20.061Z</updated>
  <id>https://chongtianhong.github.io/</id>
  
  <author>
    <name>Xiaobing Hong</name>
    <email>450707109@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Promise、Generator及async的笔记整理</title>
    <link href="https://chongtianhong.github.io/2018/07/17/asyncProgram/"/>
    <id>https://chongtianhong.github.io/2018/07/17/asyncProgram/</id>
    <published>2018-07-17T01:56:30.000Z</published>
    <updated>2018-07-17T14:40:20.061Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>ES6诞生以前，异步编程的方法，大概有如下四种：<strong>回调函数</strong>、<strong>事件监听</strong>、<strong>发布/订阅</strong>、<strong>Promise对象</strong>；</li><li>ES6中，引入了<strong>Generator函数</strong>；</li><li>ES7中，<strong>async</strong>更是将异步编程带入了一个全新的阶段。<!-- what's more --></li></ul><h4 id="Promise对象"><a href="#Promise对象" class="headerlink" title="Promise对象"></a>Promise对象</h4><ul><li>Promise，就是一个对象，用来<strong>传递异步操作的消息</strong>，避免了层层嵌套的回调函数。它代表了某个未来才会知道结果的事件（通常是一个异步操作），并且这个事件提供统一的API，可供进一步处理。<br>（1）对象的状态不受外界影响。有三种状态：<strong>Pending（进行中）</strong>、<strong>Resolved（已完成，又称Fulfilled）</strong>和<strong>Rejected（已失败）</strong>。<br>（2）一旦<strong>状态改变，就不会再变</strong>，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：<strong>从Pending变为Resolve</strong>d和<strong>从Pending变为Rejected</strong>。只要这两种情况发生，<strong>状态</strong>就<strong>凝固</strong>了，<strong>不会再变</strong>了，会一直保持这个结果。</li></ul><blockquote>生成Promise对象</blockquote><ul><li><p>可通过new Promise来生成Promise对象：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var promise = new Promise(<span class="keyword">function</span>(resolve, reject) &#123;</span><br><span class="line">  // 异步操作的代码</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (/* 异步操作成功 */)&#123;</span><br><span class="line">    resolve(value)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由JavaScript引擎提供，不用自己部署。</p></li><li>resolve会将Promise对象的状态从pending变为resolved，reject则是将Promise对象的状态从pending变为rejected。</li><li>Promise构造函数接受一个函数后会立即执行这个函数：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var promise = new Promise(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    console.log(<span class="string">'Hello World'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">// Hello World</span><br></pre></td></tr></table></figure></li></ul><blockquote>then和catch回调</blockquote><ul><li><p>Promise对象生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。<strong>then方法可以接受两个回调函数作为参数</strong>。</p><ul><li>第一个回调函数是Promise对象的状态变为resolved时调用，称之为成功回调。成功回调接收异步操作成功的结果为参数。</li><li>第二个回调函数是可选的，是Promise对象的状态变为rejected时调用，称之为失败回调。失败回调接收异步操作失败报出的错误作为参数。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var promise = new Promise(<span class="keyword">function</span> (resolve, reject) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        resolve(<span class="string">'成功'</span>)</span><br><span class="line">    &#125;, 3000)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(<span class="keyword">function</span> (data)&#123;</span><br><span class="line">    console.log(data)</span><br><span class="line">&#125;)</span><br><span class="line">// 3s后打印<span class="string">'成功'</span></span><br></pre></td></tr></table></figure></li><li><p>catch方法是then(null, rejection)的别名，用于指定发生错误时的回调函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var promise = new Promise(<span class="keyword">function</span> (resolve, reject) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        reject(<span class="string">'失败'</span>)</span><br><span class="line">    &#125;, 3000)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.catch(<span class="keyword">function</span> (data)&#123;</span><br><span class="line">    console.log(data)</span><br><span class="line">&#125;)</span><br><span class="line">// 3s后打印<span class="string">'失败'</span></span><br></pre></td></tr></table></figure></li></ul><blockquote>Promise.all()</blockquote><ul><li><p>Promise.all方法用于将多个Promise实例，包装成一个新的Promise实例。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var p = Promise.all([p1, p2, p3])</span><br></pre></td></tr></table></figure></li><li><p>上面代码中，Promise.all方法接受一个数组作为参数，p1、p2、p3都是Promise对象的实例，如果不是，就会先调用下面讲到的Promise.resolve方法，将参数转为Promise实例，再进一步处理。（Promise.all方法的参数可以不是数组，但<strong>必须具有Iterator接口</strong>，且<strong>返回的每个成员都是Promise实例</strong>。）</p></li><li>p的状态由p1、p2、p3决定，分成两种情况:<br>（1）只有p1、p2、p3的状态<strong>都变成resolved</strong>，p的状态才会变成resolved，此时<strong>p1、p2、p3的返回值组成一个数组(按数组元素的顺序)，传递给p的回调函数</strong>。<br>（2）只要p1、p2、p3之中<strong>有一个被Rejected，p的状态就变成Rejected</strong>，此时<strong>第一个被reject的实例的返回值，会传递给p的回调函数</strong>。</li><li>Promise.all获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的。这带来了一个绝大的好处：在前端开发请求数据的过程中，偶尔会遇到<strong>发送多个请求并根据请求顺序获取和使用数据的场景</strong>，使用Promise.all毫无疑问可以解决这个问题。</li></ul><blockquote>Promise.race()</blockquote><ul><li>与Promise.all()类似，不过是只要有一个Promise实例先改变了状态，p的状态就是先改变状态的Promise实例的状态，传递给回调函数的结果也是它的结果。所以很形象地叫做赛跑。</li></ul><blockquote>Promise.resolve()和Promise.reject()</blockquote><ul><li><p>有时需要将现有对象转为Promise对象，可以使用这两个方法。</p></li><li><p>Promise的缺点：</p><ul><li>无法取消Promise，<strong>一旦新建则立即执行</strong>，<strong>无法中途取消</strong>。</li><li>如果不设置catch回调函数，Promise内部抛出的错误，不会反映到外部。</li><li>当处于Pending状态时，<strong>无法得知目前进展到哪一个阶段</strong>（刚刚开始还是即将完成）。</li></ul></li></ul><h4 id="Generator函数"><a href="#Generator函数" class="headerlink" title="Generator函数"></a>Generator函数</h4><ul><li>从计算机角度看，生成器是一种类协程或半协程，它提供了一种可以<strong>通过特定语句或方法使其执行对象暂停</strong>的功能。 </li><li>Generator函数，<strong>返回</strong>一个部署了Iterator接口的<strong>遍历器对象</strong>，用来<strong>操作内部指针</strong>。以后，每次调用遍历器对象的next方法，就会<strong>返回</strong>一个有着<strong>value和done两个属性</strong>的<strong>对象</strong>。<ul><li><strong>value属性</strong>表示<strong>当前的内部状态的值</strong>，是yield语句后面那个表达式的值；</li><li><strong>done属性</strong>是一个<strong>布尔值</strong>，表示<strong>是否遍历结束</strong>。</li></ul></li></ul><blockquote>yield [[expression]]</blockquote><ul><li>yield 关键字<strong>使生成器函数暂停执行</strong>，并<strong>返回</strong>跟在它后面的<strong>表达式的当前值</strong>。可以把它想成是<strong>return关键字</strong>的一个<strong>基于生成器的版本</strong>，但其并非退出函数体，而是<strong>切出当前函数的运行时</strong>，与此同时可以<strong>将一个值带到主线程中</strong>。</li><li><strong>yield语句</strong>是<strong>暂停执行</strong>的标记，而<strong>next方法</strong>可以<strong>恢复执行</strong>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="function"><span class="title">gen</span></span>()&#123;</span><br><span class="line">  yield <span class="string">'hello'</span>;</span><br><span class="line">  yield <span class="string">'world'</span>;</span><br><span class="line">  <span class="built_in">return</span> <span class="string">'!'</span>;</span><br><span class="line">&#125;</span><br><span class="line">var g = gen();</span><br><span class="line">g.next(); // &#123;value: <span class="string">'hello'</span>, <span class="keyword">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">g.next(); // &#123;value: <span class="string">'world'</span>, <span class="keyword">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">g.next(); // &#123;value: <span class="string">'!'</span>, <span class="keyword">done</span>: <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><p>（1）遇到yield语句，就<strong>暂停执行</strong>后面语句的操作，并<strong>将紧跟在yield后面的表达式的值</strong>，<strong>作为返回的对象的value属性值</strong>；<br>（2）下一次<strong>调用next方法</strong>时，再<strong>继续往下执行</strong>，<strong>直到遇到下一个yield语句</strong>；<br>（3）如果<strong>没有再遇到新的yield语句</strong>，就一直<strong>运行到函数结束</strong>，<strong>直到return语句为止</strong>，并<strong>将return语句后面的表达式的值，作为返回的对象的value属性值</strong>；<br>（4）如果该函数<strong>没有return语句</strong>，则<strong>返回的对象的value属性值为undefined</strong>。 </p><ul><li><p>需要注意的是，<strong>yield语句后面的表达式，只有当调用next方法、内部指针指向该语句时才会执行</strong>，因此等于为JavaScript提供了手动的<strong>“惰性求值”（Lazy Evaluation）</strong>的语法功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="function"><span class="title">gen</span></span>() &#123;</span><br><span class="line">  yield 123 + 456;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>上述示例中，<strong>yield后面的表达式123 + 456，不会立即求值</strong>，只会<strong>在next方法将指针移到这一句时，才会求值</strong>。</p></li><li>Generator函数也可以不用yield语句，这时就变成了一个单纯的<strong>暂缓执行函数</strong>。</li></ul><blockquote>next方法的参数</blockquote><ul><li><p><strong>注意</strong>：<strong> yield句本身没有返回值</strong>（返回undefined）。<strong>next方法可以带一个参数</strong>，该参数就会被<strong>当作上一个yield语句的返回值</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* foo(x) &#123;</span><br><span class="line">  var y = 2 * (yield (x + 1));</span><br><span class="line">  var z = yield (y / 3);</span><br><span class="line">  <span class="built_in">return</span> (x + y + z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var a = foo(5);</span><br><span class="line">a.next();  // Object&#123;value:6, <span class="keyword">done</span>:<span class="literal">false</span>&#125;</span><br><span class="line">a.next();  // Object&#123;value:NaN, <span class="keyword">done</span>:<span class="literal">false</span>&#125;</span><br><span class="line">a.next();  // Object&#123;value:NaN, <span class="keyword">done</span>:<span class="literal">true</span>&#125;</span><br><span class="line"></span><br><span class="line">var b = foo(5);</span><br><span class="line">b.next();   // &#123; value:6, <span class="keyword">done</span>:<span class="literal">false</span> &#125;</span><br><span class="line">b.next(12); // &#123; value:8, <span class="keyword">done</span>:<span class="literal">false</span> &#125;</span><br><span class="line">b.next(13); // &#123; value:42, <span class="keyword">done</span>:<span class="literal">true</span> &#125;</span><br></pre></td></tr></table></figure></li><li><p>next方法不带参数，导致y的值等于2 * undefined（即NaN），除以3以后还是NaN；</p></li><li>next方法提供参数，第一次调用b的next方法时，返回x+1的值6；第二次调用next方法，将上一次yield语句的值设为12，因此y等于24，返回y/3的值8。第三次调用next方法，将上一次yield语句的值设为13，因此z等于13，返回x + y + z的结果为5 + 24 + 13 = 42。</li><li><strong>注意</strong>：这个功能有很重要的语法意义。Generator函数<strong>从暂停状态到恢复运行</strong>，它的<strong>上下文状态（context）是不变的</strong>。通过next方法的参数，就有办法在Generator函数开始运行之后，继续向函数体内部注入值。也就是说，<strong>可以在Generator函数运行的不同阶段，从外部向内部注入不同的值，从而调整函数行为</strong>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="function"><span class="title">f</span></span>() &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="built_in">let</span> i = 0; <span class="literal">true</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">let</span> reset = yield i;</span><br><span class="line">    <span class="keyword">if</span> (reset) &#123; </span><br><span class="line">      i = -1; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> g = f();</span><br><span class="line">g.next() // &#123; value: 0, <span class="keyword">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">g.next() // &#123; value: 1, <span class="keyword">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">g.next(<span class="literal">true</span>) // &#123; value: 0, <span class="keyword">done</span>: <span class="literal">false</span> &#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote>for…of循环</blockquote><ul><li><code>for…of</code>循环可以<strong>自动遍历</strong>Generator函数时生成的Iterator对象，且此时<strong>不再需要调用next方法</strong>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="function"><span class="title">foo</span></span>() &#123;</span><br><span class="line">  yield 1;</span><br><span class="line">  yield 2;</span><br><span class="line">  <span class="built_in">return</span> 3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">let</span> v of foo()) &#123;</span><br><span class="line">  console.log(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote>yield* [[expression]]</blockquote><ul><li><code>yield* 一个可迭代对象</code>，就相当于把这个可迭代对象的所有迭代值分次 yield 出去。表达式本身的值就是当前可迭代对象迭代完毕（当done为true时）时的返回值。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="function"><span class="title">gen</span></span>()&#123;</span><br><span class="line">  yield [1, 2];</span><br><span class="line">  yield* [3, 4];</span><br><span class="line">&#125;</span><br><span class="line">var g = gen();</span><br><span class="line">g.next(); // &#123;value: Array[2], <span class="keyword">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">g.next(); // &#123;value: 3, <span class="keyword">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">g.next(); // &#123;value: 4, <span class="keyword">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">g.next(); // &#123;value: undefined, <span class="keyword">done</span>: <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h4><ul><li>async函数可以理解为<strong>Generator函数的语法糖</strong>，使用async内置了<strong>自动执行器</strong>，无需调用next方法进行逐步调用。且其<strong>返回值为Promise</strong>。</li><li>大部分情况async/await都要结合promise一起使用。</li></ul><h5 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h5><ul><li><p><code>async</code>函数返回一个 Promise 对象，可以使用<code>then</code>方法添加回调函数。当函数执行的时候，一旦遇到<code>await</code>就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">async <span class="keyword">function</span> gen(x)&#123;</span><br><span class="line">  var y = await x + 2;</span><br><span class="line">  var z = await y + 2;</span><br><span class="line">  <span class="built_in">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line">gen(1).<span class="keyword">then</span>(result =&gt; console.log(result), error =&gt; console.log(error));</span><br><span class="line">gen(1).<span class="keyword">then</span>(result =&gt; console.log(result)).catch(error =&gt; console.log(error));</span><br></pre></td></tr></table></figure></li><li><p>用三种异步编程方式实现5秒以后，输出hello world：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/*回调方式*/</span><br><span class="line"><span class="keyword">function</span> <span class="built_in">test</span>(callback) &#123;</span><br><span class="line">  setTimeout(() =&gt; callback(<span class="string">'hello world'</span>), 5000);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">test</span>((value) =&gt; console.log(value));</span><br><span class="line"></span><br><span class="line">/*Promise方式*/</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span>() &#123;</span><br><span class="line">  <span class="built_in">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      <span class="built_in">return</span> resolve(<span class="string">'hello world'</span>);</span><br><span class="line">    &#125;, 5000)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">test</span>().<span class="keyword">then</span>((value) =&gt; console.log(value));</span><br><span class="line"></span><br><span class="line">/*async方式*/</span><br><span class="line">async <span class="keyword">function</span> <span class="function"><span class="title">test</span></span>() &#123;</span><br><span class="line">  <span class="built_in">return</span> await new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      <span class="built_in">return</span> resolve(<span class="string">'hello world'</span>);</span><br><span class="line">    &#125;, 5000)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">test</span>().<span class="keyword">then</span>((value) =&gt; console.log(value));</span><br></pre></td></tr></table></figure></li></ul><h5 id="await命令"><a href="#await命令" class="headerlink" title="await命令"></a>await命令</h5><ul><li>正常情况下，<strong>await命令后是一个Promise对象</strong>。如果<strong>不是，会被转成一个立即resolve的Promise对象</strong>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/*成功情况*/</span><br><span class="line">async <span class="keyword">function</span> <span class="function"><span class="title">f</span></span>() &#123;</span><br><span class="line">  <span class="built_in">return</span> await 123;</span><br><span class="line">&#125;</span><br><span class="line">f().<span class="keyword">then</span>(value =&gt; console.log(value));  // 123</span><br><span class="line"></span><br><span class="line">/*失败情况*/</span><br><span class="line">async <span class="keyword">function</span> <span class="function"><span class="title">f</span></span>() &#123;</span><br><span class="line">  <span class="built_in">return</span> Promise.reject(<span class="string">'error'</span>);</span><br><span class="line">&#125;</span><br><span class="line">f().catch(e =&gt; console.error(e));   // error</span><br></pre></td></tr></table></figure></li></ul><h5 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">async <span class="keyword">function</span> <span class="function"><span class="title">f</span></span>() &#123;</span><br><span class="line">  await new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    throw new Error(<span class="string">'出错了'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">f().<span class="keyword">then</span>(v =&gt; console.log(v))</span><br><span class="line">  .catch(e =&gt; console.error(e));  // Error: 出错了</span><br></pre></td></tr></table></figure><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><ul><li><p>await只能用在async函数中，不能用在普通函数中:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/* 错误处理 */</span><br><span class="line"><span class="keyword">function</span> f(db) &#123;</span><br><span class="line">  <span class="built_in">let</span> docs = [1, 2, 3];</span><br><span class="line">  <span class="keyword">for</span>(<span class="built_in">let</span> doc of docs) &#123;</span><br><span class="line">    await db.push(doc);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> db; // Uncaught SyntaxError: Unexpected identifier</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 正确处理(顺序执行) */</span><br><span class="line">async <span class="keyword">function</span> f(db) &#123;</span><br><span class="line">  <span class="built_in">let</span> docs = [1, 2, 3];</span><br><span class="line">  <span class="keyword">for</span>(<span class="built_in">let</span> doc of docs) &#123;</span><br><span class="line">    await db.push(doc);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> db;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">let</span> ary = [];</span><br><span class="line">f(ary);</span><br><span class="line">console.log(ary); // [1, 2, 3]</span><br><span class="line"></span><br><span class="line">/* 正确处理(并发执行) */</span><br><span class="line">async <span class="keyword">function</span> f(db) &#123;</span><br><span class="line">  <span class="built_in">let</span> docs = [1, 2, 3];</span><br><span class="line">  <span class="built_in">let</span> promises = docs.map(doc =&gt; db.push(doc));</span><br><span class="line">  db = await Promise.all(promises);</span><br><span class="line">  <span class="built_in">return</span> db;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">let</span> ary = [];</span><br><span class="line">f(ary);</span><br><span class="line">console.log(ary); // [1, 2, 3]</span><br></pre></td></tr></table></figure></li><li><p>await后面可能存在reject，需要包在try…catch代码块中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">async <span class="keyword">function</span> <span class="function"><span class="title">f</span></span>() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    await Promise.reject(<span class="string">'出错了'</span>);</span><br><span class="line">  &#125; catch(e) &#123;</span><br><span class="line">    console.error(e);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> Promise.resolve(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line">f().<span class="keyword">then</span>(v =&gt; console.log(v));   // 出错了 hello</span><br></pre></td></tr></table></figure></li><li><p>多个异步操作，如果没有继承关系，最好同时触发：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">async <span class="keyword">function</span> <span class="function"><span class="title">f</span></span>() &#123;</span><br><span class="line">  <span class="built_in">let</span> [foo, bar] = await Promise.all([getFoo(), getBar()]);</span><br><span class="line">  <span class="built_in">return</span> [foo, bar];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ES6诞生以前，异步编程的方法，大概有如下四种：&lt;strong&gt;回调函数&lt;/strong&gt;、&lt;strong&gt;事件
      
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="ES6" scheme="https://chongtianhong.github.io/tags/ES6/"/>
    
      <category term="Promise" scheme="https://chongtianhong.github.io/tags/Promise/"/>
    
      <category term="Genorator" scheme="https://chongtianhong.github.io/tags/Genorator/"/>
    
      <category term="async" scheme="https://chongtianhong.github.io/tags/async/"/>
    
  </entry>
  
  <entry>
    <title>对Vue生命周期的理解</title>
    <link href="https://chongtianhong.github.io/2018/03/14/vue/"/>
    <id>https://chongtianhong.github.io/2018/03/14/vue/</id>
    <published>2018-03-14T14:38:09.000Z</published>
    <updated>2018-07-16T15:55:34.201Z</updated>
    
    <content type="html"><![CDATA[<ul><li>每个Vue实例在被创建之前都要经过一系列的初始化过程，这个过程就是vue的生命周期。</li><li>Vue的生命周期中有多个事件钩子，让我们在控制整个Vue实例的过程时更容易形成好的逻辑，它总共可以分为8个阶段：<code>beforeCreate（创建前）</code>，<code>created（创建后）</code>，<code>beforeMount(载入前)</code>，<code>mounted（载入后）</code>，<code>beforeUpdate（更新前）</code>，<code>updated（更新后）</code>，<code>beforeDestroy（销毁前）</code>，<code>destroyed（销毁后）</code>。<a id="more"></a></li></ul><h3 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h3><ul><li>先看Vue官网提供的图片：<br><img src="/images/vue.png" width="316" alt="vue的生命周期" style="border:none"></li><li><p>通过以下代码，更好地理解Vue的生命周期：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;vue生命周期学习&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">"https://cdn.bootcss.com/vue/2.4.2/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">      &lt;h1&gt;&#123;&#123;message&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      var vm = new Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">          message: <span class="string">'Vue的生命周期'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeCreate: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">          console.group(<span class="string">'------beforeCreate创建前状态------'</span>);</span><br><span class="line">          console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + this.<span class="variable">$el</span>); //undefined</span><br><span class="line">          console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + this.<span class="variable">$data</span>); //undefined </span><br><span class="line">          console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + this.message) </span><br><span class="line">        &#125;,</span><br><span class="line">        created: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">          console.group(<span class="string">'------created创建完毕状态------'</span>);</span><br><span class="line">          console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + this.<span class="variable">$el</span>); //undefined</span><br><span class="line">          console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + this.<span class="variable">$data</span>); //已被初始化 </span><br><span class="line">          console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + this.message); //已被初始化</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">          console.group(<span class="string">'------beforeMount挂载前状态------'</span>);</span><br><span class="line">          console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + (this.<span class="variable">$el</span>)); //已被初始化</span><br><span class="line">          console.log(this.<span class="variable">$el</span>);</span><br><span class="line">          console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + this.<span class="variable">$data</span>); //已被初始化  </span><br><span class="line">          console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + this.message); //已被初始化  </span><br><span class="line">        &#125;,</span><br><span class="line">        mounted: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">          console.group(<span class="string">'------mounted 挂载结束状态------'</span>);</span><br><span class="line">          console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + this.<span class="variable">$el</span>); //已被初始化</span><br><span class="line">          console.log(this.<span class="variable">$el</span>);    </span><br><span class="line">          console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + this.<span class="variable">$data</span>); //已被初始化</span><br><span class="line">          console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + this.message); //已被初始化 </span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">          console.group(<span class="string">'beforeUpdate 更新前状态===============》'</span>);</span><br><span class="line">          console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + this.<span class="variable">$el</span>);</span><br><span class="line">          console.log(this.<span class="variable">$el</span>);   </span><br><span class="line">          console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + this.<span class="variable">$data</span>); </span><br><span class="line">          console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + this.message); </span><br><span class="line">        &#125;,</span><br><span class="line">        updated: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">          console.group(<span class="string">'updated 更新完成状态===============》'</span>);</span><br><span class="line">          console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + this.<span class="variable">$el</span>);</span><br><span class="line">          console.log(this.<span class="variable">$el</span>); </span><br><span class="line">          console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + this.<span class="variable">$data</span>); </span><br><span class="line">          console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + this.message); </span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">          console.group(<span class="string">'beforeDestroy 销毁前状态===============》'</span>);</span><br><span class="line">          console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + this.<span class="variable">$el</span>);</span><br><span class="line">          console.log(this.<span class="variable">$el</span>);    </span><br><span class="line">          console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + this.<span class="variable">$data</span>); </span><br><span class="line">          console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + this.message); </span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">          console.group(<span class="string">'destroyed 销毁完成状态===============》'</span>);</span><br><span class="line">          console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + this.<span class="variable">$el</span>);</span><br><span class="line">          console.log(this.<span class="variable">$el</span>);  </span><br><span class="line">          console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + this.<span class="variable">$data</span>); </span><br><span class="line">          console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + this.message)</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>运行后打开console可以看到打印出来内容如下:<br><img src="/images/vueconsole.png" width="654" alt="vue的生命周期console结果" style="border:none"></p></li><li>可以看到一个vue实例在创建过程中调用的几个生命周期钩子。</li></ul><h4 id="在beforeCreate和created钩子函数之间的生命周期"><a href="#在beforeCreate和created钩子函数之间的生命周期" class="headerlink" title="在beforeCreate和created钩子函数之间的生命周期"></a>在beforeCreate和created钩子函数之间的生命周期</h4><ul><li>在<strong>beforeCreated</strong>阶段，vue实例的挂载元素<strong>$el</strong>和数据对象<strong>data</strong>都为undefined，还未初始化。</li><li>在<strong>created</strong>阶段，vue实例的数据对象<strong>data</strong>有了，<strong>$el</strong>还没有。<ul><li>在这个生命周期之间，进行<strong>初始化事件</strong>，进行<strong>数据</strong>的<strong>观测</strong>，可以看到在<strong>created</strong>的时候数据已经和<strong>data属性</strong>进行绑定（放在<strong>data</strong>中的属性，当其值发生改变的同时，视图也会改变）。注意看下：此时还是没有<strong>el</strong>选项。</li></ul></li></ul><h4 id="created钩子函数和beforeMount间的生命周期"><a href="#created钩子函数和beforeMount间的生命周期" class="headerlink" title="created钩子函数和beforeMount间的生命周期"></a>created钩子函数和beforeMount间的生命周期</h4><p><img src="/images/createdToBeforeMount.png" width="654" alt="created钩子函数和beforeMount间的生命周期" style="border:none"></p><ul><li><p>首先会判断对象是否有<strong>el选项</strong>。如果<strong>有的话就继续向下编译</strong>，<strong>如果没有el选项</strong>，则<strong>停止编译</strong>，也就意味着<strong>停止了生命周期，直到在该vue实例上调用<code>vm.$mount(el)</code></strong>。此时注释掉代码中:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">el: <span class="string">'#app'</span></span><br></pre></td></tr></table></figure></li><li><p>运行可以看到，到<strong>created</strong>的时候就停止了，不会再执行后面的钩子函数。</p></li><li>如果我们在后面继续调用<code>vm.$mount(el)</code>,可以发现代码继续向下执行了。这个<strong>el</strong>参数就是挂载Vue实例的DOM节点。</li><li>然后，我们往下看，template参数选项的有无对生命周期的影响。<br>（1）.如果vue实例对象中有template参数选项，则将其作为模板编译成render函数。<br>（2）.如果没有template选项，则将外部HTML作为模板编译。<br>（3）.可以看到template中的模板优先级要高于outer HTML的优先级。</li><li>所以综合排名优先级：render函数选项 &gt; template选项 &gt; outer HTML。</li></ul><h4 id="beforeMount和mounted-钩子函数间的生命周期"><a href="#beforeMount和mounted-钩子函数间的生命周期" class="headerlink" title="beforeMount和mounted 钩子函数间的生命周期"></a>beforeMount和mounted 钩子函数间的生命周期</h4><p><img src="/images/beforeMountToMounted.png" width="451" alt="beforeMount和mounted 钩子函数间的生命周期" style="border:none"></p><ul><li>可以看到此时是给vue实例对象添加<strong>$el成员</strong>，并且替换掉挂载的DOM元素。因为在之前console中打印的结果可以看到<strong>beforeMount</strong>之前<strong>el</strong>上还是undefined。</li><li>在<strong>beforeMount</strong>阶段，vue实例的<strong>$el</strong>和<strong>data</strong>都初始化了，但还是挂载之前为虚拟的DOM节点，data.message还未替换。 <ul><li>Virtual DOM是一个映射真实DOM的javascript对象，如果需要改变任何元素的状态，则先在virtual DOM上改变，而不是直接改变真实的DOM。当有变化产生时，一个新的虚拟节点便会被创建，同时计算新旧虚拟结点之间的差别，最后映射真实的dom节点。</li></ul></li></ul><h4 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h4><p><img src="/images/mounted.png" width="424" alt="mounted" style="border:none"></p><ul><li>在<strong>mounted</strong>阶段，vue实例挂载完成，<strong>data.message</strong>成功渲染。<strong>this.$el</strong>是挂载的DOM结构。</li></ul><h4 id="beforeUpdate钩子函数和updated钩子函数间的生命周期"><a href="#beforeUpdate钩子函数和updated钩子函数间的生命周期" class="headerlink" title="beforeUpdate钩子函数和updated钩子函数间的生命周期"></a>beforeUpdate钩子函数和updated钩子函数间的生命周期</h4><ul><li>当vue发现<strong>data</strong>中的数据发生了改变，会触发对应组件的重新渲染，先后调用<strong>beforeUpdate</strong>和<strong>updated</strong>钩子函数。</li></ul><h4 id="beforeDestroy和destroyed钩子函数间的生命周期"><a href="#beforeDestroy和destroyed钩子函数间的生命周期" class="headerlink" title="beforeDestroy和destroyed钩子函数间的生命周期"></a>beforeDestroy和destroyed钩子函数间的生命周期</h4><ul><li><strong>beforeDestroy</strong>钩子函数在实例销毁之前调用。在这一步，实例仍然完全可用。</li><li><strong>destroyed</strong>钩子函数在Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;每个Vue实例在被创建之前都要经过一系列的初始化过程，这个过程就是vue的生命周期。&lt;/li&gt;
&lt;li&gt;Vue的生命周期中有多个事件钩子，让我们在控制整个Vue实例的过程时更容易形成好的逻辑，它总共可以分为8个阶段：&lt;code&gt;beforeCreate（创建前）&lt;/code&gt;，&lt;code&gt;created（创建后）&lt;/code&gt;，&lt;code&gt;beforeMount(载入前)&lt;/code&gt;，&lt;code&gt;mounted（载入后）&lt;/code&gt;，&lt;code&gt;beforeUpdate（更新前）&lt;/code&gt;，&lt;code&gt;updated（更新后）&lt;/code&gt;，&lt;code&gt;beforeDestroy（销毁前）&lt;/code&gt;，&lt;code&gt;destroyed（销毁后）&lt;/code&gt;。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
      <category term="Vue.js" scheme="https://chongtianhong.github.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中的循环数组遍历</title>
    <link href="https://chongtianhong.github.io/2018/03/13/array1/"/>
    <id>https://chongtianhong.github.io/2018/03/13/array1/</id>
    <published>2018-03-13T15:25:36.000Z</published>
    <updated>2018-07-15T15:48:14.121Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在 JavaScript 中提供了如下四种循环遍历数组元素的方式：<ul><li><code>for</code>：循环遍历数组元素最简单的方式。</li><li><code>for-in</code>：循环遍历对象的<strong>属性</strong>。</li><li><code>forEach</code>：调用数组的每个元素，并将元素传递给回调函数。</li><li><code>for-of</code>：循环遍历集合对象的<strong>属性值</strong>。<a id="more"></a></li></ul></li></ul><blockquote>for</blockquote><ul><li>这是循环遍历数组元素最简单的方式。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    console.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote>for-in</blockquote><ul><li><p>for-in 语句以任意顺序（即显示顺序不是可控的）<strong>遍历一个对象的</strong>可枚举<strong>属性</strong>:</p><ul><li>对于<strong>数组</strong>即是<strong>数组下标</strong>，对于<strong>对象</strong>即是<strong>对象的 key 值</strong>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (var index <span class="keyword">in</span> myArray) &#123;</span><br><span class="line">    console.log(myArray[index]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>不推荐</strong>使用 for-in 语句。</p></li><li><p>注意：for-in 遍历返回的对象属性都是<strong>字符串类型</strong>，即使是数组下标，也是字符串 “0”, “1”, “2” 等等。如果使用字符串的 index 去参与某些运算（”2” + 1 == “21”），运算结果可能会不符合预期。例如以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var myArray=[1,2,3,4,5];</span><br><span class="line"><span class="keyword">for</span> (var index <span class="keyword">in</span> myArray) &#123; </span><br><span class="line">    console.log(index+1); // 01 11 21 31 41</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>还有一个缺点是不仅数组本身的元素将被遍历到，用户自己为数组添加的一些属性也会被遍历到，甚至数组原型链上的属性也可能被遍历到。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var myArray=new Array(1,2,3,4,5);</span><br><span class="line">myArray.name=<span class="string">"hello"</span>;</span><br><span class="line">Array.prototype.method=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    console.log(<span class="string">"world"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (var index <span class="keyword">in</span> myArray) &#123;</span><br><span class="line">    console.log(index); // 0 1 2 3 4 name method</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>for-in 设计的目的是用于<strong>遍历包含键值对的对象</strong>，对数组并不是那么友好。 </p></li><li>遍历数组的话还是用es6的for-of循环遍历比较好。</li></ul><blockquote>for-of</blockquote><ul><li><p>for-of 语句为各种 collection 集合对象专门定制的，遍历集合对象的<strong>属性值</strong>，注意和 for-in 的区别。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (var value of myArray) &#123;</span><br><span class="line">    console.log(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>for-of和for-in的区别：</p><ul><li>推荐在循环<strong>对象属性</strong>的时候，使用<code>for…in</code>，在<strong>遍历数组</strong>的时候的时候使用<code>for…of</code>。</li><li><code>for…in</code>循环出的是<code>key</code>，<code>for…of</code>循环出的是<code>value</code>。</li><li>注意，<code>for…of</code>是ES6新引入的特性。修复了ES5引入的<code>for…in</code>的不足。</li><li><code>for…of</code>不能循环普通的对象，需要通过和<code>Object.keys()</code>搭配使用。</li></ul></li></ul><blockquote>forEach</blockquote><ul><li>forEach 方法用于<strong>调用数组的每个元素</strong>，并<strong>将元素传递给回调函数</strong>；</li><li>注意：在回调函数中<strong>无法使用 break 跳出当前循环</strong>，也<strong>无法使用 return 返回值</strong>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myArray.forEach(<span class="keyword">function</span> (value) &#123;</span><br><span class="line">    console.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;在 JavaScript 中提供了如下四种循环遍历数组元素的方式：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt;：循环遍历数组元素最简单的方式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for-in&lt;/code&gt;：循环遍历对象的&lt;strong&gt;属性&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forEach&lt;/code&gt;：调用数组的每个元素，并将元素传递给回调函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for-of&lt;/code&gt;：循环遍历集合对象的&lt;strong&gt;属性值&lt;/strong&gt;。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CommonJS 与 ES6 Modules的区别</title>
    <link href="https://chongtianhong.github.io/2018/03/12/commonjs/"/>
    <id>https://chongtianhong.github.io/2018/03/12/commonjs/</id>
    <published>2018-03-12T06:37:28.000Z</published>
    <updated>2018-07-15T13:27:10.557Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>摘自阮一峰ES6<br><blockquote>在 ES6 之前，社区制定了一些模块加载方案，最主要的有 <strong>CommonJS</strong> 和 <strong>AMD</strong> 两种。前者用于<strong>服务器</strong>，后者用于<strong>浏览器</strong>。<strong>ES6</strong> 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，<strong>成为浏览器和服务器通用的模块解决方案</strong>。<br><strong>ES6</strong> 模块的设计思想是尽量的<strong>静态化</strong>，使得<strong>编译时</strong>就能<strong>确定模块的依赖关系</strong>，以及输入和输出的变量。<strong>CommonJS</strong> 和 <strong>AMD</strong> 模块，都只能在<strong>运行时确定</strong>这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。</blockquote></p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// CommonJS模块</span><br><span class="line"><span class="built_in">let</span> &#123; <span class="built_in">stat</span>, exists, readFile &#125; = require(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">// 等同于</span><br><span class="line"><span class="built_in">let</span> _fs = require(<span class="string">'fs'</span>);</span><br><span class="line"><span class="built_in">let</span> <span class="built_in">stat</span> = _fs.stat;</span><br><span class="line"><span class="built_in">let</span> exists = _fs.exists;</span><br><span class="line"><span class="built_in">let</span> readfile = _fs.readfile;</span><br></pre></td></tr></table></figure></li><li><p>上面代码的实质是<strong>整体加载</strong>fs模块（即加载fs的<strong>所有方法</strong>），生成一个对象（_fs），然后再从这个对象上面读取 3 个方法。这种加载称为“运行时加载”，因为只有<strong>运行时</strong>才能得到这个对象，导致完全没办法在编译时做“静态优化”。</p></li></ul><h4 id="ES6模块化"><a href="#ES6模块化" class="headerlink" title="ES6模块化"></a>ES6模块化</h4><ul><li><p>ES6 模块不是对象，而是通过<strong>export命令</strong>显式指定输出的代码，再通过<strong>import命令</strong>输入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// ES6模块</span><br><span class="line">import &#123; <span class="built_in">stat</span>, exists, readFile &#125; from <span class="string">'fs'</span>;</span><br></pre></td></tr></table></figure></li><li><p>上面代码的实质是从fs模块加载 3 个方法，其他方法不加载。这种加载称为<strong>“编译时加载”</strong>或者<strong>静态加载</strong>，即 ES6 可以<strong>在编译时就完成模块加载</strong>，效率要比 CommonJS 模块的加载方式高。当然，这也导致了<strong>没法引用 ES6 模块本身</strong>，因为它不是对象。</p></li><li><p>由于 ES6 模块是<strong>编译时加载</strong>，使得静态分析成为可能。有了它，就能进一步拓宽 JavaScript 的语法，比如引入宏（macro）和类型检验（type system）这些只能靠静态分析实现的功能。</p></li><li><p>除了静态加载带来的各种好处，ES6 模块还有以下好处：</p><ul><li>不再需要UMD模块格式了，将来服务器和浏览器都会支持 ES6 模块格式。目前，通过各种工具库，其实已经做到了这一点。</li><li>将来浏览器的新 API 就能用模块格式提供，不再必须做成全局变量或者navigator对象的属性。<br>不再需要对象作为命名空间（比如Math对象），未来这些功能可以通过模块提供。</li></ul></li><li><p>ES6 模块的特点：</p><ul><li>静态化，必须在顶部，不能使用条件语句，自动采用严格模式</li><li>treeshaking和编译优化，以及webpack3中的作用域提升</li><li>外部可以拿到实时值，而非缓存值(是引用而不是copy)</li></ul></li><li><p>简单来说</p><ul><li>CommonJS是在内存中的对象，运行时才加载。</li><li>ES6 Modules是编译时就加载的代码。</li></ul></li></ul><h4 id="ES6-模块与-CommonJS-模块的差异"><a href="#ES6-模块与-CommonJS-模块的差异" class="headerlink" title="ES6 模块与 CommonJS 模块的差异"></a>ES6 模块与 CommonJS 模块的差异</h4><ul><li>讨论 Node 加载 ES6 模块之前，必须了解 ES6 模块与 CommonJS 模块完全不同。</li><li>它们有两个重大差异：<ul><li>CommonJS 模块输出的是一个<strong>值的拷贝</strong>，ES6 模块输出的是<strong>值的引用</strong>。</li><li>CommonJS 模块是<strong>运行时</strong>加载，ES6 模块是<strong>编译时</strong>输出接口。</li></ul></li></ul><h4 id="代码举例"><a href="#代码举例" class="headerlink" title="代码举例"></a>代码举例</h4><ul><li><p>现在有三个模块：<br><blockquote>m1.mjs</blockquote></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="built_in">let</span> a1 = 1;</span><br></pre></td></tr></table></figure><p><blockquote>m2.mjs</blockquote></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="built_in">let</span> a2 = 2;</span><br></pre></td></tr></table></figure><p><blockquote>m3.mjs</blockquote></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="built_in">let</span> a3 = 3;</span><br></pre></td></tr></table></figure></li><li><p>1、基本使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//index.mjs</span><br><span class="line"></span><br><span class="line">import &#123; a1 &#125; from <span class="string">'./m1'</span>;</span><br><span class="line">import &#123; a2 &#125; from <span class="string">'./m2'</span>;</span><br><span class="line">import &#123; a3 &#125; from <span class="string">'./m3'</span>;</span><br><span class="line"></span><br><span class="line">console.log(a1, a2, a3);</span><br></pre></td></tr></table></figure></li><li><p>结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(node:18435) ExperimentalWarning: The ESM module loader is experimental.</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure></li><li><p>2、验证ES6 module的静态特性和接口特性：</p><ul><li>将m1改成</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="built_in">let</span> a1= 1;</span><br><span class="line">setTimeout(()=&gt;a1=2,500);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//index.mjs</span><br><span class="line">import &#123; a1 &#125; from <span class="string">'./m1'</span>;</span><br><span class="line">import &#123; a2 &#125; from <span class="string">'./m2'</span>;</span><br><span class="line">import &#123; a3 &#125; from <span class="string">'./m3'</span>;</span><br><span class="line"></span><br><span class="line">console.log(a1, a2, a3);</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(a1, a2, a3);</span><br><span class="line">&#125;,1000)</span><br></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(node:18994) ExperimentalWarning: The ESM module loader is experimental.</span><br><span class="line">1 2 3</span><br><span class="line">2 2 3</span><br></pre></td></tr></table></figure></li><li><p>体现了接口性。</p></li></ul><h4 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h4><h5 id="ES6-Module和CommonJS模块的区别："><a href="#ES6-Module和CommonJS模块的区别：" class="headerlink" title="ES6 Module和CommonJS模块的区别："></a>ES6 Module和CommonJS模块的区别：</h5><ul><li>CommonJS是对模块的浅拷贝，ES6 Module是对模块的引用。<ul><li>即ES6 Module只存只读，不能改变其值，具体点就是指针指向不能变，类似const</li></ul></li><li>import的接口是read-only（只读状态），不能修改其变量值。<ul><li>即不能修改其变量的指针指向，但可以改变变量内部指针指向。</li></ul></li><li>可以对commonJS对重新赋值（改变指针指向），但是对ES6 Module赋值会编译报错。<h5 id="ES6-Module和CommonJS模块的共同点："><a href="#ES6-Module和CommonJS模块的共同点：" class="headerlink" title="ES6 Module和CommonJS模块的共同点："></a>ES6 Module和CommonJS模块的共同点：</h5></li><li>CommonJS和ES6 Module都可以对引入的对象进行赋值，即对对象内部属性的值进行改变。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;摘自阮一峰ES6&lt;br&gt;&lt;blockquote&gt;在 ES6 之前，社区制定了一些模块加载方案，最主要的有 &lt;strong&gt;CommonJS&lt;/strong&gt; 和 &lt;strong&gt;AMD&lt;/strong&gt; 两种。前者用于&lt;strong&gt;服务器&lt;/strong&gt;，后者用于&lt;strong&gt;浏览器&lt;/strong&gt;。&lt;strong&gt;ES6&lt;/strong&gt; 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，&lt;strong&gt;成为浏览器和服务器通用的模块解决方案&lt;/strong&gt;。&lt;br&gt;&lt;strong&gt;ES6&lt;/strong&gt; 模块的设计思想是尽量的&lt;strong&gt;静态化&lt;/strong&gt;，使得&lt;strong&gt;编译时&lt;/strong&gt;就能&lt;strong&gt;确定模块的依赖关系&lt;/strong&gt;，以及输入和输出的变量。&lt;strong&gt;CommonJS&lt;/strong&gt; 和 &lt;strong&gt;AMD&lt;/strong&gt; 模块，都只能在&lt;strong&gt;运行时确定&lt;/strong&gt;这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。&lt;/blockquote&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Web" scheme="https://chongtianhong.github.io/tags/Web/"/>
    
      <category term="ES6" scheme="https://chongtianhong.github.io/tags/ES6/"/>
    
      <category term="CommonJS" scheme="https://chongtianhong.github.io/tags/CommonJS/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 对象复制(深浅拷贝)</title>
    <link href="https://chongtianhong.github.io/2018/03/11/objectcopy/"/>
    <id>https://chongtianhong.github.io/2018/03/11/objectcopy/</id>
    <published>2018-03-11T12:31:51.000Z</published>
    <updated>2018-07-15T12:54:46.749Z</updated>
    
    <content type="html"><![CDATA[<ul><li>要弄懂<strong>深浅拷贝</strong>的概念，着实不易。这里举个不恰当例子便于理解：<ul><li>浅拷贝是双胞胎</li><li>深拷贝是单独克隆自己<a id="more"></a></li></ul></li></ul><h4 id="数据类型分类："><a href="#数据类型分类：" class="headerlink" title="数据类型分类："></a>数据类型分类：</h4><p><img src="/images/dataType.png" width="600" alt="数据类型分类" style="border:none"></p><h4 id="指针指向"><a href="#指针指向" class="headerlink" title="指针指向"></a>指针指向</h4><ul><li>栈内存、堆内存、指针指向（如下红圈圈的斜线）。<br><img src="/images/storage.png" width="600" alt="数据类型存放位置" style="border:none"></li></ul><h4 id="赋值、拷贝、引用区别"><a href="#赋值、拷贝、引用区别" class="headerlink" title="赋值、拷贝、引用区别"></a>赋值、拷贝、引用区别</h4><ul><li>赋值指<strong>给一个变量赋予某个值</strong>，包含两种方式，一种是<strong>直接量</strong>，另一种，是<strong>将另一个变量的值传递给这个变量</strong>。拷贝和引用都属于后者。</li><li>引用的目的是<strong>将指针指向<em>相同堆内存</em>中的某一位置</strong>。</li><li><p>拷贝的目的是<strong>改变指针的指向</strong>，并且<strong>内部属性或者元素的值相等</strong>。</p><ul><li>基础数据类型在赋值过程就改变了指针指向，所以通常说，<strong>基础类型的引用只存在只读状态</strong>。</li><li>复杂数据类型的指针指向包含两种：一种是指针指向栈内存，另一种是指针指向堆内存，前者只需赋值即可，可后者没那么容易。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var person =  &#123;</span><br><span class="line">    name: <span class="string">'lc'</span>,</span><br><span class="line">    friends: [<span class="string">'xm'</span>,<span class="string">'xm'</span>,<span class="string">'xl'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>从这段代码，我们很清楚知道<code>person.name</code>、<code>person.friends</code>中的每个元素的指针指向栈内存，<code>person</code>和<code>person.friends</code>的指针指向堆内存，由此我们可以得出两点：</p><ul><li>拷贝改变复杂数据类型的指针指向，必须是<strong>先改变指向堆内存的指针指向</strong>，如<code>person</code>的指针指向。</li><li>拷贝改变指针指向，可以只改<code>person</code>的指针指向，这类叫做浅拷贝（浅复制）；也可以改变<code>person</code>、<code>person.friends</code>等全部指针指向，这类通常叫做深拷贝（深复制）。</li></ul></li></ul><h4 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h4><ul><li>在上面，我已描叙了浅拷贝和深拷贝，在这里再严谨的总结一下：<ul><li><strong>浅拷贝</strong>只改变复杂数据类型内<strong>部分</strong>的指针指向，也就是<strong>不完全改变</strong>；</li><li><strong>深拷贝彻头彻底地改变所有指针指向</strong>，也就是<strong>完全改变</strong>。</li></ul></li></ul><blockquote>浅拷贝</blockquote><ul><li>以上例代码为例：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var shallow_copy = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(var i <span class="keyword">in</span> person) &#123;</span><br><span class="line">    shollow_copy[i] = person[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>或者 es6 的 <code>Object.assign()</code>。</p><blockquote>深拷贝</blockquote><ul><li>实现的方法也是多种，大致上可以分为两类： 一类是json，另一类是递归循环遍历赋值。</li><li>其中最常见的是JQuery中<code>$.extend()</code>。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;要弄懂&lt;strong&gt;深浅拷贝&lt;/strong&gt;的概念，着实不易。这里举个不恰当例子便于理解：&lt;ul&gt;
&lt;li&gt;浅拷贝是双胞胎&lt;/li&gt;
&lt;li&gt;深拷贝是单独克隆自己
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Cookies的封装</title>
    <link href="https://chongtianhong.github.io/2018/03/10/Cookies/"/>
    <id>https://chongtianhong.github.io/2018/03/10/Cookies/</id>
    <published>2018-03-10T11:36:02.000Z</published>
    <updated>2018-07-15T11:48:07.292Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Cookie是一小段文本信息，用户请求页面的时候，在浏览器和服务器之间传递。用户每次访问的时候都会记录cookie，cookie里可以包含用户信息，浏览的历史记录等等；</li><li>Cookie是由服务器端生成，但是它是属于客户端的，发送给User-Agent（一般是浏览器），浏览器会将Cookie的key/value保存到某个目录下的文本文件内，下次请求同一网站时就发送该Cookie给服务器（前提是浏览器设置为启用cookie）。<a id="more"></a></li></ul><h4 id="Cookie的组成"><a href="#Cookie的组成" class="headerlink" title="Cookie的组成"></a>Cookie的组成</h4><ul><li><p>基本组成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">“key=value; expires=date; [path=path; domain=domain; secure]”</span><br><span class="line">  键=值；过期时间； 【可访问路径； 域名； 是否使用安全连接】【可选项】</span><br></pre></td></tr></table></figure></li><li><p>设置Cookie的封装方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> setCookies(key,value,expires,path,domain,secure) &#123;</span><br><span class="line">    var cookies=<span class="string">''</span>;</span><br><span class="line">    cookies = encodeURI(key)+<span class="string">'='</span>+encodeURI(value);</span><br><span class="line">    <span class="keyword">if</span>(expires instanceof Date)&#123;</span><br><span class="line">        cookies+=<span class="string">"; expires="</span>+expires;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(path)&#123;</span><br><span class="line">        cookies+=<span class="string">"; path="</span>+path;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(domain)&#123;</span><br><span class="line">        cookies+=<span class="string">"; domain"</span>+domain;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(secure)&#123;</span><br><span class="line">        cookies+=<span class="string">"; secure"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    document.cookie=cookies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>日期函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> setCookieDate(day) &#123;</span><br><span class="line">    <span class="keyword">if</span> (typeof day === <span class="string">"number"</span>)&#123;</span><br><span class="line">    var date = new Date();</span><br><span class="line">    date.setDate(date.getDate()+day);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//这个cookie会在当前日期的七天之后过期</span><br><span class="line">//设置的cookie: Kinds : animals</span><br><span class="line">setCookies(<span class="string">'Kinds'</span>,<span class="string">'animals'</span>,setCookieDate(7));</span><br></pre></td></tr></table></figure></li><li><p>删除实例：将当前Cookie的过期日期参数设置为负值就可以删除这个Cookie </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setCookies(‘Kinds’,’animals’,setCookieDate(-1));</span><br></pre></td></tr></table></figure></li><li><p>获取某个值的封装方法（value）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> getCookies(value) &#123;</span><br><span class="line">    var cookie = document.cookie;</span><br><span class="line">    var start = cookie.indexOf(<span class="string">'='</span>,cookie.indexOf(value));</span><br><span class="line">    var end = cookie.indexOf(<span class="string">';'</span>,cookie.indexOf(value));</span><br><span class="line">    <span class="keyword">if</span>(end === -1)&#123;</span><br><span class="line">        <span class="built_in">return</span> decodeURI(cookie.substring(start+1,cookie.length));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">return</span> decodeURI(cookie.substring(start+1,end));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Cookie是一小段文本信息，用户请求页面的时候，在浏览器和服务器之间传递。用户每次访问的时候都会记录cookie，cookie里可以包含用户信息，浏览的历史记录等等；&lt;/li&gt;
&lt;li&gt;Cookie是由服务器端生成，但是它是属于客户端的，发送给User-Agent（一般是浏览器），浏览器会将Cookie的key/value保存到某个目录下的文本文件内，下次请求同一网站时就发送该Cookie给服务器（前提是浏览器设置为启用cookie）。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Web" scheme="https://chongtianhong.github.io/tags/Web/"/>
    
      <category term="Cookie" scheme="https://chongtianhong.github.io/tags/Cookie/"/>
    
  </entry>
  
  <entry>
    <title>DNS学习笔记</title>
    <link href="https://chongtianhong.github.io/2018/03/09/dns/"/>
    <id>https://chongtianhong.github.io/2018/03/09/dns/</id>
    <published>2018-03-08T16:23:15.000Z</published>
    <updated>2018-03-09T07:22:04.965Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接：<a href="http://www.ruanyifeng.com/blog/2016/06/dns.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/06/dns.html</a></p><h3 id="DNS的定义"><a href="#DNS的定义" class="headerlink" title="DNS的定义"></a>DNS的定义</h3><ul><li>域名系统（Domain Name System）是一种带层级的分布式系统，能进行域名到IP地址转换的目录服务，DNS协议运行在UDP之上，使用端口53。</li><li>域名系统的组成：<ol><li><strong>域名服务器</strong>（服务端），提供域名解析服务的软件，一般监听UDP，TCP的53端口。</li><li><strong>域名解析器</strong>（客户端），访问域名服务器的客户端。负责解析从域名服务器获取的响应，向调用它的应用响应返回IP地址或者别名等信息。<a id="more"></a></li></ol></li><li>域名是由圆点分开一串单词或缩写组成的，每一个域名都对应一个惟一的IP地址，在Internet上域名与IP地址之间是一一对应的，域名虽然便于人们记忆，但<strong>机器之间只能互相认识IP地址</strong>，它们之间的<strong>转换工作称为域名解析</strong>，域名解析<strong>需要由专门的域名解析服务器</strong>来完成，<strong>DNS就是进行域名解析的服务器</strong>。<ul><li>举例来说，如果我们要访问域名<code>math.stackexchange.com</code>，首先要通过DNS查出它的IP地址是<code>151.101.129.69</code>。</li></ul></li><li>DNS命名用于Internet等TCP/IP网络中，通过用户友好的名称查找计算机和服务。DNS是因特网的一项核心服务,它作为可以<strong>将域名和IP地址相互映射</strong>的一个<strong>分布式数据库</strong>。</li><li>域名的最终指向是IP地址。简单的说DNS的作用就是，将<strong>域名翻译为IP地址</strong>的过程，就是DNS解析。<ul><li>当用户在应用程序中输入 DNS 名称时，DNS 服务可以将此名称解析为与之相关的其他信息，如 IP 地址。因为，我们在上网时输入的网址，是通过<strong>域名解析系统</strong>解析找到了相对应的<strong>IP地址</strong>，这样才能上网。</li></ul></li></ul><h3 id="DNS服务器的分类"><a href="#DNS服务器的分类" class="headerlink" title="DNS服务器的分类"></a>DNS服务器的分类</h3><ul><li>DNS采用分布式设计方案，DNS服务器分为四类：<br>• <strong>根域名</strong>DNS服务器：最上层权威域名服务器，负责对<code>.com</code>,<code>.cn</code>,<code>.org</code> 等顶级域名的向下授权。<br>• <strong>顶级域名</strong>DNS服务器。这些服务器负责<strong>通用顶级域名</strong>，如<code>.com</code>，<code>.org</code>，<code>.net</code>，<code>.edu</code>和<code>.gov</code>以及<strong>国家的顶级域名</strong>，如<code>.uk</code>，<code>.fr</code>，<code>.ca</code>，<code>jp</code>。<br>• <strong>权威</strong>DNS服务器。这些服务器记录了主机名到IP地址的映射关系。<br>• <strong>本地</strong>DNS服务器（local DNS server）。</li></ul><h3 id="DNS查询方式"><a href="#DNS查询方式" class="headerlink" title="DNS查询方式"></a>DNS查询方式</h3><ul><li>DNS查询有两种方式：<br>• 递归查询：依次向根域名服务器，顶级域名服务器，二级域名服务器，获取DNS的解析条目。<br>• 迭代查询：域名服务器并不直接代替解析器进行依次查询，而是返回一个参考列表，这个列表指出了解析DNS请求的服务器，由解析器向该列表的服务器进行DNS查询。</li><li>从<strong>请求主机到本地DNS服务器的查询</strong>是<strong>递归</strong>的，其余的查询是迭代的。</li><li><strong>迭代查询方式</strong>与递归查询方式相比<strong>响应速度快</strong>。</li><li>DNS广泛的使用了DNS缓存，类似于HTTP缓存服务器。使用本地存储器作为DNS缓存服务器，每当本地服务器从某个DNS服务器接收到一个回答，它能够缓存包含在该回答中的任何信息。</li></ul><h3 id="DNS查询过程"><a href="#DNS查询过程" class="headerlink" title="DNS查询过程"></a>DNS查询过程</h3><ul><li>虽然只需要返回一个IP地址，但是DNS的查询过程非常复杂，分成多个步骤。</li><li>首先，本机一定要知道DNS服务器的IP地址，否则上不了网。通过DNS服务器，才能知道某个域名的IP地址到底是什么。<br><img src="/images/dns.jpg" width="400" alt="dns" style="border:none"></li><li>DNS服务器的IP地址，有可能是动态的，每次上网时由网关分配，这叫做DHCP机制；也有可能是事先指定的固定地址。</li></ul><h4 id="域名的层级"><a href="#域名的层级" class="headerlink" title="域名的层级"></a>域名的层级</h4><ul><li><p>域名的层级结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">主机名.次级域名.顶级域名.根域名</span><br><span class="line"><span class="comment"># 即</span></span><br><span class="line">host.sld.tld.root</span><br></pre></td></tr></table></figure></li><li><p>例如：<code>www.example.com</code>真正的域名是<code>www.example.com.root</code>，简写为<code>www.example.com.</code>。因为，根域名.root对于所有域名都是一样的，所以<strong>平时是省略的</strong>。</p></li><li>根域名的下一级，叫做”顶级域名”（<code>top-level domain</code>，缩写为TLD），比如<code>.com</code>、<code>.net</code>；</li><li>“顶级域名”的下一级叫做”次级域名”（<code>second-level domain</code>，缩写为SLD），比如<code>www.example.com</code>里面的.example，这一级域名是用户可以注册的；</li><li>“次级域名”的下一级是主机名（host），比如<code>www.example.com</code>里面的<code>www</code>，又称为”三级域名”，这是用户在自己的域里面为服务器分配的名称，是用户可以任意分配的。</li></ul><h4 id="分级查询"><a href="#分级查询" class="headerlink" title="分级查询"></a>分级查询</h4><ul><li>DNS服务器根据域名的层级，进行分级查询，最终查询到域名的IP地址。</li><li>需要明确的是，每一级域名都有自己的<strong>NS（域名服务器）记录</strong>，NS记录<strong>指向该级域名的域名服务器</strong>。这些服务器<strong>知道下一级域名的各种记录</strong>。该记录只能设置为域名，不能设置为IP地址。</li><li>所谓”分级查询”，就是从根域名开始，依次查询每一级域名的NS记录，直到查到最终的IP地址，过程大致如下： </li></ul><ol><li>“根域名服务器”的NS记录和IP地址一般是不会变化的，所以内置在DNS服务器里面。</li><li>从”根域名服务器”查到”顶级域名服务器”的NS记录和A记录（IP地址）。</li><li>从”顶级域名服务器”查到”次级域名服务器”的NS记录和A记录（IP地址）。</li><li>从”次级域名服务器”查出”主机名”的IP地址。</li></ol><h4 id="分级查询的实例"><a href="#分级查询的实例" class="headerlink" title="分级查询的实例"></a>分级查询的实例</h4><ul><li>本次实例以<code>math.stackexchange.com</code>为例。</li></ul><h5 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h5><ul><li>根据内置的根域名服务器IP地址，DNS服务器向所有这些IP地址发出查询请求，询问<code>math.stackexchange.com</code>的顶级域名服务器<code>com.</code>的NS记录。最先回复的根域名服务器将被缓存，以后只向这台服务器发请求。</li><li>得到<code>.com</code>顶级域名的13条NS记录，同时返回的还有每一条记录对应的IP地址。</li></ul><h5 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h5><ul><li>DNS服务器向第一阶段得到的顶级域名服务器发出查询请求，询问<code>math.stackexchange.com</code>的次级域名<code>stackexchange.com</code>的NS记录。</li><li>结果显示<code>stackexchange.com</code>有四条NS记录，同时返回的还有每一条NS记录对应的IP地址。</li></ul><h5 id="第三阶段"><a href="#第三阶段" class="headerlink" title="第三阶段"></a>第三阶段</h5><ul><li>DNS服务器向第二阶段得到的四台NS服务器查询<code>math.stackexchange.com</code>的主机名。</li><li>结果显示，<code>math.stackexchange.com</code>有4条A记录，即<strong>这四个IP地址都可以访问到网站</strong>。并且还能显示，最先返回结果的NS服务器是<code>ns-463.awsdns-57.com</code>，IP地址为<code>205.251.193.207</code>。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考链接：&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/06/dns.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.ruanyifeng.com/blog/2016/06/dns.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;DNS的定义&quot;&gt;&lt;a href=&quot;#DNS的定义&quot; class=&quot;headerlink&quot; title=&quot;DNS的定义&quot;&gt;&lt;/a&gt;DNS的定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;域名系统（Domain Name System）是一种带层级的分布式系统，能进行域名到IP地址转换的目录服务，DNS协议运行在UDP之上，使用端口53。&lt;/li&gt;
&lt;li&gt;域名系统的组成：&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;域名服务器&lt;/strong&gt;（服务端），提供域名解析服务的软件，一般监听UDP，TCP的53端口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;域名解析器&lt;/strong&gt;（客户端），访问域名服务器的客户端。负责解析从域名服务器获取的响应，向调用它的应用响应返回IP地址或者别名等信息。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Web" scheme="https://chongtianhong.github.io/tags/Web/"/>
    
      <category term="DNS" scheme="https://chongtianhong.github.io/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>ES6常用新特性总结</title>
    <link href="https://chongtianhong.github.io/2018/03/08/es6/"/>
    <id>https://chongtianhong.github.io/2018/03/08/es6/</id>
    <published>2018-03-08T05:40:32.000Z</published>
    <updated>2018-03-08T14:49:56.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><ul><li>ECMAScript 6.0（以下简称ES6）是JavaScript语言的下一代标准，已经在2015年6月正式发布了。它的目标，是<strong>使得JavaScript语言可以用来编写复杂的大型应用程序</strong>，成为<strong>企业级开发语言</strong>。<a id="more"></a></li></ul><h3 id="关于变量"><a href="#关于变量" class="headerlink" title="关于变量"></a>关于变量</h3><h4 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h4><ol><li>只有<strong>全局</strong>作用域变量和<strong>函数(局部)</strong>作用域变量。</li><li>“变量提升”（当程序进入一个新的函数时，会将该函数中所有的变量的声明放在函数开始的位置。仅仅会<strong>提升变量的声明</strong>，<strong>不会提升变量的赋值</strong>）。</li></ol><h4 id="ES6新增：块级作用域变量"><a href="#ES6新增：块级作用域变量" class="headerlink" title="ES6新增：块级作用域变量"></a>ES6新增：块级作用域变量</h4><ul><li><p><code>let</code>定义<strong>块级作用域</strong>变量</p><ol><li>没有变量的提升，必须<strong>先声明后使用</strong>。</li><li><code>let</code>声明的变量，不能与前面的<code>let</code>，<code>var</code>，<code>conset</code>声明的变量重名。</li><li>let命令也用于声明对象，但是<strong>作用域为局部</strong>。若在函数内使用<code>let</code>定义变量，在函数外获取不到该变量。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        //console.log(a)//报错  必须先声明再使用</span><br><span class="line">        <span class="built_in">let</span> a = 10;//只在当前大括号可以使用</span><br><span class="line">        var b = <span class="string">"abc"</span>;//全局作用域变量</span><br><span class="line">        console.log(a);//10</span><br><span class="line">        //<span class="built_in">let</span> a = 10//报错 Uncaught SyntaxError: Identifier <span class="string">'a'</span> has already been declared</span><br><span class="line">        console.log(b);//bac</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(b);//abc</span><br><span class="line">    // console.log(a);//报错 只能在大括号中使用</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>conset</code> 定义<strong>只读</strong>变量(不可修改)</p><ol><li><code>conset</code>声明变量的同时必须赋值，<code>conset</code>声明的变量必须初始化，一旦<strong>初始化完毕就不允许修改</strong>。强行对其进行重新赋值会报错。</li><li><code>conset</code>声明变量也是一个<strong>块级作用域</strong>变量。若在函数内使用<code>conset</code>定义变量，在函数外获取不到该变量。</li><li><code>conset</code>声明的变量<strong>没有“变量的提升”</strong>，必须<strong>先声明后使用</strong>。</li><li><code>conset</code>声明的变量，不能与前面的<code>let</code>，<code>var</code>，<code>conset</code>声明的变量重名。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    const VERSION = <span class="string">"1.2.3"</span></span><br><span class="line">    console.log( VERSION )//也只能在大括号里使用</span><br><span class="line">&#125;</span><br><span class="line">//console.log( VERSION )//VERSION is not defined  报错，同时也是只读变量</span><br></pre></td></tr></table></figure></li></ul><h3 id="关于函数"><a href="#关于函数" class="headerlink" title="关于函数"></a>关于函数</h3><h4 id="ES6可以给形参函数设置默认值"><a href="#ES6可以给形参函数设置默认值" class="headerlink" title="ES6可以给形参函数设置默认值"></a>ES6可以给形参函数设置默认值</h4><ul><li>当我们调用函数时，如果设置了<strong>默认形参</strong>，即使<strong>没给函数传入实参</strong>，那么函数的实参就是默认形参。好处：节省了代码量。</li><li><p>ES5：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var link = <span class="keyword">function</span> (height, color, url) &#123;  </span><br><span class="line">    var height = height || 50;  </span><br><span class="line">    var color = color || <span class="string">'red'</span>;  </span><br><span class="line">    var url = url || <span class="string">'http://azat.co'</span>;  </span><br><span class="line">    ...  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ES6：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> fun2(a = 1, b = 2)&#123;</span><br><span class="line">    console.log(a,b)//1,2</span><br><span class="line">&#125;</span><br><span class="line">fun2(11,22);//11 22</span><br><span class="line">fun2(100);//100 2</span><br></pre></td></tr></table></figure></li><li><p>在构造函数中也可是使用的:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Person(name,age,sex=<span class="string">"男"</span>)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">    this.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line">var p1 = new Person(<span class="string">"张三"</span>,20);</span><br><span class="line">console.log(p1)// Person &#123;name: <span class="string">"张三"</span>, age: 20, sex: <span class="string">"男"</span>&#125;</span><br><span class="line">var p2 = new Person(<span class="string">"赵四"</span>,30);</span><br><span class="line">console.log(p2)// Person &#123;name: <span class="string">"赵四"</span>, age: 30, sex: <span class="string">"男"</span>&#125;</span><br><span class="line">var p3 = new Person(<span class="string">"翠花"</span>,20,<span class="string">"女"</span>);</span><br><span class="line">console.log(p3)// Person &#123;name: <span class="string">"翠花"</span>, age: 20, sex: <span class="string">"女"</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><ul><li>ES6中新增箭头操作符用于简化函数的写法，操作符<strong>左边</strong>为<strong>参数</strong>，右边为<strong>具体操作和返回值</strong>。</li><li>箭头函数的特性：<ul><li>共享父级this对象</li><li>共享父级arguments</li><li>不能当做构造函数</li></ul></li><li>箭头函数的语法：<ol><li>当箭头函数入参只有一个时可以省略入参括号；</li><li>当入参多余一个或没有入参时必须写括号；</li><li>当函数体只有一个 return 语句时可以省略函数体的花括号与 return 关键字。</li></ol></li><li><p>正常函数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//正常函数</span><br><span class="line">var fun3 = <span class="keyword">function</span>(a)&#123;</span><br><span class="line">    console.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//箭头函数</span><br><span class="line">var fun3 = (a)=&gt;&#123;console.log(a);&#125;</span><br><span class="line">fun3(999);</span><br></pre></td></tr></table></figure></li><li><p>比如我们用箭头函数计算一个1到100的和:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var fun4 = ()=&gt;&#123;</span><br><span class="line">    var sum=0;</span><br><span class="line">    <span class="keyword">for</span>(var i = 1; i&lt;=100; i++)&#123;</span><br><span class="line">        sum = sum+i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">console.log(fun4());// 5050</span><br></pre></td></tr></table></figure></li><li><p>箭头函数还修复了<strong>this的指向</strong>，使其<strong>永远指向词法作用域</strong>，即箭头函数在哪里生成<code>this</code>就指向哪里：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    birth: 1990,</span><br><span class="line">    getAge: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        var b = this.birth; // 1990</span><br><span class="line">        var fn = () =&gt; new Date().getFullYear() - this.birth; // this指向obj对象</span><br><span class="line">        <span class="built_in">return</span> fn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.getAge(); // 28（当前为2018年）</span><br></pre></td></tr></table></figure></li><li><p>复习一下<code>this</code>的认识:</p><ol><li>在函数体外，<code>this</code>指的就是window对象(全局函数调用)。</li><li>在函数体内，谁调用函数<code>this</code>就指向谁(对象方法调用)。</li><li>在构造函数中，<code>this</code>指的是新创建的对象(构造函数调用)。</li><li>在html标签中，<code>this</code>指的是当前的这个标签元素。</li><li>在ES6中，对于箭头函数，<code>this</code>是根据上下文结构决定的，箭头函数在哪里生成<code>this</code>就指向哪里。</li></ol></li></ul><h3 id="延展操作符"><a href="#延展操作符" class="headerlink" title="延展操作符"></a>延展操作符</h3><ul><li><p>在数组之前加上三个点(…)，可以对数组进行<strong>展开运算</strong>。通过它可以<strong>将数组作为参数</strong>直接传入函数（用<strong>数组</strong>给函数<strong>批量的传参</strong>）:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// example1</span><br><span class="line">var arr = [1,2,3,4,5];</span><br><span class="line">console.log(arr);//[1, 2, 3, 4, 5]</span><br><span class="line">console.log(...arr)// 1 2 3 4 5</span><br><span class="line"></span><br><span class="line">// example2</span><br><span class="line">var people=[<span class="string">'Wayou'</span>,<span class="string">'John'</span>,<span class="string">'Sherlock'</span>];</span><br><span class="line"><span class="keyword">function</span> sayHello(people1,people2,people3)&#123;</span><br><span class="line">    console.log(`Hello <span class="variable">$&#123;people1&#125;</span>,<span class="variable">$&#123;people2&#125;</span>,<span class="variable">$&#123;people3&#125;</span>`); //字符串模板</span><br><span class="line">&#125;</span><br><span class="line">sayHello(...people);//输出：Hello Wayou,John,Sherlock</span><br></pre></td></tr></table></figure></li><li><p>没有展开数组，打印结果如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> fun5(a,b,c,d,e,f)&#123;</span><br><span class="line">    console.log(a,b,c,d,e,f)</span><br><span class="line">&#125;</span><br><span class="line">fun5([1,2,3,4,5])</span><br><span class="line">//输出</span><br><span class="line">[1, 2, 3, 4, 5] undefined undefined undefined undefined</span><br></pre></td></tr></table></figure></li><li><p>在函数定义时可以通过…rest获取定义参数外的所有参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> foo(a, b, ...rest) &#123;</span><br><span class="line">    console.log(<span class="string">'a = '</span> + a);</span><br><span class="line">    console.log(<span class="string">'b = '</span> + b);</span><br><span class="line">    console.log(rest);</span><br><span class="line">&#125;</span><br><span class="line">foo(1, 2, 3, 4, 5);</span><br><span class="line">// 结果:</span><br><span class="line">// a = 1</span><br><span class="line">// b = 2</span><br><span class="line">// Array [ 3, 4, 5 ]</span><br></pre></td></tr></table></figure></li></ul><h3 id="关于apply和call"><a href="#关于apply和call" class="headerlink" title="关于apply和call"></a>关于apply和call</h3><ul><li>apply和call，都是对象本身没有某个属性或者方法，去引用其他对象的属性或方法，也就是说两者都可以改变this的指向。<h4 id="不同之处"><a href="#不同之处" class="headerlink" title="不同之处"></a>不同之处</h4></li><li>apply(this的指向，数组/arguments)</li><li>call(this的指向，参数1，参数2，参数3)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var color = <span class="string">"yellow"</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">showColor</span></span>()&#123;</span><br><span class="line">    console.log(this.color)</span><br><span class="line">&#125;</span><br><span class="line">var obj = &#123;</span><br><span class="line">    color:<span class="string">"red"</span>,</span><br><span class="line">&#125;</span><br><span class="line">showColor();//yellow</span><br><span class="line">//call，apply改变this的指向</span><br><span class="line">showColor.apply(obj);//red</span><br><span class="line">showColor.call(obj);//red</span><br><span class="line">showColor.apply(this);//yellow</span><br><span class="line">showColor.call(window);//yellow</span><br></pre></td></tr></table></figure></li></ul><h3 id="关于解构赋值"><a href="#关于解构赋值" class="headerlink" title="关于解构赋值"></a>关于解构赋值</h3><ul><li>ES6 允许按照一定模式，从<strong>数组</strong>和<strong>对象</strong>中<strong>提取值</strong>，对变量进行<strong>赋值</strong>，这被称为解构（Destructuring）。 </li><li>自动解析数组或对象中的值，不用以对象的方式返回。</li></ul><h4 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h4><ul><li><p>数组解构，使用变量声明关键字声明一个形参数组（[a, , b]），等号后跟一个待解构目标数组（[1, 2, 3]），解构时可以通过留空的方式跳过数组中间的个别元素，但是在形参数组中<strong>必须留有相应空位</strong>才可以继续解构之后的元素，如果要跳过的元素处于<strong>数组末端</strong>，则在形参数组中<strong>可以不予留空</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var &#123;b, c&#125; = &#123;a: 1, b: 2, c: 3&#125;;</span><br><span class="line">console.log(b); // =&gt; 2</span><br><span class="line">console.log(c); // =&gt; 3</span><br><span class="line"></span><br><span class="line">var [a,b,c] = [11,22,33]</span><br><span class="line">console.log(a,b,c)//11 22 33</span><br><span class="line">// 等同于</span><br><span class="line">var a = 1;</span><br><span class="line">var b = 2;</span><br><span class="line">var c = 3;</span><br><span class="line">console.log(a,b,c)//11 22 33</span><br><span class="line"></span><br><span class="line">var [e,[f,g],k] = [1,[2,3],5]</span><br><span class="line">console.log(e,f,g,k)//1 2 3 5</span><br></pre></td></tr></table></figure></li><li><p>以前互换两个变量的值，需要借助第三个变量，利用解构赋值，就方便很多了:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var f1 = 88;</span><br><span class="line">var f2 = 99;</span><br><span class="line">[f1,f2]=[f2,f1];</span><br><span class="line">console.log(f1,f2)//99 88</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> cal(a,b)&#123;</span><br><span class="line">    var ret1 = a+b;</span><br><span class="line">    var ret2 = a-b;</span><br><span class="line">    var ret3 = a*b;</span><br><span class="line">    var ret4 = a/b;</span><br><span class="line">    <span class="built_in">return</span> [ret1,ret2,ret3,ret4]</span><br><span class="line">&#125;</span><br><span class="line">var [r1,r2,r3,r4] = cal(10,5);</span><br><span class="line">console.log(r1,r2,r3,r4)//15 5 50 2</span><br></pre></td></tr></table></figure></li></ul><h4 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h4><ul><li><p>对象解构与数组解构大体相同，不过需要注意一点：</p><ul><li>形参对象（{b, c}）的属性或方法名必须与待解构的目标对象中的属性或方法名完全相同才能解构到对应的属性或方法。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var &#123;name, age&#125; = &#123;name:<span class="string">"张三"</span>,age:<span class="string">"20"</span>&#125;</span><br><span class="line">console.log(name, age)//张三 20</span><br><span class="line"></span><br><span class="line">var &#123;b, c&#125; = &#123;a: 1, b: 2, c: 3&#125;;</span><br><span class="line">console.log(b); // =&gt; 2</span><br><span class="line">console.log(c); // =&gt; 3</span><br></pre></td></tr></table></figure></li></ul><h4 id="对象匹配解构"><a href="#对象匹配解构" class="headerlink" title="对象匹配解构"></a>对象匹配解构</h4><ul><li>对象匹配解构是对象解构的一种延伸用法，可以在形参对象中使用：来更改解构后的变量名。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var example = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;a: 1, b: 2, c: 3&#125;;</span><br><span class="line">&#125;</span><br><span class="line">var &#123;a: d, b: e, c: f&#125; = example();</span><br><span class="line">console.log(d, e, f); // =&gt; 1, 2, 3</span><br></pre></td></tr></table></figure></li></ul><h4 id="函数入参解构"><a href="#函数入参解构" class="headerlink" title="函数入参解构"></a>函数入参解构</h4><ul><li>函数的入参解构也是对象解构的一种延伸用法，我们可以通过改写入参对象目标值为变量名的方式，在函数内部直接获取到入参对象中某个属性或方法的值。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> example(&#123;param: value&#125;) &#123;</span><br><span class="line">    <span class="built_in">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line">console.log(example(&#123;param: 5&#125;)); // =&gt; 5</span><br></pre></td></tr></table></figure></li></ul><h4 id="函数入参解构-1"><a href="#函数入参解构-1" class="headerlink" title="函数入参解构"></a>函数入参解构</h4><ul><li>这是入参解构的另一种用法，我们可以在入参对象的形参属性或方法中<strong>使用等号的方式</strong>给入参对象的某些属性或方法<strong>设定默认值</strong>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> example(&#123;x, y, z = 0&#125;) &#123;</span><br><span class="line">    <span class="built_in">return</span> x + y + z;</span><br><span class="line">&#125;</span><br><span class="line">console.log(example(&#123;x: 1, y: 2&#125;));       // =&gt; 3</span><br><span class="line">console.log(example(&#123;x: 1, y: 2, z: 3&#125;)); // =&gt; 6</span><br></pre></td></tr></table></figure></li></ul><h4 id="解构json"><a href="#解构json" class="headerlink" title="解构json"></a>解构json</h4><ul><li>解构赋值还可以解构json数据：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var jike = &#123;<span class="string">"name"</span>:<span class="string">"tom"</span>,<span class="string">"age"</span>:<span class="string">"23"</span>,<span class="string">"sex"</span>:<span class="string">"男"</span>&#125;;</span><br><span class="line">var &#123;name,age,sex&#125;=jike;</span><br><span class="line">console.log(name,age,sex)//tom 23 男</span><br></pre></td></tr></table></figure></li></ul><h3 id="string中加入include方法"><a href="#string中加入include方法" class="headerlink" title="string中加入include方法"></a>string中加入include方法</h3><ul><li><p>includes(“字符”); 用于判断字符串中是否包含某个字符</p><ul><li>存在返回true 不存在返回false。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">"hello"</span>;</span><br><span class="line">console.log( str.includes(<span class="string">"e"</span>) )//<span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>includes(“字符”,keyIndex); 用于判断字符串中下标keyIndex是否是某个字符</p><ul><li>是返回true 不是返回false。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">"hello"</span>;</span><br><span class="line">console.log( str.includes(<span class="string">"e"</span>,3) );//<span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="interable类型"><a href="#interable类型" class="headerlink" title="interable类型"></a>interable类型</h3><ul><li>为了统一集合类型，ES6标准引入了新的iterable类型，<code>Array</code>、<code>Map</code>和<code>Set</code>都属于iterable类型，具有iterable类型的集合可以通过新的<code>for … of</code>循环来<strong>遍历</strong>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var a = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</span><br><span class="line">var s = new Set([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]);</span><br><span class="line">var m = new Map([[<span class="string">'x'</span>, 1], [<span class="string">'y'</span>, 2], [<span class="string">'z'</span>, 3]]);</span><br><span class="line"><span class="keyword">for</span> (var x of a) &#123; // 遍历Array</span><br><span class="line">    alert(x); //依次弹出 A,B,C</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (var x of s) &#123; // 遍历Set</span><br><span class="line">    alert(x); //依次弹出 A,B,C</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (var x of m) &#123; // 遍历Map</span><br><span class="line">    alert(x[0] + <span class="string">'='</span> + x[1]); //依次弹出 x=1,y=2,z=3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Set"><a href="#Set" class="headerlink" title="Set()"></a>Set()</h4><ul><li>Set()是指<strong>有序列表</strong>集合(set中的元素是<strong>没有重复</strong>的)。</li><li>Set包含的方法:<ul><li><code>add()</code>、<code>has()</code>、<code>delete()</code>、<code>clear()</code>等。</li></ul></li></ul><blockquote>add()</blockquote><ul><li>add()方法用于添加元素：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var s = new Set();</span><br><span class="line">s.add(1);</span><br><span class="line">s.add(window);</span><br><span class="line">s.add(<span class="literal">true</span>);</span><br><span class="line">s.add(1);</span><br><span class="line">console.log(s);//&#123;1, Window, <span class="literal">true</span>&#125; 一共三个元素</span><br><span class="line">console.log(s.size)//数组的长度是3</span><br></pre></td></tr></table></figure></li></ul><blockquote>delete(value)</blockquote><ul><li>delete(value)用于删除指定元素：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var s = new Set();</span><br><span class="line">s.add(1);</span><br><span class="line">s.add(window);</span><br><span class="line">s.add(<span class="literal">true</span>);</span><br><span class="line">s.delete(window);</span><br><span class="line">console.log(s)   //1  <span class="literal">true</span></span><br><span class="line">console.log(s.size)   //2</span><br></pre></td></tr></table></figure></li></ul><blockquote>has(value)</blockquote><ul><li>has(value)用来判断指定的值是否在set集合中：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var s = new Set();</span><br><span class="line">s.add(1);</span><br><span class="line">s.add(window);</span><br><span class="line">// 存在返回<span class="literal">true</span> 不存在返回<span class="literal">false</span></span><br><span class="line">console.log( s.has(1) )//<span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><blockquote>clear()</blockquote><ul><li>clear() 用来清空set集合：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var s = new Set();</span><br><span class="line">s.add(1);</span><br><span class="line">s.add(window);</span><br><span class="line">s.clear()</span><br><span class="line">console.log(s)//此时为空</span><br></pre></td></tr></table></figure></li></ul><blockquote>例子</blockquote><ul><li>生成10个1-20的随机数，要求不可以重复：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr3 = new Set(); </span><br><span class="line"><span class="keyword">while</span>(arr3.size&lt;10)&#123; </span><br><span class="line">    var yuan = parseInt(Math.random() * (20 - 1 + 1) + 1); </span><br><span class="line">    arr3.add(yuan); </span><br><span class="line">&#125; </span><br><span class="line">console.log(arr3)</span><br></pre></td></tr></table></figure></li></ul><h4 id="Map"><a href="#Map" class="headerlink" title="Map()"></a>Map()</h4><ul><li>Map() 用来存放键值对的集合 key/value<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var map = new Map();</span><br><span class="line">map.set(<span class="string">"name"</span>,<span class="string">"张三"</span>);</span><br><span class="line">map.set(<span class="string">"age"</span>,20);</span><br><span class="line">console.log(map)    //Map &#123;<span class="string">"name"</span> =&gt; <span class="string">"张三"</span>, <span class="string">"age"</span> =&gt; 20&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote>get(key)</blockquote><ul><li>get(key)根据key值取得value：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log( map.get(<span class="string">"name"</span>))//张三</span><br></pre></td></tr></table></figure></li></ul><blockquote>has()</blockquote><ul><li>has() 判断是否存在某个键值对：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log( map.has(<span class="string">"age"</span>) ) //<span class="literal">true</span></span><br><span class="line">console.log( map.has(<span class="string">"age1"</span>) ) //<span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ul><blockquote>delete()</blockquote><ul><li>delete() 删除集合中的键值对：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map.delete(<span class="string">"name"</span>); // 删除key <span class="string">"name"</span></span><br><span class="line">console.log(map);//Map &#123;<span class="string">"age"</span> =&gt; 20&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote>clear()</blockquote><ul><li>clear() 清空集合：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map.clear();</span><br><span class="line">console.log(map);//Map(0) &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="增强的对象字面量"><a href="#增强的对象字面量" class="headerlink" title="增强的对象字面量"></a>增强的对象字面量</h3><ul><li>实现继承，可以直接在对象字面量里面定义原型，不用再用 <code>function</code> 关键字。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//  通过对象字面量创建对象</span><br><span class="line">var  human = &#123;</span><br><span class="line">    <span class="function"><span class="title">breathe</span></span>  () &#123; // 不需要使用<span class="keyword">function</span>关键字</span><br><span class="line">        console.log (<span class="string">'breathing...'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var worker = &#123;</span><br><span class="line">    __proto__:human, //设置此对象的原型为human，相当于继承human</span><br><span class="line">    company：‘freeLancer’，</span><br><span class="line">    <span class="function"><span class="title">work</span></span>() &#123;</span><br><span class="line">       console.log (<span class="string">'working...'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">human.breathe();//输出 ‘breathing...’</span><br><span class="line">//调用继承来的breathe方法</span><br><span class="line">worker.breathe();//输出 ‘breathing...’</span><br></pre></td></tr></table></figure></li></ul><h3 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h3><ul><li>ES6 里面 <code>Promise</code> 可以用来<strong>避免异步操作函数里的嵌套回调</strong>（callback hell）问题，采用链式调用替代：’.then().then()’。</li><li><p>适用于 ajax网络请求、读取localstorage等操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//创建promise</span><br><span class="line">var promise = new Promise(<span class="keyword">function</span>(resolve, reject) &#123;</span><br><span class="line">    // 进行一些异步或耗时操作</span><br><span class="line">    <span class="keyword">if</span> ( /*如果成功 */ ) &#123;</span><br><span class="line">        resolve(<span class="string">"Stuff worked!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(Error(<span class="string">"It broke"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">//绑定处理程序</span><br><span class="line">promise.then(<span class="keyword">function</span>(result) &#123;</span><br><span class="line">    //promise成功的话会执行这里</span><br><span class="line">    console.log(result); // <span class="string">"Stuff worked!"</span></span><br><span class="line">&#125;, <span class="keyword">function</span>(err) &#123;</span><br><span class="line">    //promise失败会执行这里</span><br><span class="line">    console.log(err); // Error: <span class="string">"It broke"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>ES5：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="title">function</span></span>()&#123;  </span><br><span class="line">    console.log(<span class="string">'Yay!'</span>);  </span><br><span class="line">&#125;, 1000);</span><br></pre></td></tr></table></figure></li><li><p>ES6：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var wait1000 = new Promise(<span class="keyword">function</span>(resolve,reject)&#123;</span><br><span class="line">    setTimeout(resolve,1000);</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    console.log(<span class="string">'Yay!'</span>); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>如果有更多的嵌套逻辑在setTimeout()回调函数中，好处会明显一点。</p></li><li><p>ES5：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="title">function</span></span>()&#123;  </span><br><span class="line">    console.log(<span class="string">'Yay!'</span>);  </span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span>()&#123;  </span><br><span class="line">        console.log(<span class="string">'Wheeyee!'</span>);  </span><br><span class="line">    &#125;, 1000)  </span><br><span class="line">&#125;, 1000);</span><br></pre></td></tr></table></figure></li><li><p>ES6：可以用promise重写:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var wait1000 = new Promise(<span class="keyword">function</span>(resolve,reject)&#123;</span><br><span class="line">    setTimeout(resolve,1000);</span><br><span class="line">&#125;);</span><br><span class="line">wait1000()</span><br><span class="line">    .<span class="keyword">then</span>(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        console.log(<span class="string">'Yay!'</span>);  </span><br><span class="line">        <span class="built_in">return</span> wait1000()</span><br><span class="line">    &#125;).<span class="keyword">then</span>(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        console.log(<span class="string">'Wheeyee!'</span>); </span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="模板对象"><a href="#模板对象" class="headerlink" title="模板对象"></a>模板对象</h3><h4 id="在字符串里面输出变量。"><a href="#在字符串里面输出变量。" class="headerlink" title="在字符串里面输出变量。"></a>在字符串里面输出变量。</h4><ul><li><p>ES5：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var name = <span class="string">'Your name is '</span> + first + <span class="string">' '</span> + last + <span class="string">'.'</span>;  </span><br><span class="line">var url = <span class="string">'http://localhost:3000/api/messages/'</span> + id;</span><br></pre></td></tr></table></figure></li><li><p>ES6：，使用新的语法 $ {NAME}，并把它放在反引号里。</p></li><li><p>可以使用反引号（<code>`</code>，位于 <code>TAB</code> 上方）来输入一段简单明了的多行字符串，还可以在字符串中通过 <code>${变量名}</code> 的形式方便地插入一个变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var name = &apos;Your name is $&#123;first&#125; $&#123;last&#125;.&apos;;</span><br><span class="line">var url = &apos;http://loalhost:3000/api/messages/$&#123;id&#125;&apos;;</span><br></pre></td></tr></table></figure></li><li><p>好处： 这里的$ {NAME}直接当做字符串用，无需写加号。</p></li></ul><h4 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h4><ul><li><p>ES5:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var roadPoem = <span class="string">'Then took the other, as just as fair,\n'</span>  </span><br><span class="line">    + <span class="string">'And having perhaps the better claim,\n'</span>  </span><br><span class="line">    + <span class="string">'Because it was grassy and wanted wear,\n'</span>  </span><br><span class="line">    + <span class="string">'Though as for that the passing there,\n'</span>  </span><br><span class="line">    + <span class="string">'Had worn them really about the same.'</span>;</span><br></pre></td></tr></table></figure></li><li><p>ES6：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var roadPoem = `Then took the other, as just as fair, </span><br><span class="line">    And having perhaps the better claim, </span><br><span class="line">    Because it was grassy and wanted wear,  </span><br><span class="line">    Though as <span class="keyword">for</span> that the passing there ,</span><br><span class="line">    Had worn them really about the same.`;</span><br></pre></td></tr></table></figure></li><li><p>好处：直接一个反引号，将所有的字符串放进去即可，中间可以随意换行。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ECMAScript 6.0（以下简称ES6）是JavaScript语言的下一代标准，已经在2015年6月正式发布了。它的目标，是&lt;strong&gt;使得JavaScript语言可以用来编写复杂的大型应用程序&lt;/strong&gt;，成为&lt;strong&gt;企业级开发语言&lt;/strong&gt;。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
      <category term="ES6" scheme="https://chongtianhong.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ThinkJS学习笔记(三)</title>
    <link href="https://chongtianhong.github.io/2018/03/07/thinkjs3/"/>
    <id>https://chongtianhong.github.io/2018/03/07/thinkjs3/</id>
    <published>2018-03-07T11:02:24.000Z</published>
    <updated>2018-03-07T14:32:50.881Z</updated>
    
    <content type="html"><![CDATA[<h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><h4 id="模型介绍"><a href="#模型介绍" class="headerlink" title="模型介绍"></a>模型介绍</h4><ul><li>项目开发中，经常要操作数据库，如：<strong>增删改查</strong>等操作。模型就是为了方便操作数据库进行的封装，<strong>一个模型对应数据库中的一个数据表</strong>。</li><li>目前支持的数据库有：<code>MySQL</code>，<code>MongoDB</code>，<code>PostgreSQL</code> 和 <code>SQLite</code>。<a id="more"></a></li></ul><h5 id="模型实例化"><a href="#模型实例化" class="headerlink" title="模型实例化"></a>模型实例化</h5><ul><li>模型实例化在不同的地方使用的方式有所差别，如果当前类含有 model 方法，那可以直接通过该方法实例化,如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.controller.base &#123;</span><br><span class="line">    <span class="function"><span class="title">indexAction</span></span>()&#123;</span><br><span class="line">        <span class="built_in">let</span> model = this.model(<span class="string">'user'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h5><ul><li><p>模型中提供了很多链式调用的方法（类似 jQuery 里的链式调用），通过链式调用方法可以方便的进行数据操作。链式调用是通过返回 <code>this</code> 来实现的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">  /**</span><br><span class="line">   * 获取列表数据</span><br><span class="line">   */</span><br><span class="line">    async <span class="function"><span class="title">getList</span></span>()&#123;</span><br><span class="line">        <span class="built_in">let</span> data = await this.field(<span class="string">'title, content'</span>).<span class="built_in">where</span>(&#123;</span><br><span class="line">            id: [<span class="string">'&gt;'</span>, 100]</span><br><span class="line">        &#125;).order(<span class="string">'id DESC'</span>).select();</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>模型中支持链式调用的方法有：</p><ul><li><code>where</code>, 用于查询或者更新条件的定义</li><li><code>table</code>, 用于定义要操作的数据表名称</li><li><code>alias</code>, 用于给当前数据表定义别名</li><li><code>data</code>, 用于新增或者更新数据之前的数据对象赋值</li><li><code>field</code>, 用于定义要查询的字段，也支持字段排除</li><li><code>order</code>, 用于对结果进行排序</li><li><code>limit</code>, 用于限制查询结果数据</li><li><code>page</code>, 用于查询分页，生成 sql 语句时会自动转换为 limit</li><li><code>group</code>, 用于对查询的 group 支持</li><li><code>having</code>, 用于对查询的 having 支持</li><li><code>join</code>, 用于对查询的 join 支持</li><li><code>union</code>, 用于对查询的 union 支持</li><li><code>distinct</code>, 用于对查询的 distinct 支持</li><li><code>cache</code>, 用于查询缓存</li></ul></li></ul><h4 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h4><ul><li><p>数据库默认配置如下，可以在 <code>src/common/config/db.js</code> 中进行修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">    <span class="built_in">type</span>: <span class="string">'mysql'</span>,</span><br><span class="line">    log_sql: <span class="literal">true</span>,</span><br><span class="line">    log_connect: <span class="literal">true</span>,</span><br><span class="line">    adapter: &#123;</span><br><span class="line">    mysql: &#123;</span><br><span class="line">        host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        port: <span class="string">''</span>,</span><br><span class="line">        database: <span class="string">''</span>, //数据库名称</span><br><span class="line">        user: <span class="string">''</span>, //数据库帐号</span><br><span class="line">        password: <span class="string">''</span>, //数据库密码</span><br><span class="line">        prefix: <span class="string">'think_'</span>,</span><br><span class="line">        encoding: <span class="string">'utf8'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mongo: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>也可以在其他模块下配置，这样请求该模块时就会使用对应的配置。</p></li></ul><h4 id="CRUD-操作"><a href="#CRUD-操作" class="headerlink" title="CRUD 操作"></a>CRUD 操作</h4><h5 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h5><blockquote>添加一条数据</blockquote><ul><li>使用 <code>add</code> 方法可以添加一条数据，返回值为<strong>插入数据的 id</strong>。如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.controller.base &#123;</span><br><span class="line">    async <span class="function"><span class="title">addAction</span></span>()&#123;</span><br><span class="line">        <span class="built_in">let</span> model = this.model(<span class="string">'user'</span>);</span><br><span class="line">        <span class="built_in">let</span> insertId = await model.add(&#123;name: <span class="string">'xxx'</span>, <span class="built_in">pwd</span>: <span class="string">'yyy'</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote>添加多条数据</blockquote><ul><li>使用 <code>addMany</code> 方法可以添加多条数据，如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.controller.base &#123;</span><br><span class="line">    async <span class="function"><span class="title">addAction</span></span>()&#123;</span><br><span class="line">        <span class="built_in">let</span> model = this.model(<span class="string">'user'</span>);</span><br><span class="line">        <span class="built_in">let</span> insertId = await model.addMany([</span><br><span class="line">            &#123;name: <span class="string">'xxx'</span>, <span class="built_in">pwd</span>: <span class="string">'yyy'</span>&#125;,</span><br><span class="line">            &#123;name: <span class="string">'xxx1'</span>, <span class="built_in">pwd</span>: <span class="string">'yyy1'</span>&#125;</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote>thenAdd</blockquote><ul><li>数据库设计时，我们经常需要把某个字段设为唯一(主键)，表示这个字段值不能重复。这样添加数据的时候只能先去查询下这个数据值是否存在，如果不存在才进行插入操作。</li><li>模型中提供了 <code>thenAdd</code> 方法简化这一操作。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.controller.base &#123;</span><br><span class="line">    async <span class="function"><span class="title">addAction</span></span>()&#123;</span><br><span class="line">        <span class="built_in">let</span> model = this.model(<span class="string">'user'</span>);</span><br><span class="line">        //第一个参数为要添加的数据，第二个参数为添加的条件，根据第二个参数的条件查询无相关记录时才会添加</span><br><span class="line">        <span class="built_in">let</span> result = await model.thenAdd(&#123;name: <span class="string">'xxx'</span>, <span class="built_in">pwd</span>: <span class="string">'yyy'</span>&#125;, &#123;name: <span class="string">'xxx'</span>&#125;);</span><br><span class="line">        // result returns &#123;id: 1000, <span class="built_in">type</span>: <span class="string">'add'</span>&#125; or &#123;id: 1000, <span class="built_in">type</span>: <span class="string">'exist'</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h5><blockquote>update</blockquote><ul><li><p>更新数据使用 <code>update</code> 方法，返回值为<strong>影响的行数</strong>。如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.controlle.base &#123;</span><br><span class="line">    async <span class="function"><span class="title">updateAction</span></span>()&#123;</span><br><span class="line">        <span class="built_in">let</span> model = this.model(<span class="string">'user'</span>);</span><br><span class="line">        <span class="built_in">let</span> affectedRows = await model.where(&#123;name: <span class="string">'thinkjs'</span>&#125;).update(&#123;email: <span class="string">'admin@thinkjs.org'</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>默认情况下更新数据必须添加 <code>where</code> 条件，以防止误操作导致所有数据被错误的更新。如果确认是<strong>更新所有数据</strong>的需求，可以添加 <code>1=1</code> 的 <code>where</code> 条件进行，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.controlle.base &#123;</span><br><span class="line">    async <span class="function"><span class="title">updateAction</span></span>()&#123;</span><br><span class="line">        <span class="built_in">let</span> model = this.model(<span class="string">'user'</span>);</span><br><span class="line">        <span class="built_in">let</span> affectedRows = await model.where(<span class="string">'1=1'</span>).update(&#123;email: <span class="string">'admin@thinkjs.org'</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote>increment</blockquote><ul><li>可以通过 <code>increment</code> 方法给符合条件的字段增加特定的值，如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    updateViewNums(id)&#123;</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;id: id&#125;).increment(<span class="string">'view_nums'</span>, 1); //将阅读数加 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote>decrement</blockquote><ul><li>可以通过 <code>decrement</code> 方法给符合条件的字段减少特定的值，如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    updateViewNums(id)&#123;</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;id: id&#125;).decrement(<span class="string">'coins'</span>, 10); //将金币减 10 </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h5><ul><li>模型中提供了多种方式来查询数据，如：查询<strong>单条</strong>数据，查询<strong>多条</strong>数据，读取<strong>字段值</strong>，读取<strong>最大值</strong>，读取<strong>总条数</strong>等。</li></ul><blockquote>查询单条数据</blockquote><ul><li><p>可以使用 <code>find</code> 方法查询<strong>单条</strong>数据，返回值为<strong>对象</strong>。如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.controller.base &#123;</span><br><span class="line">    async <span class="function"><span class="title">listAction</span></span>()&#123;</span><br><span class="line">        <span class="built_in">let</span> model = this.model(<span class="string">'user'</span>);</span><br><span class="line">        <span class="built_in">let</span> data = await model.where(&#123;name: <span class="string">'thinkjs'</span>&#125;).find(); // 首条符合</span><br><span class="line">        //data returns &#123;name: <span class="string">'thinkjs'</span>, email: <span class="string">'admin@thinkjs.org'</span>, ...&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果数据表没有对应的数据，那么返回值为空对象 {}，可以通过 <code>think.isEmpty</code> 方法来判断返回值是否为空。</p></li></ul><blockquote>查询多条数据</blockquote><ul><li><p>可以使用 <code>select</code> 方法查询<strong>多条</strong>数据，返回值为<strong>数组</strong>。如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.controller.base &#123;</span><br><span class="line">    async <span class="function"><span class="title">listAction</span></span>()&#123;</span><br><span class="line">        <span class="built_in">let</span> model = this.model(<span class="string">'user'</span>);</span><br><span class="line">        <span class="built_in">let</span> data = await model.limit(2).select();</span><br><span class="line">        //data returns [&#123;name: <span class="string">'thinkjs'</span>, email: <span class="string">'admin@thinkjs.org'</span>&#125;, ...]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果数据表中没有对应的数据，那么返回值为空数组 <code>[]</code>，可以通过 <code>think.isEmpty</code> 方法来判断返回值是否为空。</p></li></ul><blockquote>分页查询数据</blockquote><ul><li>页面中经常遇到按分页来展现某些数据，这种情况下就需要先查询总的条数，然后在查询当前分页下的数据。查询完数据后还要计算有多少页。</li><li><p>模型中提供了 <code>countSelect</code> 方法来方便这一操作，会自动进行总条数的查询:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.controller.base &#123;</span><br><span class="line">    async <span class="function"><span class="title">listAction</span></span>()&#123;</span><br><span class="line">        <span class="built_in">let</span> model = this.model(<span class="string">'user'</span>);</span><br><span class="line">        <span class="built_in">let</span> data = await model.page(this.get(<span class="string">'page'</span>), 10).countSelect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>返回值格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  numsPerPage: 10, //每页显示的条数</span><br><span class="line">  currentPage: 1, //当前页</span><br><span class="line">  count: 100, //总条数</span><br><span class="line">  totalPages: 10, //总页数</span><br><span class="line">  data: [&#123; //当前页下的数据列表</span><br><span class="line">    name: <span class="string">'thinkjs'</span>,</span><br><span class="line">    email: <span class="string">'admin@thinkjs.org'</span></span><br><span class="line">  &#125;, ...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果传递的当前页数超过了页数范围，可以通过传递参数进行修正。<code>true</code> 为修正到第一页， <code>false</code> 为修正到最后一页，即： <code>countSelect(true)</code> 或 <code>countSelect(false)</code>。</p></li><li>如果总条数无法直接查询，可以将<strong>总条数</strong>作为参数传递进去，如： <code>countSelect(1000)</code>，表示总条数有1000条。</li></ul><blockquote>count</blockquote><ul><li>可以通过 <code>count</code> 方法查询符合条件的<strong>总条数</strong>，如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">getMin</span></span>()&#123;</span><br><span class="line">        //查询 status 为 publish 的总条数</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;status: <span class="string">'publish'</span>&#125;).count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote>sum</blockquote><ul><li>可以通过 <code>sum</code> 方法查询<strong>符合条件的字段总和</strong>，如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">getMin</span></span>()&#123;</span><br><span class="line">        //查询 status 为 publish 字段 view_nums 的总和</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;status: <span class="string">'publish'</span>&#125;).sum(<span class="string">'view_nums'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote>max</blockquote><ul><li>可以通过 <code>max</code> 方法查询<strong>符合条件的最大值</strong>，如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">getMin</span></span>()&#123;</span><br><span class="line">        //查询 status 为 publish，字段 comments 的最大值</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;status: <span class="string">'publish'</span>&#125;).max(<span class="string">'comments'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote>min</blockquote><ul><li>可以通过 <code>min</code> 方法查询<strong>符合条件的最小值</strong>，如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">getMin</span></span>()&#123;</span><br><span class="line">        //查询 status 为 publish，字段 comments 的最小值</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;status: <span class="string">'publish'</span>&#125;).min(<span class="string">'comments'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote>min</blockquote><ul><li>可以通过 <code>min</code> 方法查询<strong>符合条件的最小值</strong>，如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">getMin</span></span>()&#123;</span><br><span class="line">        //查询 status 为 publish，字段 comments 的最小值</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;status: <span class="string">'publish'</span>&#125;).min(<span class="string">'comments'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h5><ul><li><p>为了性能优化，项目中经常要<strong>对一些从数据库中查询的数据进行缓存</strong>。如果手工将查询的数据进行缓存，势必比较麻烦，模型中直接提供了 <code>cache</code> 方法来设置查询缓存。如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">getList</span></span>()&#123;</span><br><span class="line">        //设定缓存 key 和缓存时间</span><br><span class="line">        <span class="built_in">return</span> this.cache(<span class="string">'get_list'</span>, 3600).<span class="built_in">where</span>(&#123;id: &#123;<span class="string">'&gt;'</span>: 100&#125;&#125;).select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>上面的代码为对查询结果进行缓存，如果已经有了缓存，直接从缓存里读取，没有的话才从数据库里查询。缓存保存的 <code>key</code> 为 <code>get_list</code>，缓存时间为一个小时。</p></li><li>也可以不指定缓存 <code>key</code>，这样会自动根据 SQL 语句生成一个缓存 <code>key</code>。如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">getList</span></span>()&#123;</span><br><span class="line">        //只设定缓存时间</span><br><span class="line">        <span class="built_in">return</span> this.cache(3600).<span class="built_in">where</span>(&#123;id: &#123;<span class="string">'&gt;'</span>: 100&#125;&#125;).select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h5><ul><li>可以使用 <code>delete</code> 方法来删除数据，返回值为影响的行数。如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.controller.base &#123;</span><br><span class="line">    async <span class="function"><span class="title">deleteAction</span></span>()&#123;</span><br><span class="line">        <span class="built_in">let</span> model = this.model(<span class="string">'user'</span>);</span><br><span class="line">        <span class="built_in">let</span> affectedRows = await model.where(&#123;id: [<span class="string">'&gt;'</span>, 100]&#125;).delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="模型中更多的操作方式"><a href="#模型中更多的操作方式" class="headerlink" title="模型中更多的操作方式"></a>模型中更多的操作方式</h4><h5 id="model-limit-offset-length"><a href="#model-limit-offset-length" class="headerlink" title="model.limit(offset, length)"></a>model.limit(offset, length)</h5><ul><li>设置查询结果的限制条件。</li><li>offset {Number} 设置查询的起始位置</li><li>length {Number} 设置查询的数据长度</li><li><p>return {this}</p><ul><li><p>限制数据长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">getList</span></span>()&#123;</span><br><span class="line">        //查询20条数据</span><br><span class="line">        <span class="built_in">return</span> this.limit(20).<span class="built_in">where</span>(&#123;id: &#123;<span class="string">'&gt;'</span>: 100&#125;&#125;).select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>限制数据起始位置和长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">getList</span></span>()&#123;</span><br><span class="line">        //从起始位置100开始查询20条数据</span><br><span class="line">        <span class="built_in">return</span> this.limit(100, 20).<span class="built_in">where</span>(&#123;id: &#123;<span class="string">'&gt;'</span>: 100&#125;&#125;).select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>也可以直接传入一个数组，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">getList</span></span>()&#123;</span><br><span class="line">        //从起始位置100开始查询20条数据</span><br><span class="line">        <span class="built_in">return</span> this.limit([100, 20]).<span class="built_in">where</span>(&#123;id: &#123;<span class="string">'&gt;'</span>: 100&#125;&#125;).select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="model-page-page-listRows"><a href="#model-page-page-listRows" class="headerlink" title="model.page(page, listRows)"></a>model.page(page, listRows)</h5><ul><li>设置查询分页数据，自动转化为 <code>limit</code> 数据。</li><li>page {Number} 当前页，从 1 开始</li><li>listRows {Number} 每页的条数</li><li><p>return {this}</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">getList</span></span>()&#123;</span><br><span class="line">        //查询第 2 页数据，每页 10 条数据</span><br><span class="line">        <span class="built_in">return</span> this.page(2, 10).<span class="built_in">where</span>(&#123;id: &#123;<span class="string">'&gt;'</span>: 100&#125;&#125;).select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>也可以直接设置一个参数为数组，关联模型等情况下可能会有用。如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">getList</span></span>()&#123;</span><br><span class="line">        //查询第 2 页数据，每页 10 条数据</span><br><span class="line">        <span class="built_in">return</span> this.page([2, 10]).<span class="built_in">where</span>(&#123;id: &#123;<span class="string">'&gt;'</span>: 100&#125;&#125;).select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="model-where-where"><a href="#model-where-where" class="headerlink" title="model.where(where)"></a>model.where(where)</h5><ul><li>设置 where 查询条件。可以通过属性 _logic 设置逻辑，默认为 AND。可以通过属性 _complex 设置复合查询。</li><li>where {String | Object} where 条件</li><li>return {this}</li><li><code>注</code>：1、以下示例不适合 mongo model，mongo 中设置 where 条件请见 model.mongo 里的 where 条件设定。2、where 条件中的值需要在 Logic 里做数据校验，否则可能会有漏洞。</li></ul><blockquote>普通条件</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">where1</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user`</span><br><span class="line">        <span class="built_in">return</span> this.where().select();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">where2</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` WHERE ( `id` = 10 )</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;id: 10&#125;).select();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">where3</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` WHERE ( id = 10 OR id &lt; 2 )</span><br><span class="line">        <span class="built_in">return</span> this.where(<span class="string">'id = 10 OR id &lt; 2'</span>).select();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">where4</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` WHERE ( `id` != 10 )</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;id: [<span class="string">'!='</span>, 10]&#125;).select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote>null 条件</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">where1</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` <span class="built_in">where</span> ( title IS NULL );</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;title: null&#125;).select();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">where2</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` <span class="built_in">where</span> ( title IS NOT NULL );</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;title: [<span class="string">'!='</span>, null]&#125;).select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote>LIKE 条件</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">where1</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` WHERE ( `title` NOT LIKE <span class="string">'welefen'</span> )</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;title: [<span class="string">'NOTLIKE'</span>, <span class="string">'welefen'</span>]&#125;).select();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">where2</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` WHERE ( `title` LIKE <span class="string">'%welefen%'</span> )</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;title: [<span class="string">'like'</span>, <span class="string">'%welefen%'</span>]&#125;).select();</span><br><span class="line">    &#125;</span><br><span class="line">    //like 多个值</span><br><span class="line">    <span class="function"><span class="title">where3</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` WHERE ( (`title` LIKE <span class="string">'welefen'</span> OR `title` LIKE <span class="string">'suredy'</span>) )</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;title: [<span class="string">'like'</span>, [<span class="string">'welefen'</span>, <span class="string">'suredy'</span>]]&#125;).select();</span><br><span class="line">    &#125;</span><br><span class="line">    //多个字段或的关系 like 一个值</span><br><span class="line">    <span class="function"><span class="title">where4</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` WHERE ( (`title` LIKE <span class="string">'%welefen%'</span>) OR (`content` LIKE <span class="string">'%welefen%'</span>) )</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;<span class="string">'title|content'</span>: [<span class="string">'like'</span>, <span class="string">'%welefen%'</span>]&#125;).select();</span><br><span class="line">    &#125;</span><br><span class="line">    //多个字段与的关系 Like 一个值</span><br><span class="line">    <span class="function"><span class="title">where5</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` WHERE ( (`title` LIKE <span class="string">'%welefen%'</span>) AND (`content` LIKE <span class="string">'%welefen%'</span>) )</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;<span class="string">'title&amp;content'</span>: [<span class="string">'like'</span>, <span class="string">'%welefen%'</span>]&#125;).select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote>IN 条件</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extens think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">where1</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` WHERE ( `id` IN (<span class="string">'10'</span>,<span class="string">'20'</span>) )</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;id: [<span class="string">'IN'</span>, <span class="string">'10,20'</span>]&#125;).select(); //字符串</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">where2</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` WHERE ( `id` IN (10,20) )</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;id: [<span class="string">'IN'</span>, [10, 20]]&#125;).select(); // 数组</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">where3</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` WHERE ( `id` NOT IN (10,20) )</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;id: [<span class="string">'NOTIN'</span>, [10, 20]]&#125;).select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote>BETWEEN 查询</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extens think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">where1</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` WHERE (  (`id` BETWEEN 1 AND 2) )</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;id: [<span class="string">'BETWEEN'</span>, 1, 2]&#125;).select();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">where2</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` WHERE (  (`id` BETWEEN <span class="string">'1'</span> AND <span class="string">'2'</span>) )</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;id: [<span class="string">'between'</span>, <span class="string">'1,2'</span>]&#125;).select(); //字符串</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote>多字段查询</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">where1</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` WHERE ( `id` = 10 ) AND ( `title` = <span class="string">'www'</span> )</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;id: 10, title: <span class="string">"www"</span>&#125;).select();</span><br><span class="line">    &#125;</span><br><span class="line">    //修改逻辑为 OR</span><br><span class="line">    <span class="function"><span class="title">where2</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` WHERE ( `id` = 10 ) OR ( `title` = <span class="string">'www'</span> )</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;id: 10, title: <span class="string">"www"</span>, _logic: <span class="string">'OR'</span>&#125;).select();</span><br><span class="line">    &#125;</span><br><span class="line">    //修改逻辑为 XOR</span><br><span class="line">    <span class="function"><span class="title">where2</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` WHERE ( `id` = 10 ) XOR ( `title` = <span class="string">'www'</span> )</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;id: 10, title: <span class="string">"www"</span>, _logic: <span class="string">'XOR'</span>&#125;).select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote>多条件查询</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">where1</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` WHERE ( `id` &gt; 10 AND `id` &lt; 20 )</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;id: &#123;<span class="string">'&gt;'</span>: 10, <span class="string">'&lt;'</span>: 20&#125;&#125;).select();</span><br><span class="line">    &#125;</span><br><span class="line">    //修改逻辑为 OR </span><br><span class="line">    <span class="function"><span class="title">where2</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` WHERE ( `id` &lt; 10 OR `id` &gt; 20 )</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;id: &#123;<span class="string">'&lt;'</span>: 10, <span class="string">'&gt;'</span>: 20, _logic: <span class="string">'OR'</span>&#125;&#125;).select()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote>复合查询</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">where1</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` WHERE ( `title` = <span class="string">'test'</span> ) AND (  ( `id` IN (1,2,3) ) OR ( `content` = <span class="string">'www'</span> ) )</span><br><span class="line">        <span class="built_in">return</span> this.where(&#123;</span><br><span class="line">            title: <span class="string">'test'</span>,</span><br><span class="line">            _complex: &#123;id: [<span class="string">'IN'</span>, [1, 2, 3]],</span><br><span class="line">                content: <span class="string">'www'</span>,</span><br><span class="line">                _logic: <span class="string">'or'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).select()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="model-field-field"><a href="#model-field-field" class="headerlink" title="model.field(field)"></a>model.field(field)</h5><ul><li>设置要查询的字段。</li><li>field {String | Array} 设置要查询的字段，可以是字符串，也可以是数组</li><li>return {this}</li></ul><blockquote>字符串方式</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.controller.base &#123;</span><br><span class="line">    async <span class="function"><span class="title">indexAction</span></span>()&#123;</span><br><span class="line">        <span class="built_in">let</span> model = this.model(<span class="string">'user'</span>);</span><br><span class="line">        //设置要查询的字符串，字符串方式，多个用逗号隔开</span><br><span class="line">        <span class="built_in">let</span> data = await model.field(<span class="string">'name,title'</span>).select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote>数组方式</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.controller.base &#123;</span><br><span class="line">    async <span class="function"><span class="title">indexAction</span></span>()&#123;</span><br><span class="line">        <span class="built_in">let</span> model = this.model(<span class="string">'user'</span>);</span><br><span class="line">        //设置要查询的字符串，数组方式</span><br><span class="line">        <span class="built_in">let</span> data = await model.field([<span class="string">'name'</span>,<span class="string">'title'</span>]).select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="model-alias-tableAlias"><a href="#model-alias-tableAlias" class="headerlink" title="model.alias(tableAlias)"></a>model.alias(tableAlias)</h5><ul><li>设置表别名。</li><li>tableAlias {String} 表别名</li><li>return {this}<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">getList</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM think_user AS a;</span><br><span class="line">        <span class="built_in">return</span> this.alias(<span class="string">'a'</span>).select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="model-order-order"><a href="#model-order-order" class="headerlink" title="model.order(order)"></a>model.order(order)</h5><ul><li>设置排序方式。</li><li>order {String | Array | Object} 排序方式</li><li>return {this}</li></ul><blockquote>字符串</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">getList</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` ORDER BY id DESC</span><br><span class="line">        <span class="built_in">return</span> this.order(<span class="string">'id DESC'</span>).select();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getList1</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` ORDER BY id DESC, name ASC</span><br><span class="line">        <span class="built_in">return</span> this.order(<span class="string">'id DESC, name ASC'</span>).select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote>数组</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">getList</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` ORDER BY id DESC,name ASC</span><br><span class="line">        <span class="built_in">return</span> this.order([<span class="string">'id DESC'</span>, <span class="string">'name ASC'</span>]).select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote>对象</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">getList</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` ORDER BY `id` DESC,`name` ASC</span><br><span class="line">        <span class="built_in">return</span> this.order(&#123;</span><br><span class="line">            id: <span class="string">'DESC'</span>,</span><br><span class="line">            name: <span class="string">'ASC'</span></span><br><span class="line">        &#125;).select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="model-join-join"><a href="#model-join-join" class="headerlink" title="model.join(join)"></a>model.join(join)</h5><ul><li>组合查询，支持字符串、数组和对象等多种方式。</li><li>join {String | Object | Array} 要组合的查询语句，默认为 LEFT JOIN</li><li>return {this}</li></ul><blockquote>对象：单个表</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">getList</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` INNER JOIN `think_cate` AS c ON think_user.`cate_id`=c.`id`</span><br><span class="line">        <span class="built_in">return</span> this.join(&#123;</span><br><span class="line">            table: <span class="string">'cate'</span>, </span><br><span class="line">            join: <span class="string">'inner'</span>, //join 方式，有 left, right, inner 3 种方式</span><br><span class="line">            as: <span class="string">'c'</span>, // 表别名</span><br><span class="line">            on: [<span class="string">'cate_id'</span>, <span class="string">'id'</span>] //ON 条件</span><br><span class="line">        &#125;).select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote>对象：多次 JOIN</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">getList</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM think_user AS a LEFT JOIN `think_cate` AS c ON a.`cate_id`=c.`id` LEFT JOIN `think_group_tag` AS d ON a.`id`=d.`group_id`</span><br><span class="line">        <span class="built_in">return</span> this.alias(<span class="string">'a'</span>).join(&#123;</span><br><span class="line">            table: <span class="string">'cate'</span>,</span><br><span class="line">            join: <span class="string">'left'</span>, //join 方式，有 left, right, inner 3 种方式</span><br><span class="line">            as: <span class="string">'c'</span>, // 表别名</span><br><span class="line">            on: [<span class="string">'cate_id'</span>, <span class="string">'id'</span>] //ON 条件</span><br><span class="line">        &#125;).join(&#123;</span><br><span class="line">            table: <span class="string">'group_tag'</span>,</span><br><span class="line">            join: <span class="string">'left'</span>, //join 方式，有 left, right, inner 3 种方式</span><br><span class="line">            as: <span class="string">'d'</span>, // 表别名</span><br><span class="line">            on: [<span class="string">'id'</span>, <span class="string">'group_id'</span>] //ON 条件</span><br><span class="line">        &#125;).select()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote>对象：多个表</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">getList</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` LEFT JOIN `think_cate` ON think_user.`id`=think_cate.`id` LEFT JOIN `think_group_tag` ON think_user.`id`=think_group_tag.`group_id`</span><br><span class="line">        <span class="built_in">return</span> this.join(&#123;</span><br><span class="line">            cate: &#123;</span><br><span class="line">                on: [<span class="string">'id'</span>, <span class="string">'id'</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            group_tag: &#123;</span><br><span class="line">                on: [<span class="string">'id'</span>, <span class="string">'group_id'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">getList</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM think_user AS a LEFT JOIN `think_cate` AS c ON a.`id`=c.`id` LEFT JOIN `think_group_tag` AS d ON a.`id`=d.`group_id`</span><br><span class="line">        <span class="built_in">return</span> this.alias(<span class="string">'a'</span>).join(&#123;</span><br><span class="line">            cate: &#123;</span><br><span class="line">                join: <span class="string">'left'</span>, // 有 left,right,inner 3 个值</span><br><span class="line">                as: <span class="string">'c'</span>,</span><br><span class="line">                on: [<span class="string">'id'</span>, <span class="string">'id'</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            group_tag: &#123;</span><br><span class="line">                join: <span class="string">'left'</span>,</span><br><span class="line">                as: <span class="string">'d'</span>,</span><br><span class="line">                on: [<span class="string">'id'</span>, <span class="string">'group_id'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).select()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote>对象：ON 条件含有多个字段</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">getList</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM `think_user` LEFT JOIN `think_cate` ON think_user.`id`=think_cate.`id` LEFT JOIN `think_group_tag` ON think_user.`id`=think_group_tag.`group_id` LEFT JOIN `think_tag` ON (think_user.`id`=think_tag.`id` AND think_user.`title`=think_tag.`name`)</span><br><span class="line">        <span class="built_in">return</span> this.join(&#123;</span><br><span class="line">            cate: &#123;on: <span class="string">'id, id'</span>&#125;,</span><br><span class="line">            group_tag: &#123;on: [<span class="string">'id'</span>, <span class="string">'group_id'</span>]&#125;,</span><br><span class="line">            tag: &#123;</span><br><span class="line">                on: &#123; // 多个字段的 ON</span><br><span class="line">                    id: <span class="string">'id'</span>,</span><br><span class="line">                    title: <span class="string">'name'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).select()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.model.base &#123;</span><br><span class="line">    <span class="function"><span class="title">getList</span></span>()&#123;</span><br><span class="line">        //SELECT * FROM think_user AS a LEFT JOIN `think_cate` AS c ON a.`id`=c.`id` LEFT JOIN `think_group_tag` AS d ON a.`id`=d.`group_id`</span><br><span class="line">        <span class="built_in">return</span> this.alias(<span class="string">'a'</span>).join(&#123;</span><br><span class="line">            cate: &#123;</span><br><span class="line">                join: <span class="string">'left'</span>, // 有 left,right,inner 3 个值</span><br><span class="line">                as: <span class="string">'c'</span>,</span><br><span class="line">                on: [<span class="string">'id'</span>, <span class="string">'id'</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            group_tag: &#123;</span><br><span class="line">                join: <span class="string">'left'</span>,</span><br><span class="line">                as: <span class="string">'d'</span>,</span><br><span class="line">                on: [<span class="string">'id'</span>, <span class="string">'group_id'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).select()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;模型&quot;&gt;&lt;a href=&quot;#模型&quot; class=&quot;headerlink&quot; title=&quot;模型&quot;&gt;&lt;/a&gt;模型&lt;/h3&gt;&lt;h4 id=&quot;模型介绍&quot;&gt;&lt;a href=&quot;#模型介绍&quot; class=&quot;headerlink&quot; title=&quot;模型介绍&quot;&gt;&lt;/a&gt;模型介绍&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;项目开发中，经常要操作数据库，如：&lt;strong&gt;增删改查&lt;/strong&gt;等操作。模型就是为了方便操作数据库进行的封装，&lt;strong&gt;一个模型对应数据库中的一个数据表&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;目前支持的数据库有：&lt;code&gt;MySQL&lt;/code&gt;，&lt;code&gt;MongoDB&lt;/code&gt;，&lt;code&gt;PostgreSQL&lt;/code&gt; 和 &lt;code&gt;SQLite&lt;/code&gt;。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Node.js" scheme="https://chongtianhong.github.io/tags/Node-js/"/>
    
      <category term="ThinkJS" scheme="https://chongtianhong.github.io/tags/ThinkJS/"/>
    
  </entry>
  
  <entry>
    <title>Ajax学习笔记</title>
    <link href="https://chongtianhong.github.io/2018/03/06/xml/"/>
    <id>https://chongtianhong.github.io/2018/03/06/xml/</id>
    <published>2018-03-06T08:24:50.000Z</published>
    <updated>2018-03-07T13:49:29.069Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>AJAX = 异步 JavaScript 和 XML。</li><li><strong>XMLHttpRequest</strong> 是 AJAX 的<strong>基础</strong>。XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在<strong>不重新加载整个网页</strong>的情况下，对网页的<strong>某部分</strong>进行<strong>更新</strong>。</li><li>XML 指<strong>可扩展标记语言</strong>。XML 被设计用来<strong>传输</strong>和<strong>存储</strong>数据。</li><li>HTML 被设计用来<strong>显示</strong>数据。<a id="more"></a></li></ul><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><h4 id="XML-与-HTML-的主要差异"><a href="#XML-与-HTML-的主要差异" class="headerlink" title="XML 与 HTML 的主要差异"></a>XML 与 HTML 的主要差异</h4><ul><li>XML 不是 HTML 的替代。</li><li>XML 和 HTML 为<strong>不同的目的</strong>而设计：<ul><li>XML 被设计为传输和存储数据，其焦点是数据的内容。</li><li>HTML 被设计用来显示数据，其焦点是数据的外观。</li></ul></li><li>HTML 旨在<strong>显示信息</strong>，而 XML 旨在<strong>传输信息</strong>。</li></ul><h4 id="XML-是不作为的"><a href="#XML-是不作为的" class="headerlink" title="XML 是不作为的"></a>XML 是不作为的</h4><ul><li>XML 被设计用来结构化、存储以及传输信息。</li><li><p>下面是 John 写给 George 的便签，存储为 XML：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">&lt;body&gt;Don<span class="string">'t forget the meeting!&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/note&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>上面的这条便签具有自我描述性。它拥有标题以及留言，同时包含了发送者和接受者的信息。</p></li><li>但是，这个 XML 文档仍然没有做任何事情。它仅仅是包装在 XML 标签中的纯粹的信息。我们<strong>需要编写软件或者程序，才能传送、接收和显示出这个文档</strong>。</li></ul><h4 id="XML-不是对-HTML-的替代"><a href="#XML-不是对-HTML-的替代" class="headerlink" title="XML 不是对 HTML 的替代"></a>XML 不是对 HTML 的替代</h4><ul><li>XML 是对 HTML 的<strong>补充</strong>。</li><li>XML 不会替代 HTML，理解这一点很重要。在大多数 web 应用程序中，XML 用于<strong>传输数据</strong>，而 HTML 用于<strong>格式化并显示数据</strong>。</li><li>对 XML 最好的描述是：<ul><li>XML 是<strong>独立于软件和硬件</strong>的<strong>信息传输工具</strong>。</li></ul></li></ul><h4 id="XML-语法规则"><a href="#XML-语法规则" class="headerlink" title="XML 语法规则"></a>XML 语法规则</h4><blockquote>所有 XML 元素都须有<strong>关闭标签</strong></blockquote><ul><li>在 HTML，经常会看到没有关闭标签的元素.</li><li>而在 XML 中，省略关闭标签是非法的。所有元素都必须有关闭标签：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;This is a paragraph&lt;/p&gt;</span><br><span class="line">&lt;p&gt;This is another paragraph&lt;/p&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote>XML 标签<strong>对大小写敏感</strong></blockquote><ul><li>XML 标签对大小写敏感。在 XML 中，标签 <code>&lt;Letter&gt;</code> 与标签 <code>&lt;letter&gt;</code> 是不同的。</li><li>必须使用相同的大小写来编写打开标签和关闭标签：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Message&gt;这是错误的。&lt;/message&gt;</span><br><span class="line"></span><br><span class="line">&lt;message&gt;这是正确的。&lt;/message&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote>XML 必须正确地嵌套</blockquote><ul><li><p>在 HTML 中，常会看到没有正确嵌套的元素:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;&lt;i&gt;This text is bold and italic&lt;/b&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure></li><li><p>在 XML 中，所有元素都必须彼此正确地嵌套：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;&lt;i&gt;This text is bold and italic&lt;/i&gt;&lt;/b&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote>XML 文档必须有根元素</blockquote><ul><li>XML 文档必须有一个元素是所有其他元素的父元素。该元素称为根元素:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;root&gt;</span><br><span class="line">  &lt;child&gt;</span><br><span class="line">    &lt;subchild&gt;.....&lt;/subchild&gt;</span><br><span class="line">  &lt;/child&gt;</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote>XML 的<strong>属性值须加引号</strong></blockquote><ul><li>与 HTML 类似，XML 也可拥有属性（名称/值的对）。</li><li>在 XML 中，XML 的属性值须加引号:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;note date=<span class="string">"08/08/2008"</span>&gt;</span><br><span class="line">&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote>实体引用</blockquote><ul><li>在 XML 中，一些字符拥有特殊的意义。</li><li><p>如果把字符 “&lt;” 放在 XML 元素中，会发生错误，这是因为解析器会把它当作新元素的开始，这样会产生 XML 错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;message&gt;<span class="keyword">if</span> salary &lt; 1000 <span class="keyword">then</span>&lt;/message&gt;</span><br></pre></td></tr></table></figure></li><li><p>为了避免这个错误，应该用实体引用来代替 “&lt;” 字符。</p></li></ul><blockquote>XML 中的注释</blockquote><ul><li>在 XML 中编写注释的语法与 HTML 的语法很相似。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- This is a comment --&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote>在 XML 中，<strong>空格会被保留</strong></blockquote><ul><li><p>HTML 会把多个连续的空格字符裁减（合并）为一个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTML:Hello           my name is David.</span><br><span class="line">输出:Hello my name is David.</span><br></pre></td></tr></table></figure></li><li><p>在 XML 中，文档中的空格不会被删节。</p></li></ul><h4 id="XML-元素"><a href="#XML-元素" class="headerlink" title="XML 元素"></a>XML 元素</h4><ul><li>XML 文档包含 XML 元素。</li><li>XML 元素指的是从（且包括）开始标签直到（且包括）结束标签的部分。</li></ul><blockquote>XML 元素是可扩展的</blockquote><ul><li>XML 元素是可扩展的，以携带更多的信息。</li><li><p>例如，下面一个XML例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">&lt;body&gt;Don<span class="string">'t forget the meeting!&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/note&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>如果我们创建了一个应用程序，可将 <code>&lt;to&gt;</code>、<code>&lt;from&gt;</code> 以及 <code>&lt;body&gt;</code> 元素提取出来，并产生以下的输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MESSAGE</span><br><span class="line">To: George</span><br><span class="line">From: John</span><br><span class="line"></span><br><span class="line">Don<span class="string">'t forget the meeting!</span></span><br></pre></td></tr></table></figure></li><li><p>之后这个 XML 文档作者又向这个文档添加了一些额外的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;note&gt;</span><br><span class="line">&lt;date&gt;2008-08-08&lt;/date&gt;</span><br><span class="line">&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">&lt;body&gt;Don<span class="string">'t forget the meeting!&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/note&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>这个应用程序不会中断或崩溃，仍然可以找到 XML 文档中的 <code>&lt;to&gt;</code>、<code>&lt;from&gt;</code> 以及 <code>&lt;body&gt;</code> 元素，并产生同样的输出。</p></li><li>XML 的优势之一，就是可以经常在不中断应用程序的情况进行扩展。</li></ul><h3 id="XML-JavaScript"><a href="#XML-JavaScript" class="headerlink" title="XML JavaScript"></a>XML JavaScript</h3><h4 id="XML-HTTP-Request"><a href="#XML-HTTP-Request" class="headerlink" title="XML HTTP Request"></a>XML HTTP Request</h4><ul><li>XMLHttpRequest 对象用于在后台<strong>与服务器交换数据</strong>。通过XMLHttpRequest 对象，能够实现：<ul><li>在<strong>不重新加载页面的情况下</strong>更新网页</li><li>在<strong>页面已加载后</strong>从服务器请求数据</li><li>在<strong>页面已加载后</strong>从服务器接收数据</li><li>在<strong>后台向服务器发送数据</strong></li></ul></li></ul><h5 id="创建XHR对象"><a href="#创建XHR对象" class="headerlink" title="创建XHR对象"></a>创建XHR对象</h5><blockquote>创建 XMLHttpRequest 对象</blockquote><ul><li>所有现代浏览器 (IE7+、Firefox、Chrome、Safari 以及 Opera) 都内建了 XMLHttpRequest 对象。</li><li><p>通过一行简单的 JavaScript 代码，就可以创建 XMLHttpRequest 对象：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp=new XMLHttpRequest();</span><br></pre></td></tr></table></figure></li><li><p>老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp=new ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br></pre></td></tr></table></figure></li><li><p>为了应对所有的现代浏览器，包括 IE5 和 IE6，请检查浏览器是否支持 XMLHttpRequest 对象。如果支持，则创建 XMLHttpRequest 对象。如果不支持，则创建 ActiveXObject ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var xmlhttp;</span><br><span class="line"><span class="keyword">if</span> (window.XMLHttpRequest)</span><br><span class="line">&#123;</span><br><span class="line">    //  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span><br><span class="line">    xmlhttp=new XMLHttpRequest();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    // IE6, IE5 浏览器执行代码</span><br><span class="line">    xmlhttp=new ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="向服务器发送请求"><a href="#向服务器发送请求" class="headerlink" title="向服务器发送请求"></a>向服务器发送请求</h5><ul><li>XMLHttpRequest 对象用于和服务器交换数据。</li></ul><blockquote>向服务器发送请求</blockquote><ul><li>如需将请求发送到服务器，使用 XMLHttpRequest 对象的 open() 和 send() 方法：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"ajax_info.txt"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:left">描述 </th></tr></thead><tbody><tr><td style="text-align:center">open(method,url,async)</td><td style="text-align:left">method:请求的类型(GET 或 POST)<br>URL:文件在服务器上的位置<br>async:是否异步处理请求(true异步或false同步)。</td></tr><tr><td style="text-align:center">send(string)</td><td style="text-align:left">将请求发送到服务器。<br>string：仅用于 POST 请求</td></tr></tbody></table><blockquote>GET 还是 POST？</blockquote><ul><li>与 POST 相比，<strong>GET 更简单也更快</strong>，并且在大部分情况下都能用。</li><li>然而，在以下情况中，请使用 <strong>POST 请求</strong>：<ul><li>无法使用缓存文件（<strong>更新</strong>服务器上的文件或数据库）</li><li>向服务器发送大量数据（<strong>POST 没有数据量限制</strong>）</li><li>发送包含未知字符的用户输入时，<strong>POST</strong> 比 GET <strong>更稳定也更可靠</strong></li></ul></li></ul><blockquote>GET 请求</blockquote><ul><li><p>一个简单的 GET 请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/try/ajax/demo_get.php"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure></li><li><p>在上面的例子中，可能得到的是缓存的结果。</p></li><li><p>为了避免这种情况，请向 URL 添加一个唯一的 ID：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/try/ajax/demo_get.php?t="</span> + Math.random(),<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure></li><li><p>如果希望通过 GET 方法发送信息，请向 URL 添加信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/try/ajax/demo_get2.php?fname=Henry&amp;lname=Ford"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure></li></ul><blockquote>POST 请求</blockquote><ul><li><p>一个简单 POST 请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"POST"</span>,<span class="string">"/try/ajax/demo_post.php"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure></li><li><p>如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定我们希望发送的数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"POST"</span>,<span class="string">"/try/ajax/demo_post2.php"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">xmlhttp.send(<span class="string">"fname=Henry&amp;lname=Ford"</span>);</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:left">描述 </th></tr></thead><tbody><tr><td style="text-align:center">setRequestHeader(header,value)</td><td style="text-align:left">向请求添加 HTTP 头。<br>header: 规定头的名称<br>value: 规定头的值</td></tr></tbody></table><blockquote>url - 服务器上的文件</blockquote><ul><li><p>open() 方法的 url 参数是服务器上文件的地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"ajax_test.html"</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li><li><p>该文件可以是任何类型的文件，比如 .txt 和 .xml，或者<strong>服务器脚本文件</strong>，比如 .asp 和 .php （<strong>在传回响应之前，能够在服务器上执行任务</strong>）。</p></li></ul><blockquote>异步 - True 或 False？</blockquote><ul><li>AJAX 指的是异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。</li><li><p>XMLHttpRequest 对象如果要<strong>用于 AJAX</strong> 的话，其 <strong>open() 方法的 async 参数</strong>必须<strong>设置为 true</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"ajax_test.html"</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li><li><p>对于 web 开发人员来说，发送异步请求是一个巨大的进步。很多在服务器执行的任务都相当费时。AJAX 出现之前，这可能会引起应用程序挂起或停止。</p></li><li>通过 AJAX，JavaScript 无需等待服务器的响应，而是：<ul><li>在等待服务器响应时执行其他脚本</li><li>当响应就绪后对响应进行处理(所有同步任务完成后执行异步响应)</li></ul></li></ul><blockquote>Async=true</blockquote><ul><li><strong>注意</strong>：需在调用open之前指定onreadystatechange事件绑定的函数才能确保跨浏览器兼容性。</li><li>当使用 async=true 时，必须规定在响应处于 onreadystatechange 事件中的就绪状态时执行的函数：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.onreadystatechange=<span class="keyword">function</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</span><br><span class="line">    &#123;</span><br><span class="line">        document.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/try/ajax/ajax_info.txt"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure></li></ul><blockquote>Async = false</blockquote><ul><li>如需使用 async=false，请将 open() 方法中的第三个参数改为 false。</li><li><p>通过把该参数设置为 “false”，可以省去额外的 onreadystatechange 代码。如果在请求失败时是否执行其余的代码无关紧要，那么可以使用这个参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/try/ajax/ajax_info.txt"</span>,<span class="literal">false</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure></li><li><p>不推荐使用 async=false，但是对于一些小型的请求，也是可以的。</p></li><li>请记住，JavaScript 会等到服务器响应就绪才继续执行。如果服务器繁忙或缓慢，应用程序会挂起或停止。</li></ul><h5 id="服务器响应"><a href="#服务器响应" class="headerlink" title="服务器响应"></a>服务器响应</h5><ul><li>如需获得来自服务器的响应，请使用 XMLHttpRequest 对象的 <code>responseText</code> 或 <code>responseXML</code> 属性。</li></ul><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:left">描述 </th></tr></thead><tbody><tr><td style="text-align:center">responseText</td><td style="text-align:left">获得字符串形式的响应数据(文本节点内容)</td></tr><tr><td style="text-align:center">responseXML</td><td style="text-align:left">获得 XML 形式的响应数据</td></tr></tbody></table><blockquote>responseText 属性</blockquote><ul><li>如果来自服务器的响应并非 XML，请使用 <code>responseText</code> 属性。</li><li><code>responseText</code> 属性返回字符串形式的响应，因此我们可以这样使用：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</span><br></pre></td></tr></table></figure></li></ul><blockquote>responseXML 属性</blockquote><ul><li>如果来自服务器的响应是 XML，而且需要作为 XML 对象进行解析，请使用 <code>responseXML</code> 属性：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xmlDoc=xmlhttp.responseXML;</span><br><span class="line">txt=<span class="string">""</span>;</span><br><span class="line">x=xmlDoc.getElementsByTagName(<span class="string">"ARTIST"</span>);</span><br><span class="line"><span class="keyword">for</span> (i=0;i&lt;x.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">    txt=txt + x[i].childNodes[0].nodeValue + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">document.getElementById(<span class="string">"myDiv"</span>).innerHTML=txt;</span><br></pre></td></tr></table></figure></li></ul><h5 id="onreadystatechange-事件"><a href="#onreadystatechange-事件" class="headerlink" title="onreadystatechange 事件"></a>onreadystatechange 事件</h5><ul><li>当请求被发送到服务器时，我们需要执行一些基于响应的任务。</li><li>每当 readyState 改变时，就会触发 <code>onreadystatechange</code> 事件。</li><li><code>readyState</code> 属性存有 XMLHttpRequest 的状态信息。</li><li>下面是 XMLHttpRequest 对象的三个重要的属性：</li></ul><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:left">描述 </th></tr></thead><tbody><tr><td style="text-align:center">onreadystatechange</td><td style="text-align:left">存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。</td></tr><tr><td style="text-align:center">readyState</td><td style="text-align:left">存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。<br>0: 请求未初始化，未调用open() <br>1: 服务器连接已建立，已调用open，未调用send <br>2: 请求已接收，即服务器已收到请求头信息。 已调用send，尚未收到响应 <br>3: 请求处理中，已收到部分响应数据 <br>4: 请求已完成，已收到全部响应数据，可在客户端使用 </td></tr><tr><td style="text-align:center">status</td><td style="text-align:left">200: “OK”<br>404: 未找到页面</td></tr></tbody></table><ul><li>在 <code>onreadystatechange</code> 事件中，我们规定当服务器响应已做好被处理的准备时所执行的任务。</li><li><p>当 readyState 等于 4 且状态为 200 时，表示响应已就绪：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.onreadystatechange=<span class="keyword">function</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</span><br><span class="line">    &#123;</span><br><span class="line">        document.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意： <code>onreadystatechange</code> 事件被触发 5 次（0 - 4），对应着 readyState 的每个变化。</p></li></ul><blockquote>使用回调函数</blockquote><ul><li>回调函数是一种以参数形式传递给另一个函数的函数。</li><li>如果网站上存在多个 AJAX 任务，那么我们应该为创建 XMLHttpRequest 对象编写一个标准的函数，并为每个 AJAX 任务调用该函数。</li><li>该函数调用应该包含 URL 以及发生 <code>onreadystatechange</code> 事件时执行的任务（每次调用可能不尽相同）：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var xmlhttp;</span><br><span class="line"><span class="keyword">function</span> loadXMLDoc(url,cfunc)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (window.XMLHttpRequest)</span><br><span class="line">  &#123;// IE7+, Firefox, Chrome, Opera, Safari 代码</span><br><span class="line">  xmlhttp=new XMLHttpRequest();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;// IE6, IE5 代码</span><br><span class="line">  xmlhttp=new ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">xmlhttp.onreadystatechange=cfunc;</span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,url,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> myFunction()</span><br><span class="line">&#123;</span><br><span class="line">loadXMLDoc(<span class="string">"/try/ajax/ajax_info.txt"</span>,<span class="keyword">function</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</span><br><span class="line">&#123;</span><br><span class="line">document.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="XML-DOM"><a href="#XML-DOM" class="headerlink" title="XML DOM"></a>XML DOM</h4><ul><li>DOM （Document Object Model，文档对象模型）定义了<strong>访问</strong>和<strong>操作文档</strong>的标准方法。</li></ul><blockquote>XML DOM</blockquote><ul><li>XML DOM (XML Document Object Model) 定义了访问和操作 XML 文档的标准方法。</li><li>DOM 把 XML 文档作为树结构来查看。能够通过 DOM 树来访问所有元素。可以修改或删除它们的内容，并创建新的元素。元素，它们的文本，以及它们的属性，都被认为是节点。</li><li><p>使用 DOM 引用从 <to> 元素中获取文本：</to></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlDoc.getElementsByTagName(<span class="string">"to"</span>)[0].childNodes[0].nodeValue</span><br></pre></td></tr></table></figure><ul><li><strong>xmlDoc</strong> -由解析器创建的 XML 文档</li><li><strong>getElementsByTagName(“to”)[0]</strong> - 第一个 <code>&lt;to&gt;</code> 元素</li><li><strong>childNodes[0]</strong> - <code>&lt;to&gt;</code> 元素的第一个子元素（文本节点）</li><li><strong>nodeValue</strong> - 节点的值（文本本身）</li></ul></li></ul><blockquote>解析 XML 文件 - 跨浏览器实例</blockquote><ul><li><p>下列代码把一个 XML 文档 (“note.xml”) 载入 XML 解析器中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;W3School.com.cn Internal Note&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;&lt;b&gt;To:&lt;/b&gt; &lt;span id=<span class="string">"to"</span>&gt;&lt;/span&gt;&lt;br /&gt;</span><br><span class="line">&lt;b&gt;From:&lt;/b&gt; &lt;span id=<span class="string">"from"</span>&gt;&lt;/span&gt;&lt;br /&gt;</span><br><span class="line">&lt;b&gt;Message:&lt;/b&gt; &lt;span id=<span class="string">"message"</span>&gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">if</span> (window.XMLHttpRequest)&#123;</span><br><span class="line">    // code <span class="keyword">for</span> IE7+, Firefox, Chrome, Opera, Safari</span><br><span class="line">    xmlhttp=new XMLHttpRequest();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    // code <span class="keyword">for</span> IE6, IE5</span><br><span class="line">    xmlhttp=new ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"note.xml"</span>,<span class="literal">false</span>);</span><br><span class="line">xmlhttp.send();</span><br><span class="line">xmlDoc=xmlhttp.responseXML; //获得 XML 形式的响应数据。</span><br><span class="line"></span><br><span class="line">document.getElementById(<span class="string">"to"</span>).innerHTML=</span><br><span class="line">xmlDoc.getElementsByTagName(<span class="string">"to"</span>)[0].childNodes[0].nodeValue;</span><br><span class="line"></span><br><span class="line">document.getElementById(<span class="string">"from"</span>).innerHTML=</span><br><span class="line">xmlDoc.getElementsByTagName(<span class="string">"from"</span>)[0].childNodes[0].nodeValue;</span><br><span class="line"></span><br><span class="line">document.getElementById(<span class="string">"message"</span>).innerHTML=</span><br><span class="line">xmlDoc.getElementsByTagName(<span class="string">"body"</span>)[0].childNodes[0].nodeValue;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">W3School.com.cn Internal Note</span><br><span class="line"></span><br><span class="line">To: George</span><br><span class="line">From: John</span><br><span class="line">Message: Don<span class="string">'t forget the meeting!</span></span><br></pre></td></tr></table></figure></li></ul><blockquote>解析 XML 字符串 - 跨浏览器实例</blockquote><ul><li><p>下面的代码加载并解析一个 XML 字符串：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;W3School.com.cn Internal Note&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;&lt;b&gt;To:&lt;/b&gt; &lt;span id=<span class="string">"to"</span>&gt;&lt;/span&gt;&lt;br /&gt;</span><br><span class="line">&lt;b&gt;From:&lt;/b&gt; &lt;span id=<span class="string">"from"</span>&gt;&lt;/span&gt;&lt;br /&gt;</span><br><span class="line">&lt;b&gt;Message:&lt;/b&gt; &lt;span id=<span class="string">"message"</span>&gt;&lt;/span&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var txt = <span class="string">"&lt;note&gt;&lt;to&gt;George&lt;/to&gt;&lt;from&gt;John&lt;/from&gt;&lt;heading&gt;Reminder&lt;/heading&gt;&lt;body&gt;Don't forget the meeting!&lt;/body&gt;&lt;/note&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (window.DOMParser)&#123;</span><br><span class="line">    parser=new DOMParser();</span><br><span class="line">    xmlDoc=parser.parseFromString(txt,<span class="string">"text/xml"</span>); //解析XML字符串</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    // Internet Explorer</span><br><span class="line">    xmlDoc=new ActiveXObject(<span class="string">"Microsoft.XMLDOM"</span>);</span><br><span class="line">    xmlDoc.async=<span class="string">"false"</span>;</span><br><span class="line">    xmlDoc.loadXML(txt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">document.getElementById(<span class="string">"to"</span>).innerHTML=</span><br><span class="line">xmlDoc.getElementsByTagName(<span class="string">"to"</span>)[0].childNodes[0].nodeValue;</span><br><span class="line"></span><br><span class="line">document.getElementById(<span class="string">"from"</span>).innerHTML=</span><br><span class="line">xmlDoc.getElementsByTagName(<span class="string">"from"</span>)[0].childNodes[0].nodeValue;</span><br><span class="line"></span><br><span class="line">document.getElementById(<span class="string">"message"</span>).innerHTML=</span><br><span class="line">xmlDoc.getElementsByTagName(<span class="string">"body"</span>)[0].childNodes[0].nodeValue;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">W3School.com.cn Internal Note</span><br><span class="line"></span><br><span class="line">To: George</span><br><span class="line">From: John</span><br><span class="line">Message: Don<span class="string">'t forget the meeting!</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="AJAX-XML-实例"><a href="#AJAX-XML-实例" class="headerlink" title="AJAX XML 实例"></a>AJAX XML 实例</h4><ul><li>AJAX 可用来与 XML 文件进行<strong>交互式通信</strong>。</li><li><p>实例解析 - loadXMLDoc() 函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">loadXMLDoc</span></span>() &#123;</span><br><span class="line">    var xhttp = new XMLHttpRequest();</span><br><span class="line">    xhttp.onreadystatechange = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (this.readyState == 4 &amp;&amp; this.status == 200) &#123;</span><br><span class="line">            myFunction(this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhttp.open(<span class="string">"GET"</span>, <span class="string">"cd_catalog.xml"</span>, <span class="literal">true</span>);</span><br><span class="line">    xhttp.send();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> myFunction(xml) &#123;</span><br><span class="line">    var i;</span><br><span class="line">    var xmlDoc = xml.responseXML;</span><br><span class="line">    var table=<span class="string">"&lt;tr&gt;&lt;th&gt;Artist&lt;/th&gt;&lt;th&gt;Title&lt;/th&gt;&lt;/tr&gt;"</span>;</span><br><span class="line">    var x = xmlDoc.getElementsByTagName(<span class="string">"CD"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = 0; i &lt;x.length; i++) &#123;</span><br><span class="line">        table += <span class="string">"&lt;tr&gt;&lt;td&gt;"</span> +</span><br><span class="line">        x[i].getElementsByTagName(<span class="string">"ARTIST"</span>)[0].childNodes[0].nodeValue +</span><br><span class="line">        <span class="string">"&lt;/td&gt;&lt;td&gt;"</span> +</span><br><span class="line">        x[i].getElementsByTagName(<span class="string">"TITLE"</span>)[0].childNodes[0].nodeValue +</span><br><span class="line">        <span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    document.getElementById(<span class="string">"demo"</span>).innerHTML = table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>loadXMLDoc() 函数创建 XMLHttpRequest 对象，添加当服务器响应就绪时执行的函数，并将请求发送到服务器。</p></li></ul><h4 id="XML-CDATA"><a href="#XML-CDATA" class="headerlink" title="XML CDATA"></a>XML CDATA</h4><ul><li>术语 CDATA 指的是不应由 XML 解析器进行解析的文本数据（Unparsed Character Data）。</li><li><p>所有 XML 文档中的文本均会被解析器解析。XML 解析器通常会解析 XML 文档中所有的文本。当某个 XML 元素被解析时，其标签之间的文本也会被解析：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;message&gt;此文本也会被解析&lt;/message&gt;</span><br></pre></td></tr></table></figure></li><li><p>非法的 XML 字符必须被替换为实体引用：假如我们在 XML 文档中放置了一个类似 “&lt;” 字符，那么这个文档会产生一个错误，这是因为解析器会把它解释为新元素的开始。</p><ul><li>在 XML 元素中，”&lt;” 和 “&amp;” 是非法的。</li><li>“&lt;” 会产生错误，因为解析器会把该字符解释为新元素的开始。</li><li>“&amp;” 也会产生错误，因为解析器会把该字符解释为字符实体的开始。</li></ul></li><li>某些文本，比如 JavaScript 代码，包含大量 “&lt;” 或 “&amp;” 字符。为了避免错误，可以将脚本代码定义为 CDATA。<br>CDATA 部分中的所有内容都会被解析器忽略。</li><li>只有 CDATA 区段（CDATA section）中的文本会被解析器忽略。</li><li>CDATA 部分由 “<code>&lt;![CDATA[</code>“ 开始，由 “<code>]]&gt;</code>“ 结束。</li></ul><h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li>AJAX = 异步 JavaScript 和 XML。</li><li>AJAX 是一种用于创建快速动态网页的技术。</li><li>通过在后台与服务器进行少量数据交换，AJAX 可以<strong>使网页实现异步更新</strong>。这意味着可以<strong>在不重新加载整个网页的情况下</strong>，可以<strong>与服务器交换数据</strong>并<strong>对网页的某部分进行更新</strong>（最大优点）。</li><li>传统的网页（不使用 AJAX）如果需要更新内容，必须重载整个网页面。</li><li>AJAX 不需要任何浏览器插件，但需要用户允许JavaScript在浏览器上执行。</li><li><strong>XMLHttpRequest</strong> 是 AJAX 的<strong>基础</strong>。<ul><li>XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</li></ul></li><li>向服务器发送请求<ul><li>使用 XMLHttpRequest 对象的 open() 和 send() 方法。</li></ul></li></ul><h4 id="Ajax用在哪里"><a href="#Ajax用在哪里" class="headerlink" title="Ajax用在哪里"></a>Ajax用在哪里</h4><ul><li>简单说是<strong>需要连接数据库的地方</strong>，但是连接数据库传输的信息量很少，用不着刷新整个页面，这种类型的适合用ajax，避免了刷新整个页面带来的资源浪费。</li></ul><h4 id="Ajax三步骤"><a href="#Ajax三步骤" class="headerlink" title="Ajax三步骤"></a>Ajax三步骤</h4><ol><li>运用HTML和CSS实现页面，表达信息；</li><li>运用XMLHttpRequest和web服务器进行数据的<strong>异步交换</strong>；</li><li>运用JavaScript操作DOM，实现动态局部刷新。</li></ol><h4 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h4><ul><li>同步：用户填写所有信息后，提交给服务器，等待服务器的回应（检验数据），是一次性的。信息错误又要重新填写！</li><li>异步：当用户填写完一条信息后，该信息会自动向服务器提交，然后服务器响应客户端，在此过程中，用户依然在填写表格的信息，即向服务器请求多次，节省了用户的时间，提高了用户的体验。</li><li>XMLhttpRequest对象来实现这一功能，也需要javascript来操作DOM实现局部的信息更新。不需要重新加载整个页面。</li></ul><h4 id="http请求"><a href="#http请求" class="headerlink" title="http请求"></a>http请求</h4><ul><li>HTTP是计算机通过网络进行通信的规则，使浏览器请求信息和服务</li><li>HTTP是一种无状态的协议(不建立持久的连接，服务端不保留连接的相关信息,浏览器发出请求和服务器返回响应是一个没有记忆的过程)</li><li>一个完整的【HTTP请求】过程有7个步骤：<ol><li>建立TCP连接;</li><li>Web浏览器向Web服务器发送请求命令;</li><li>Web浏览器发送请求头信息;</li><li>Web服务器应答;</li><li>Web服务器发送应答头信息;</li><li>Web服务器向浏览器发送数据;</li><li>Web服务器关闭TCP连接。</li></ol></li></ul><h4 id="建立异步请求的过程4个步骤"><a href="#建立异步请求的过程4个步骤" class="headerlink" title="建立异步请求的过程4个步骤"></a>建立异步请求的过程4个步骤</h4><ol><li>new一个XHR对象;</li><li>调用open方法，打开与服务器的连接;</li><li>发送请求，send一些数据;</li><li>对过程进行监听，来知道服务器是不是正确地做出了响应，接着可以做一些事情:<ul><li>监听readyState,响应成功可以做一些事情，比如获取服务器响应的内容在页面上做一些呈现。</li></ul></li></ol><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ul><li>responseText：获得字符串形式的响应数据。</li><li>responseXML：获得XML形式的响应数据。</li><li>status和statusText：以数字和文本形式返回HTTP代码。</li><li>getAllResponseHeader()：获取所有响应表头。</li><li>getResponseHeader()：获取响应中的某个字段的值。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;AJAX = 异步 JavaScript 和 XML。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;XMLHttpRequest&lt;/strong&gt; 是 AJAX 的&lt;strong&gt;基础&lt;/strong&gt;。XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在&lt;strong&gt;不重新加载整个网页&lt;/strong&gt;的情况下，对网页的&lt;strong&gt;某部分&lt;/strong&gt;进行&lt;strong&gt;更新&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;XML 指&lt;strong&gt;可扩展标记语言&lt;/strong&gt;。XML 被设计用来&lt;strong&gt;传输&lt;/strong&gt;和&lt;strong&gt;存储&lt;/strong&gt;数据。&lt;/li&gt;
&lt;li&gt;HTML 被设计用来&lt;strong&gt;显示&lt;/strong&gt;数据。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Web" scheme="https://chongtianhong.github.io/tags/Web/"/>
    
      <category term="交互" scheme="https://chongtianhong.github.io/tags/%E4%BA%A4%E4%BA%92/"/>
    
      <category term="AJAX" scheme="https://chongtianhong.github.io/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>ThinkJS学习笔记(二)</title>
    <link href="https://chongtianhong.github.io/2018/03/05/thinkjs2/"/>
    <id>https://chongtianhong.github.io/2018/03/05/thinkjs2/</id>
    <published>2018-03-05T03:17:02.000Z</published>
    <updated>2018-03-07T13:57:48.316Z</updated>
    
    <content type="html"><![CDATA[<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><ul><li>视图即模版，默认的根目录为 <code>view/</code>。</li></ul><h4 id="视图文件"><a href="#视图文件" class="headerlink" title="视图文件"></a>视图文件</h4><ul><li>视图文件默认的命名规则为 <code>模块/控制器_操作.html</code>。</li><li>假如 <code>URL home/article/detail</code> 解析后的模块是 <code>home</code>，控制器是 <code>article</code>，操作是 <code>detail</code>，那么对应的视图文件为 <code>home/article_detail.html</code>。<a id="more"></a></li></ul><h4 id="视图配置"><a href="#视图配置" class="headerlink" title="视图配置"></a>视图配置</h4><ul><li><p>视图默认配置如下，可以在配置文件 <code>src/common/config/view.js</code> 中修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  <span class="built_in">type</span>: <span class="string">'ejs'</span>, //模版引擎</span><br><span class="line">  content_type: <span class="string">'text/html'</span>, //输出模版时发送的 Content-Type</span><br><span class="line">  file_ext: <span class="string">'.html'</span>, //文件的扩展名</span><br><span class="line">  file_depr: <span class="string">'_'</span>, //控制器和操作之间的连接符</span><br><span class="line">  root_path: think.ROOT_PATH + <span class="string">'/view'</span>, //视图文件的根目录</span><br><span class="line">  adapter: &#123; //模版引擎需要的配置项</span><br><span class="line">    ejs: &#123;&#125;, //使用 ejs 模板引擎时额外配置</span><br><span class="line">    nunjucks: &#123;&#125; //使用 nunjucks 模板引擎时额外配置</span><br><span class="line">  &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>视图默认根目录在 <code>view/</code>。如果想每个模块有独立的视图目录，将配置 <code>root_path</code> 修改为空即可。</p></li></ul><h4 id="修改连接符"><a href="#修改连接符" class="headerlink" title="修改连接符"></a>修改连接符</h4><ul><li>默认控制器和操作之间的连接符是 <code>_</code>，文件名类似为 <code>index_index.html</code>，如果想将控制器作为一层目录的话，如：<code>index/index.html</code>，可以将连接符修改为 <code>/</code>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  file_depr: <span class="string">'/'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="修改模板引擎配置"><a href="#修改模板引擎配置" class="headerlink" title="修改模板引擎配置"></a>修改模板引擎配置</h4><ul><li>如果想修改模板引擎的一些配置，可以修改配置 <code>adapter</code> 里对应字段。如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  adapter: &#123;</span><br><span class="line">    ejs: &#123;</span><br><span class="line">      delimiter: <span class="string">'&amp;'</span> //将定界符修改为 &lt;&amp; 和 &amp;&gt;</span><br><span class="line">    &#125;,</span><br><span class="line">    nunjucks: &#123;</span><br><span class="line">      trimBlocks: <span class="literal">false</span>, //不转义</span><br><span class="line">      prerender: <span class="keyword">function</span>(nunjucks, env)&#123;&#125; //针对nunjucks模板的过滤器</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="模版引擎"><a href="#模版引擎" class="headerlink" title="模版引擎"></a>模版引擎</h4><ul><li>ThinkJS 默认支持的模版引擎有：<code>ejs</code>，<code>jade</code>，<code>swig</code> 和 <code>nunjucks</code>，<strong>默认模版引擎</strong>为 <code>ejs</code>，可以根据需要修改为其他的模版引擎。</li></ul><h5 id="ejs"><a href="#ejs" class="headerlink" title="ejs"></a>ejs</h5><blockquote>定界符</blockquote><ul><li>ejs 默认的定界符是 <code>&lt;%</code> 和 <code>%&gt;</code>。如果想修改定界符，可以通过配置 <code>adapter</code> 里的 <code>ejs</code> 来修改，如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  adapter: &#123;</span><br><span class="line">    ejs: &#123;</span><br><span class="line">      delimiter: <span class="string">'&amp;'</span> //将定界符修改为 &lt;&amp; 和 &amp;&gt;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote>变量输出</blockquote><ul><li>转义输出 <code>&lt;%= data.name%&gt;</code></li><li>不转义输出 <code>&lt;%- data.name%&gt;</code></li><li>注释 <code>&lt;%# data.name%&gt;</code></li></ul><blockquote>条件判断</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="keyword">if</span>(data.name === <span class="string">'1'</span>)&#123;%&gt;</span><br><span class="line">    &lt;p&gt;...&lt;/p&gt;</span><br><span class="line">&lt;%&#125;<span class="keyword">else</span> <span class="keyword">if</span>(data.name === <span class="string">'2'</span>)&#123;%&gt;</span><br><span class="line">    &lt;p&gt;...&lt;/p&gt;</span><br><span class="line">&lt;%&#125;<span class="keyword">else</span>&#123;%&gt;</span><br><span class="line">    &lt;p&gt;...&lt;/p&gt;</span><br><span class="line">&lt;%&#125;%&gt;</span><br></pre></td></tr></table></figure><blockquote>循环</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%list.forEach(<span class="keyword">function</span>(item)&#123;%&gt;</span><br><span class="line">    &lt;li&gt;&lt;%=item.name%&gt;&lt;/li&gt;</span><br><span class="line">&lt;%&#125;)%&gt;</span><br></pre></td></tr></table></figure><h4 id="模版渲染"><a href="#模版渲染" class="headerlink" title="模版渲染"></a>模版渲染</h4><ul><li>可以通过 <code>display</code> 方法进行模版渲染。如果不传具体的模版文件路径，会自动查找。如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.controller.base &#123;</span><br><span class="line">  <span class="function"><span class="title">indexAction</span></span>()&#123;</span><br><span class="line">    this.display();// render home/index_index.html</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li>ThinkJS 提供了灵活的配置，可以在不同的模块和不同的项目环境下使用不同的配置，且这些配置在服务启动时就已经生效。</li></ul><h4 id="项目模块"><a href="#项目模块" class="headerlink" title="项目模块"></a>项目模块</h4><ul><li>ThinkJS 默认创建的项目是按模块来划分的，可以在每个模块下定义不同的配置。其中:<ul><li><code>common</code> 模块下定义一些<strong>通用的配置</strong>，其他模块下配置会继承 <code>common</code> 下的配置。如：<code>home</code> 模块下的最终配置是<strong>将 <code>common</code> 和 <code>home</code> 模块</strong>下<strong>配置合并</strong>的结果。</li></ul></li></ul><h4 id="项目环境"><a href="#项目环境" class="headerlink" title="项目环境"></a>项目环境</h4><ul><li>ThinkJS 默认支持 3 种项目环境，可以根据不同的环境进行配置，以满足不同情况下的配置需要。<ul><li><code>development</code> 开发环境</li><li><code>testing</code> 测试环境</li><li><code>production</code> 线上环境</li></ul></li><li>项目里也可以扩展其他的环境，当前使用哪种环境可以在 <strong>入口文件</strong> 中设置，设置 <code>env</code> 值即可。</li></ul><blockquote>www/development.js</blockquote><ul><li><code>www/production.js</code> 为<strong>线上</strong>的入口文件。</li><li>开发模式下项目的入口文件的代码类似如下，可以根据项目需要进行修改。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var thinkjs = require(<span class="string">'thinkjs'</span>);</span><br><span class="line">var path = require(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line">var rootPath = path.dirname(__dirname);</span><br><span class="line"></span><br><span class="line">var instance = new thinkjs(&#123;</span><br><span class="line">  APP_PATH: rootPath + <span class="string">'/app'</span>,</span><br><span class="line">  ROOT_PATH: rootPath,</span><br><span class="line">  RESOURCE_PATH: __dirname,</span><br><span class="line">  env: <span class="string">'development'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">instance.compile(&#123;retainLines: <span class="literal">true</span>, <span class="built_in">log</span>: <span class="literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line">instance.run();</span><br></pre></td></tr></table></figure></li></ul><h4 id="定义配置文件"><a href="#定义配置文件" class="headerlink" title="定义配置文件"></a>定义配置文件</h4><blockquote>config/config.js</blockquote><ul><li>存放一些基本的配置，如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  port: 8360, </span><br><span class="line">  host: <span class="string">''</span>,</span><br><span class="line">  encoding: <span class="string">'utf-8'</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote>config/[name].js</blockquote><ul><li>存放具体某个独立功能的配置，如：<code>db.js</code> 为数据库配置，<code>redis.js</code> 为 redis 配置。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// db.js</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  <span class="built_in">type</span>: <span class="string">'mysql'</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><blockquote>config/env/[mode].js</blockquote><ul><li><p>不同项目环境的差异化配置：</p><ul><li>如：<code>env/development.js</code>，<code>env/testing.js</code>，<code>env/production.js</code>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// config/env/development.js</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  port: 7777,</span><br><span class="line">  db: &#123; //开发模式下数据库配置</span><br><span class="line">    <span class="built_in">type</span>: <span class="string">'mysql'</span>,</span><br><span class="line">    adapter: &#123;</span><br><span class="line">      mysql: &#123;</span><br><span class="line">        host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        port: <span class="string">''</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>注</code>：不同项目环境差异化配置一般不是很多，所以放在一个文件中定义。这时候如果要修改一个独立功能的配置，就需要将独立功能对应的 key 带上。如：上述代码里的修改数据库配置需要将数据库对应的名称 <code>db</code> 带上。</p></li></ul><blockquote>config/locale/[lang].js</blockquote><ul><li>国际化语言包配置，如： <code>locale/en.js</code>，<code>locale/zh-cn.js</code>。</li><li>配置格式采用 <code>key: value</code> 的形式，并且 <code>key</code> 不区分大小写。</li></ul><h4 id="加载配置文件"><a href="#加载配置文件" class="headerlink" title="加载配置文件"></a>加载配置文件</h4><ul><li>框架支持多种级别的配置文件，会按以下顺序进行读取：<ul><li><code>框架默认的配置 -&gt; 项目模式下框架配置 -&gt; 项目公共配置 -&gt; 项目模式下的公共配置 -&gt; 模块下的配置</code>。</li></ul></li></ul><h5 id="通过-config-方法获取"><a href="#通过-config-方法获取" class="headerlink" title="通过 config 方法获取"></a>通过 config 方法获取</h5><ul><li>在 Controller，Logic，Middleware 等地方可以通过 <code>this.config/code&gt; 来获取。如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> db = this.config(<span class="string">'db'</span>); //读取数据库的所有配置</span><br><span class="line"><span class="built_in">let</span> host = this.config(<span class="string">'db.host'</span>); //读取数据库的 host 配置，等同于 db.host</span><br></pre></td></tr></table></figure></code></li></ul><h5 id="通过-config-方法获取-1"><a href="#通过-config-方法获取-1" class="headerlink" title="通过 config 方法获取"></a>通过 config 方法获取</h5><ul><li>http 对象也有 config 方法用来获取相关的配置，如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> db = http.config(<span class="string">'db'</span>);</span><br></pre></td></tr></table></figure></li></ul><h5 id="其他地方配置读取"><a href="#其他地方配置读取" class="headerlink" title="其他地方配置读取"></a>其他地方配置读取</h5><ul><li><p>其他地方可以通过 think.config 来读取相关的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> db = think.config(<span class="string">'db'</span>); //读取通用模块下的数据库配置</span><br><span class="line"><span class="built_in">let</span> db1 = think.config(<span class="string">'db'</span>, undefined, <span class="string">'home'</span>); //获取 home 模块下数据库配置</span><br></pre></td></tr></table></figure></li><li><p><code>注</code>：路由解析前，无法通过 config 方法或者 http 对象上的 config 方法来获取非通用模块下的配置，所以<strong>路由解析前就使用的配置需要定义在通用模块里</strong>。</p></li></ul><h4 id="系统默认配置"><a href="#系统默认配置" class="headerlink" title="系统默认配置"></a>系统默认配置</h4><h5 id="env"><a href="#env" class="headerlink" title="env"></a>env</h5><ul><li><p>项目模式下的配置，<code>config/env/development.js</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  auto_reload: <span class="literal">true</span>,</span><br><span class="line">  log_request: <span class="literal">true</span>,</span><br><span class="line">  gc: &#123;</span><br><span class="line">    on: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  error: &#123;</span><br><span class="line">    detail: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>config/env/testing.js</code> 和 <code>config/env/produciton.js</code> 无默认配置。</p></li></ul><h5 id="locale"><a href="#locale" class="headerlink" title="locale"></a>locale</h5><ul><li>国际化语言包配置，默认的配置如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// config/locale/en.js</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  CONTROLLER_NOT_FOUND: <span class="string">'controller `%s` not found. url is `%s`.'</span>,</span><br><span class="line">  CONTROLLER_INVALID: <span class="string">'controller `%s` is not valid. url is `%s`'</span>,</span><br><span class="line">  ACTION_NOT_FOUND: <span class="string">'action `%s` not found. url is `%s`'</span>,</span><br><span class="line">  ACTION_INVALID: <span class="string">'action `%s` is not valid. url is `%s`'</span>,</span><br><span class="line">  WORKER_DIED: <span class="string">'worker `%d` died, it will auto restart.'</span>,</span><br><span class="line">  MIDDLEWARE_NOT_FOUND: <span class="string">'middleware `%s` not found'</span>,</span><br><span class="line">  ADAPTER_NOT_FOUND: <span class="string">'adapter `%s` not found'</span>,</span><br><span class="line">  GCTYPE_MUST_SET: <span class="string">'instance must have gcType property'</span>,</span><br><span class="line">  CONFIG_NOT_FUNCTION: <span class="string">'config `%s` is not a function'</span>,</span><br><span class="line">  CONFIG_NOT_VALID: <span class="string">'config `%s` is not valid'</span>,</span><br><span class="line">  PATH_EMPTY: <span class="string">'`%s` path muse be set'</span>,</span><br><span class="line">  PATH_NOT_EXIST: <span class="string">'`%s` is not exist'</span>,</span><br><span class="line">  TEMPLATE_NOT_EXIST: <span class="string">'can\'</span>t find template file `%s`<span class="string">',</span></span><br><span class="line"><span class="string">  PARAMS_EMPTY: '</span>params `%s` value can\<span class="string">'t empty'</span>,</span><br><span class="line">  PARAMS_NOT_VALID: <span class="string">'params `&#123;name&#125;` value not valid'</span>,</span><br><span class="line">  FIELD_KEY_NOT_VALID: <span class="string">'field `%s` in where condition is not valid'</span>,</span><br><span class="line">  DATA_EMPTY: <span class="string">'data can not be empty'</span>,</span><br><span class="line">  MISS_WHERE_CONDITION: <span class="string">'miss where condition'</span>,</span><br><span class="line">  INVALID_WHERE_CONDITION_KEY: <span class="string">'where condition key is not valid'</span>,</span><br><span class="line">  WHERE_CONDITION_INVALID: <span class="string">'where condition `%s`:`%s` is not valid'</span>,</span><br><span class="line">  TABLE_NO_COLUMNS: <span class="string">'table `%s` has no columns'</span>,</span><br><span class="line">  NOT_SUPPORT_TRANSACTION: <span class="string">'table engine is not support transaction'</span>,</span><br><span class="line">  DATA_MUST_BE_ARRAY: <span class="string">'data is not an array list'</span>,</span><br><span class="line">  PARAMS_TYPE_INVALID: <span class="string">'params `&#123;name&#125;` type invalid'</span>,</span><br><span class="line">  DISALLOW_PORT: <span class="string">'proxy on, cannot visit with port'</span>,</span><br><span class="line">  SERVICE_UNAVAILABLE: <span class="string">'Service Unavailable'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="config"><a href="#config" class="headerlink" title="config"></a>config</h5><ul><li>基本配置，<code>config/config.js</code>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  port: 8360, //服务监听的端口</span><br><span class="line">  host: <span class="string">''</span>, //服务监听的 host</span><br><span class="line">  encoding: <span class="string">'utf-8'</span>, //项目编码</span><br><span class="line">  pathname_prefix: <span class="string">''</span>,  //pathname 去除的前缀，路由解析中使用</span><br><span class="line">  pathname_suffix: <span class="string">'.html'</span>, //pathname 去除的后缀，路由解析中使用</span><br><span class="line">  hook_on: <span class="literal">true</span>,  //是否开启 hook</span><br><span class="line">  cluster_on: <span class="literal">false</span>, //是否开启 cluster，值为具体的数值时可以配置 `cluster` 的个数</span><br><span class="line">  timeout: 120, //120 seconds</span><br><span class="line">  auto_reload: <span class="literal">false</span>, //自动重新加载修改的文件，development 模式下使用</span><br><span class="line"></span><br><span class="line">  resource_on: <span class="literal">true</span>, // 是否处理静态资源请求， proxy_on 开启下可以关闭该配置</span><br><span class="line">  resource_reg: /^(static\/|[^\/]+\.(?!js|html)\w+$)/, //静态资源的正则</span><br><span class="line"></span><br><span class="line">  route_on: <span class="literal">true</span>, //是否开启自定义路由</span><br><span class="line"></span><br><span class="line">  log_error: <span class="literal">true</span>, //是否打印错误日志</span><br><span class="line">  log_request: <span class="literal">false</span>, //是否打印请求的日志</span><br><span class="line"></span><br><span class="line">  create_server: undefined, //自定义启动服务</span><br><span class="line">  output_content: undefined, //自定义输出内容处理方式，可以进行 gzip 处理等</span><br><span class="line">  deny_module_list: [], //禁用的模块列表</span><br><span class="line">  default_module: <span class="string">'home'</span>, //默认模块</span><br><span class="line">  default_controller: <span class="string">'index'</span>,  //默认的控制器</span><br><span class="line">  default_action: <span class="string">'index'</span>, //默认的 Action</span><br><span class="line">  callback_name: <span class="string">'callback'</span>, //jsonp 请求的 callback 名称</span><br><span class="line">  json_content_type: <span class="string">'application/json'</span>, //json 输出时设置的 Content-Type</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h5><ul><li>缓存配置，<code>config/cache.js</code>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  <span class="built_in">type</span>: <span class="string">'file'</span>, //缓存方式</span><br><span class="line">  adapter: &#123;</span><br><span class="line">    file: &#123;</span><br><span class="line">      timeout: 6 * 3600, //6 hours</span><br><span class="line">      path: think.RUNTIME_PATH + <span class="string">'/cache'</span>, //文件缓存模式下缓存内容存放的目录</span><br><span class="line">      path_depth: 2, //子目录深度</span><br><span class="line">      file_ext: <span class="string">'.json'</span> //缓存文件的扩展名</span><br><span class="line">    &#125;,</span><br><span class="line">    redis: &#123;</span><br><span class="line">      prefix: <span class="string">'thinkjs_'</span>, //缓存名称前缀</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h5 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h5><ul><li>cookie 配置，<code>config/cookie.js</code>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  domain: <span class="string">''</span>, // cookie domain</span><br><span class="line">  path: <span class="string">'/'</span>, // cookie path</span><br><span class="line">  httponly: <span class="literal">false</span>, //是否 httponly</span><br><span class="line">  secure: <span class="literal">false</span>, //是否在 https 下使用</span><br><span class="line">  timeout: 0 //cookie 有效时间</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h5 id="db"><a href="#db" class="headerlink" title="db"></a>db</h5><ul><li>数据库配置，<code>config/db.js</code>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  <span class="built_in">type</span>: <span class="string">'mysql'</span>, //数据库类型</span><br><span class="line">  log_sql: <span class="literal">true</span>, //是否记录 sql 语句</span><br><span class="line">  log_connect: <span class="literal">true</span>, // 是否记录连接数据库的信息</span><br><span class="line">  adapter: &#123;</span><br><span class="line">    mysql: &#123;</span><br><span class="line">      host: <span class="string">'127.0.0.1'</span>, //数据库 host</span><br><span class="line">      port: <span class="string">''</span>, //端口</span><br><span class="line">      database: <span class="string">''</span>, //数据库名称</span><br><span class="line">      user: <span class="string">''</span>, //账号</span><br><span class="line">      password: <span class="string">''</span>, //密码</span><br><span class="line">      prefix: <span class="string">'think_'</span>, //数据表前缀</span><br><span class="line">      encoding: <span class="string">'utf8'</span>, //数据库编码</span><br><span class="line">      nums_per_page: 10, //一页默认条数</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h5 id="error"><a href="#error" class="headerlink" title="error"></a>error</h5><ul><li>错误信息配置，<code>config/error.js</code>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  key: <span class="string">'errno'</span>, //error number</span><br><span class="line">  msg: <span class="string">'errmsg'</span>, //error message</span><br><span class="line">  value: 1000 //default errno</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h5 id="post"><a href="#post" class="headerlink" title="post"></a>post</h5><ul><li>post 请求时的配置，<code>config/post.js</code>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  json_content_type: [<span class="string">'application/json'</span>],</span><br><span class="line">  max_file_size: 1024 * 1024 * 1024, //1G</span><br><span class="line">  max_fields: 100, </span><br><span class="line">  max_fields_size: 2 * 1024 * 1024, //2M,</span><br><span class="line">  ajax_filename_header: <span class="string">'x-filename'</span>,</span><br><span class="line">  file_upload_path: think.RUNTIME_PATH + <span class="string">'/upload'</span>,</span><br><span class="line">  file_auto_remove: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h5 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h5><ul><li>redis 配置，<code>config/redis.js</code>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">  port: 6379,</span><br><span class="line">  password: <span class="string">''</span>,</span><br><span class="line">  timeout: 0,</span><br><span class="line">  log_connect: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h5 id="session"><a href="#session" class="headerlink" title="session"></a>session</h5><ul><li>session 配置，<code>config/session.js</code>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  name: <span class="string">'thinkjs'</span>,</span><br><span class="line">  <span class="built_in">type</span>: <span class="string">'file'</span>,</span><br><span class="line">  path: think.RUNTIME_PATH + <span class="string">'/session'</span>,</span><br><span class="line">  secret: <span class="string">''</span>,</span><br><span class="line">  timeout: 24 * 3600,</span><br><span class="line">  cookie: &#123; // cookie options</span><br><span class="line">    length: 32</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h5 id="view"><a href="#view" class="headerlink" title="view"></a>view</h5><ul><li>视图配置，<code>config/view.js</code>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  content_type: <span class="string">'text/html'</span>,</span><br><span class="line">  file_ext: <span class="string">'.html'</span>,</span><br><span class="line">  file_depr: <span class="string">'_'</span>,</span><br><span class="line">  root_path: <span class="string">''</span>,</span><br><span class="line">  <span class="built_in">type</span>: <span class="string">'ejs'</span>,</span><br><span class="line">  adapter: &#123;</span><br><span class="line">    ejs: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h5 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h5><ul><li>websocket 配置，<code>config/websocket.js</code>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  on: <span class="literal">false</span>, //是否开启 websocket</span><br><span class="line">  <span class="built_in">type</span>: <span class="string">'think'</span>, //websocket 使用的库</span><br><span class="line">  allow_origin: <span class="string">''</span>,</span><br><span class="line">  sub_protocal: <span class="string">''</span>,</span><br><span class="line">  adp: undefined,</span><br><span class="line">  path: <span class="string">''</span>, //url path <span class="keyword">for</span> websocket</span><br><span class="line">  messages: &#123;</span><br><span class="line">    // open: <span class="string">'home/websocket/open'</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h5 id="扩展配置"><a href="#扩展配置" class="headerlink" title="扩展配置"></a>扩展配置</h5><ul><li><p>项目里可以根据需要扩展配置，扩展配置只需在 <code>src/common/config/</code> 建立对应的文件即可，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// src/common/config/foo.js</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  name: <span class="string">'bar'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这样就可以通过 <code>think.config(‘foo’)</code> 来获取对应的配置了。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;视图&quot;&gt;&lt;a href=&quot;#视图&quot; class=&quot;headerlink&quot; title=&quot;视图&quot;&gt;&lt;/a&gt;视图&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;视图即模版，默认的根目录为 &lt;code&gt;view/&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;视图文件&quot;&gt;&lt;a href=&quot;#视图文件&quot; class=&quot;headerlink&quot; title=&quot;视图文件&quot;&gt;&lt;/a&gt;视图文件&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;视图文件默认的命名规则为 &lt;code&gt;模块/控制器_操作.html&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;假如 &lt;code&gt;URL home/article/detail&lt;/code&gt; 解析后的模块是 &lt;code&gt;home&lt;/code&gt;，控制器是 &lt;code&gt;article&lt;/code&gt;，操作是 &lt;code&gt;detail&lt;/code&gt;，那么对应的视图文件为 &lt;code&gt;home/article_detail.html&lt;/code&gt;。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Node.js" scheme="https://chongtianhong.github.io/tags/Node-js/"/>
    
      <category term="ThinkJS" scheme="https://chongtianhong.github.io/tags/ThinkJS/"/>
    
  </entry>
  
  <entry>
    <title>axios 学习笔记</title>
    <link href="https://chongtianhong.github.io/2018/03/04/axios/"/>
    <id>https://chongtianhong.github.io/2018/03/04/axios/</id>
    <published>2018-03-04T02:36:21.000Z</published>
    <updated>2018-03-07T13:56:20.748Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>官方文档地址：<a href="https://github.com/axios/axios" target="_blank" rel="noopener">https://github.com/axios/axios</a></li><li>axios 是一个基于 Promise 的HTTP库，可以用在浏览器和 node.js 中。</li><li>特性：<ul><li>从浏览器发起 XMLHttpRequests 请求</li><li>从 node.js 发起 http 请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>自动转换为 JSON 数据</li><li>客户端支持防御 XSRF<a id="more"></a></li></ul></li></ul><h3 id="回顾Promise"><a href="#回顾Promise" class="headerlink" title="回顾Promise"></a>回顾Promise</h3><ul><li><p>Promise 是 es6中新增的<strong>异步事件处理方式</strong>，基本用法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> myFirstPromise = new Promise(<span class="keyword">function</span>(resolve, reject)&#123; </span><br><span class="line">    // 当异步事件处理成功后自动调用 resolve(...)方法，如果失败的话则调用 reject(...)</span><br><span class="line">    // 在这个例子中，我们使用setTimeout(...) 定时器来模拟异步事件</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        resolve(<span class="string">"Success!"</span>); // 此时，所有代码运行完毕</span><br><span class="line">    &#125;, 250);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">myFirstPromise.then((successMessage) =&gt; &#123;</span><br><span class="line">    //successMessage 就是上面的resolve(...)方法中所传入的参数</span><br><span class="line">    console.log(<span class="string">"Yay! "</span> + successMessage);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Yay! Success!</span><br></pre></td></tr></table></figure></li><li><p>Promise对象是一个<strong>构造函数</strong>，它<strong>接收一个函数</strong>作为<strong>参数</strong>，该函数的两个参数分别是 <code>resolve</code>（字面意思：解决） 和 <code>reject</code> （字面意思：拒绝），它们是两个函数，由 js 引擎提供，不用自己部署。</p></li><li><code>resolve</code> 函数的作用是，将 Promise 对象的状态从“未完成(pending)”变为“成功(resolved)”，在<strong>异步操作成功时调用</strong>，并将异步操作的结果，作为参数传递出去。</li><li><code>reject</code> 函数的作用是，将 Promise 对象的状态从“未完成(pending)”变为“失败(rejected)”，在<strong>异步操作失败时调用</strong>，并将异步操作报出的错误，作为参数传递出去。</li><li><p>上例中，myFirstPromise 是 Promise 对象创建的一个实例，Promise 实例生成后，可以用 <code>then</code> 方法分别指定 <code>resolve</code> 状态 和 <code>reject</code> 状态的回调函数，<code>reject</code> 函数是可选的，不一定要提供。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getJSON(<span class="string">'/posts.json'</span>).<span class="keyword">then</span>(<span class="keyword">function</span>(posts) &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;).catch(<span class="keyword">function</span>(error) &#123;</span><br><span class="line">    // 处理 getJSON 和 前一个回调函数运行时发生的错误</span><br><span class="line">    console.log(<span class="string">'发生错误！'</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>上面代码中，getJSON 方法返回一个 Promise 对象，如果该对象状态变为 <code>resolved</code>，则会调用 <code>then</code> 方法指定的回调函数；如果异步操作抛出异常，状态就会变为 <code>rejected</code>，同时调用 <code>catch</code> 方法指定的回调函数，处理这个错误。另外，<code>then</code> 方法指定的回调函数，如果在运行中抛出错误，也会被 <code>catch</code> 方法捕获。</p></li></ul><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 命令行输入</span><br><span class="line">npm install axios</span><br><span class="line"></span><br><span class="line">//引入 axios</span><br><span class="line">import axios from <span class="string">'axios'</span></span><br></pre></td></tr></table></figure><h4 id="官网提供的示例"><a href="#官网提供的示例" class="headerlink" title="官网提供的示例"></a>官网提供的示例</h4><ul><li><p>执行 GET 请求:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// 为给定 ID 的 user 发起请求</span><br><span class="line">axios.get(<span class="string">'/user?ID=12345'</span>)</span><br><span class="line">    .<span class="keyword">then</span>(<span class="keyword">function</span> (response) &#123;</span><br><span class="line">        console.log(response);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="keyword">function</span> (error) &#123;</span><br><span class="line">        console.log(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">// 上面的请求也可以这么做</span><br><span class="line">axios.get(<span class="string">'/user'</span>, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">        ID: 12345</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="keyword">then</span>(<span class="keyword">function</span> (response) &#123;</span><br><span class="line">        console.log(response);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="keyword">function</span> (error) &#123;</span><br><span class="line">        console.log(error);</span><br><span class="line">    &#125;);</span><br><span class="line">// 使用第二种方式会对参数值执行encodeURIComponent</span><br><span class="line"></span><br><span class="line">// Want to use async/await? Add the `async` keyword to your outer <span class="keyword">function</span>/method.</span><br><span class="line">async <span class="keyword">function</span> <span class="function"><span class="title">getUser</span></span>() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        const response = await axios.get(<span class="string">'/user?ID=12345'</span>);</span><br><span class="line">        console.log(response);</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">        console.error(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行 POST 请求:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">'/user'</span>, &#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span>,</span><br><span class="line">    lastName: <span class="string">'Flintstone'</span></span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="keyword">then</span>(<span class="keyword">function</span> (response) &#123;</span><br><span class="line">        console.log(response);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="keyword">function</span> (error) &#123;</span><br><span class="line">        console.log(error);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li><li><p>执行多个并发请求:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getUserAccount</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> axios.get(<span class="string">'/user/12345'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getUserPermissions</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> axios.get(<span class="string">'/user/12345/permissions'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="line">    .<span class="keyword">then</span>(axios.spread(<span class="keyword">function</span> (acct, perms) &#123;</span><br><span class="line">        // 两个请求都已完成</span><br><span class="line">    &#125;));</span><br></pre></td></tr></table></figure></li></ul><h4 id="axios-API"><a href="#axios-API" class="headerlink" title="axios API"></a>axios API</h4><ul><li>可以通过向 axios 传递相关配置来创建请求:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">axios(config)</span><br><span class="line"></span><br><span class="line">// 发送一个 POST 请求</span><br><span class="line">axios(&#123;</span><br><span class="line">  method: <span class="string">'post'</span>,</span><br><span class="line">  url: <span class="string">'/user/12345'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span>,</span><br><span class="line">    lastName: <span class="string">'Flintstone'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">// 从远程图片获取 GET 请求</span><br><span class="line">axios(&#123;</span><br><span class="line">  method:<span class="string">'get'</span>,</span><br><span class="line">  url:<span class="string">'http://bit.ly/2mTM3nY'</span>,</span><br><span class="line">  responseType:<span class="string">'stream'</span></span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="keyword">then</span>(<span class="keyword">function</span>(response) &#123;</span><br><span class="line">        response.data.pipe(fs.createWriteStream(<span class="string">'ada_lovelace.jpg'</span>))</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">axios(url[, config])</span><br><span class="line"></span><br><span class="line">// 发送一个 GET 请求（默认方法）</span><br><span class="line">axios(<span class="string">'/user/12345'</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="请求方法的别名"><a href="#请求方法的别名" class="headerlink" title="请求方法的别名"></a>请求方法的别名</h4><ul><li><p>为方便起见，所有被支持的请求方法都提供了别名:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">axios.request(config)</span><br><span class="line"></span><br><span class="line">axios.get(url[, config])</span><br><span class="line"></span><br><span class="line">axios.delete(url[, config])</span><br><span class="line"></span><br><span class="line">axios.head(url[, config])</span><br><span class="line"></span><br><span class="line">axios.options(url[, config])</span><br><span class="line"></span><br><span class="line">axios.post(url[, data[, config]])</span><br><span class="line"></span><br><span class="line">axios.put(url[, data[, config]])</span><br><span class="line"></span><br><span class="line">axios.patch(url[, data[, config]])</span><br></pre></td></tr></table></figure></li><li><p>注意：在使用别名方法时，url、method、data 这些属性都不必在配置中指定。</p></li></ul><h4 id="请求配置"><a href="#请求配置" class="headerlink" title="请求配置"></a>请求配置</h4><ul><li>以下这些是创建请求时可以用的配置选项。只有 url 是必需的。如果没有指定 method，请求将默认使用 get 方法。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // `url` 是用于请求的服务器 URL</span><br><span class="line">    url: <span class="string">'/user'</span>,</span><br><span class="line"> </span><br><span class="line">    // `method` 是创建请求时使用的方法</span><br><span class="line">    method: <span class="string">'get'</span>, // 默认是 get</span><br><span class="line"> </span><br><span class="line">    // `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span><br><span class="line">    // 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span><br><span class="line">    baseURL: <span class="string">'https://some-domain.com/api/'</span>,</span><br><span class="line"> </span><br><span class="line">    // `transformRequest` 允许在向服务器发送前，修改请求数据</span><br><span class="line">    // 只能用在 <span class="string">'PUT'</span>, <span class="string">'POST'</span> 和 <span class="string">'PATCH'</span> 这几个请求方法</span><br><span class="line">    // 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span><br><span class="line">    transformRequest: [<span class="keyword">function</span> (data) &#123;</span><br><span class="line">    // 对 data 进行任意转换处理</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">return</span> data;</span><br><span class="line">    &#125;],</span><br><span class="line"> </span><br><span class="line">    // `transformResponse` 在传递给 <span class="keyword">then</span>/catch 前，允许修改响应数据</span><br><span class="line">    transformResponse: [<span class="keyword">function</span> (data) &#123;</span><br><span class="line">    // 对 data 进行任意转换处理</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">return</span> data;</span><br><span class="line">    &#125;],</span><br><span class="line"> </span><br><span class="line">    // `headers` 是即将被发送的自定义请求头</span><br><span class="line">    headers: &#123;<span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>&#125;,</span><br><span class="line"> </span><br><span class="line">    // `params` 是即将与请求一起发送的 URL 参数</span><br><span class="line">    // 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span><br><span class="line">    params: &#123;</span><br><span class="line">        ID: 12345</span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">    // `paramsSerializer` 是一个负责 `params` 序列化的函数</span><br><span class="line">    // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span><br><span class="line">    paramsSerializer: <span class="keyword">function</span>(params) &#123;</span><br><span class="line">        <span class="built_in">return</span> Qs.stringify(params, &#123;arrayFormat: <span class="string">'brackets'</span>&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">    // `data` 是作为请求主体被发送的数据</span><br><span class="line">    // 只适用于这些请求方法 <span class="string">'PUT'</span>, <span class="string">'POST'</span>, 和 <span class="string">'PATCH'</span></span><br><span class="line">    // 在没有设置 `transformRequest` 时，必须是以下类型之一：</span><br><span class="line">    // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span><br><span class="line">    // - 浏览器专属：FormData, File, Blob</span><br><span class="line">    // - Node 专属： Stream</span><br><span class="line">    data: &#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span></span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">    // `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span><br><span class="line">    // 如果请求话费了超过 `timeout` 的时间，请求将被中断</span><br><span class="line">    timeout: 1000,</span><br><span class="line"> </span><br><span class="line">    // `withCredentials` 表示跨域请求时是否需要使用凭证</span><br><span class="line">    withCredentials: <span class="literal">false</span>, // 默认的</span><br><span class="line"> </span><br><span class="line">    // `adapter` 允许自定义处理请求，以使测试更轻松</span><br><span class="line">    // 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](<span class="comment">#response-api)).</span></span><br><span class="line">    adapter: <span class="keyword">function</span> (config) &#123;</span><br><span class="line">        /* ... */</span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">    // `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span><br><span class="line">    // 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头</span><br><span class="line">    auth: &#123;</span><br><span class="line">        username: <span class="string">'janedoe'</span>,</span><br><span class="line">        password: <span class="string">'s00pers3cret'</span></span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">    // `responseType` 表示服务器响应的数据类型，可以是 <span class="string">'arraybuffer'</span>, <span class="string">'blob'</span>, <span class="string">'document'</span>, <span class="string">'json'</span>, <span class="string">'text'</span>, <span class="string">'stream'</span></span><br><span class="line">    responseType: <span class="string">'json'</span>, // 默认的</span><br><span class="line"> </span><br><span class="line">    // `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span><br><span class="line">    xsrfCookieName: <span class="string">'XSRF-TOKEN'</span>, // default</span><br><span class="line"> </span><br><span class="line">    // `xsrfHeaderName` 是承载 xsrf token 的值的 HTTP 头的名称</span><br><span class="line">    xsrfHeaderName: <span class="string">'X-XSRF-TOKEN'</span>, // 默认的</span><br><span class="line"> </span><br><span class="line">    // `onUploadProgress` 允许为上传处理进度事件</span><br><span class="line">    onUploadProgress: <span class="keyword">function</span> (progressEvent) &#123;</span><br><span class="line">        // 对原生进度事件的处理</span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">    // `onDownloadProgress` 允许为下载处理进度事件</span><br><span class="line">    onDownloadProgress: <span class="keyword">function</span> (progressEvent) &#123;</span><br><span class="line">        // 对原生进度事件的处理</span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">    // `maxContentLength` 定义允许的响应内容的最大尺寸</span><br><span class="line">    maxContentLength: 2000,</span><br><span class="line"> </span><br><span class="line">    // `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject promise 。如果 `validateStatus` 返回 `<span class="literal">true</span>` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</span><br><span class="line">    validateStatus: <span class="keyword">function</span> (status) &#123;</span><br><span class="line">        <span class="built_in">return</span> status &gt;= 200 &amp;&amp; status &lt; 300; // 默认的</span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">    // `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</span><br><span class="line">    // 如果设置为0，将不会 follow 任何重定向</span><br><span class="line">    maxRedirects: 5, // 默认的</span><br><span class="line"> </span><br><span class="line">    // `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：</span><br><span class="line">    // `keepAlive` 默认没有启用</span><br><span class="line">    httpAgent: new http.Agent(&#123; keepAlive: <span class="literal">true</span> &#125;),</span><br><span class="line">    httpsAgent: new https.Agent(&#123; keepAlive: <span class="literal">true</span> &#125;),</span><br><span class="line"> </span><br><span class="line">    // <span class="string">'proxy'</span> 定义代理服务器的主机名称和端口</span><br><span class="line">    // `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span><br><span class="line">    // 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span><br><span class="line">    proxy: &#123;</span><br><span class="line">        host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        port: 9000,</span><br><span class="line">        auth: : &#123;</span><br><span class="line">            username: <span class="string">'mikeymike'</span>,</span><br><span class="line">            password: <span class="string">'rapunz3l'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">    // `cancelToken` 指定用于取消请求的 cancel token</span><br><span class="line">    // （查看后面的 Cancellation 这节了解更多）</span><br><span class="line">    cancelToken: new CancelToken(<span class="keyword">function</span> (cancel) &#123;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="响应结构"><a href="#响应结构" class="headerlink" title="响应结构"></a>响应结构</h4><ul><li><p>某个请求的响应包含以下信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // `data` 由服务器提供的响应</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line"> </span><br><span class="line">    // `status` 来自服务器响应的 HTTP 状态码</span><br><span class="line">    status: 200,</span><br><span class="line"> </span><br><span class="line">    // `statusText` 来自服务器响应的 HTTP 状态信息</span><br><span class="line">    statusText: <span class="string">'OK'</span>,</span><br><span class="line"> </span><br><span class="line">    // `headers` 服务器响应的头</span><br><span class="line">    headers: &#123;&#125;,</span><br><span class="line"> </span><br><span class="line">    // `config` 是为请求提供的配置信息</span><br><span class="line">    config: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 then 时，将接收下面这样的响应：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/user/12345'</span>)</span><br><span class="line">    .<span class="keyword">then</span>(<span class="keyword">function</span>(response) &#123;</span><br><span class="line">        console.log(response.data);</span><br><span class="line">        console.log(response.status);</span><br><span class="line">        console.log(response.statusText);</span><br><span class="line">        console.log(response.headers);</span><br><span class="line">        console.log(response.config);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用-axios-实现-ajax-方案"><a href="#使用-axios-实现-ajax-方案" class="headerlink" title="使用 axios 实现 ajax 方案"></a>使用 axios 实现 ajax 方案</h4><blockquote>Vue-axios 与 Jquery-ajax 的使用区别</blockquote><ul><li><p>axios 和 ajax 的使用方法基本一样，只有个别参数不同：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// axios</span><br><span class="line">axios(&#123;</span><br><span class="line">    url: <span class="string">'http://jsonplaceholder.typicode.com/users'</span>,</span><br><span class="line">    method: <span class="string">'get'</span>,</span><br><span class="line">    responseType: <span class="string">'json'</span>, // 默认的</span><br><span class="line">    data: &#123;</span><br><span class="line">        //<span class="string">'a'</span>: 1,</span><br><span class="line">        //<span class="string">'b'</span>: 2,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="keyword">function</span> (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">    console.log(response.data);</span><br><span class="line">&#125;).catch(<span class="keyword">function</span> (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// ajax</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'http://jsonplaceholder.typicode.com/users'</span>,</span><br><span class="line">    <span class="built_in">type</span>: <span class="string">'get'</span>,</span><br><span class="line">    dataType: <span class="string">'json'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        //<span class="string">'a'</span>: 1,</span><br><span class="line">        //<span class="string">'b'</span>: 2,</span><br><span class="line">    &#125;,</span><br><span class="line">    success: <span class="keyword">function</span> (response) &#123;</span><br><span class="line">        console.log(response)；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>vue.js</strong> 自2.0版本已经不对 vue-resource 更新了，官方推荐<strong>使用 axios 解决方案</strong>。axios 使用了 Promise,而 jquery 自3.0 版本才支持 Promise,如果你只是想使用 jquery 的 ajax 的话，引入整个 jquery 是很大的负担，所以 axios 是一个很好的工具。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;官方文档地址：&lt;a href=&quot;https://github.com/axios/axios&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/axios/axios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;axios 是一个基于 Promise 的HTTP库，可以用在浏览器和 node.js 中。&lt;/li&gt;
&lt;li&gt;特性：&lt;ul&gt;
&lt;li&gt;从浏览器发起 XMLHttpRequests 请求&lt;/li&gt;
&lt;li&gt;从 node.js 发起 http 请求&lt;/li&gt;
&lt;li&gt;支持 Promise API&lt;/li&gt;
&lt;li&gt;拦截请求和响应&lt;/li&gt;
&lt;li&gt;转换请求和响应数据&lt;/li&gt;
&lt;li&gt;取消请求&lt;/li&gt;
&lt;li&gt;自动转换为 JSON 数据&lt;/li&gt;
&lt;li&gt;客户端支持防御 XSRF
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Web" scheme="https://chongtianhong.github.io/tags/Web/"/>
    
      <category term="交互" scheme="https://chongtianhong.github.io/tags/%E4%BA%A4%E4%BA%92/"/>
    
      <category term="AJAX" scheme="https://chongtianhong.github.io/tags/AJAX/"/>
    
      <category term="Promise" scheme="https://chongtianhong.github.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>Cookie、Session和WebStorage的区别总结</title>
    <link href="https://chongtianhong.github.io/2018/03/03/session/"/>
    <id>https://chongtianhong.github.io/2018/03/03/session/</id>
    <published>2018-03-03T02:36:21.000Z</published>
    <updated>2018-03-03T15:02:43.417Z</updated>
    
    <content type="html"><![CDATA[<h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><ul><li>cookie是指<strong>某些网站</strong>为了辨别用户身份而<strong>存储在用户本地终端（client side）上的数据（通常经过加密）</strong>。cookie通过HTTP请求报文和响应报文配合完成。</li><li>cookie是存储于访问者的计算机中的变量。每当同一台计算机通过浏览器请求同一个页面时，就会发送这个cookie 。</li><li>通俗的说就是当一个<strong>用户通过HTTP协议访问一个服务器</strong>的时候，这个<strong>服务器</strong>会将一些<strong>key/Value键值对返回给客户端浏览器</strong>，并给这些数据加上一些限制条件，在条件符合时这个用户下次访问这个服务器的时候，数据又被完整的带回给服务器。<a id="more"></a><ul><li>cookie由服务器生成，返回给客户端浏览器，由<strong>浏览器进行存储</strong>。下次请求同一页面时带上该cookie。</li></ul></li><li>cookie是<strong>浏览器提供的一种机制</strong>，可以由 javascript 对其进行控制，而不是 javascript 本身的性质。</li></ul><h4 id="HTTP-无状态"><a href="#HTTP-无状态" class="headerlink" title="HTTP 无状态"></a>HTTP 无状态</h4><ul><li>HTTP协议是无状态的协议。一旦数据交换完毕，客户端与服务器的连接就会关闭，再次交换数据需要建立新的连接。这就意味着服务器无法从连接上跟踪会话。</li><li>而<strong>cookie机制</strong>采用的是<strong>在客户端保持状态</strong>的方案，而<strong>session机制</strong>采用的是<strong>在服务器端保持状态</strong>的方案。</li></ul><h4 id="cookie-的不可跨域名性"><a href="#cookie-的不可跨域名性" class="headerlink" title="cookie 的不可跨域名性"></a>cookie 的不可跨域名性</h4><ul><li>cookie是<strong>存于用户硬盘</strong>的一个文件，这个文件通常对应于一个域名。<strong>cookie可以跨越同一个域名下的多个网页，但不能跨越多个域名使用</strong>。</li></ul><h4 id="cookie-的使用场景"><a href="#cookie-的使用场景" class="headerlink" title="cookie 的使用场景"></a>cookie 的使用场景</h4><ul><li>购物车<ul><li>没有登录之前商品数据是保存在cookie中</li></ul></li><li>记住用户名<ul><li>利用cookie保存用户名</li></ul></li><li>记住我<ul><li>利用cookie来保存用户名和密码（加密后保存的）</li></ul></li></ul><h4 id="cookie-的缺点"><a href="#cookie-的缺点" class="headerlink" title="cookie 的缺点"></a>cookie 的缺点</h4><ul><li>cookie体积过大会造成请求和响应速度变慢。</li><li>默认浏览器会任何请求都把cookie带上去，哪怕是静态资源。</li><li>cookie可以在前后端修改，数据容易篡改或伪造。</li><li>cookie对于敏感数据的保护基本是无效的。</li><li>有些用户是禁用掉cookie的</li></ul><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><ul><li>除了cookie，web应用程序中还经常使用session来记录客户端的登录状态。不同于cookie，<strong>session保存在服务器上</strong>。session相当于程序<strong>在服务器上建立一份客户档案</strong>，客户来访时只需要查询客户档案表就可以了。</li></ul><h3 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h3><ul><li>webStorage是HTML5中<strong>本地存储</strong>的解决方案之一，在 html5 中的 WebStorage 概念引入并不是为取代 cookie 而制定的标准，cookie 作为HTTP协议的一部分用来处理客户端和服务器通信是不可或缺的，session正是依赖于cookie实现的客户端状态保持。</li><li><strong>webStorage</strong>的意图在于解决本地本来不应该用 cookie 做，却不得不用cookie的<strong>本地存储</strong>。</li></ul><h4 id="webStorage-的优势"><a href="#webStorage-的优势" class="headerlink" title="webStorage 的优势"></a>webStorage 的优势</h4><ul><li>从容量上讲WebStorage一般浏览器提供5M的存储空间。</li><li>安全性上WebStorage 并不作为 HTTP header 发送的浏览器，所以相对安全。</li><li>从流量上讲，因为WebStorage不传送到服务器，所以不必要的流量可以节省。</li><li>Html 5的Web Storage分两种，一个是<code>sessionStorage</code>，另一个是<code>localStorage</code>，两者差別就差在<strong>生命周期的不同</strong>而已。<ul><li>sessionStorage 用于本地存储一个会话（session）中的数据，这些<strong>数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁</strong>。因此 sessionStorage 不是一种长久化的本地存储，仅仅是<strong>会话级别的存储</strong>。</li><li>localStorage则正好相反，<strong>除非主动删除数据</strong>，否则<strong>数据是永远不会过期</strong>的。</li></ul></li></ul><h3 id="cookie和session的区别"><a href="#cookie和session的区别" class="headerlink" title="cookie和session的区别"></a>cookie和session的区别</h3><ul><li>session 保存在服务器，客户端不知道其中的信息；cookie 保存在客户端，服务器能够知道其中的信息。</li><li>session 中保存的是对象，cookie 中保存的是字符串。</li><li>session 不能区分路径，同一个用户在访问一个网站期间，所有的session在任何地方都可以访问到。而 cookie 中如果设置了路径参数，那么同一个网站不同路径下的 cookie 互相是不可以访问的。</li><li>cookie 不是很安全，本人可以分析存放在本地的 cookie 并进行 cookie欺骗。</li><li>session 会在一定时间内保存在服务器上。当访问增多，会占用服务器的性能。考虑到<strong>减轻服务器性能负担</strong>方面，应该<strong>使用 cookie</strong>。</li><li>单个 cookie 保存的数据不能超过 4k ，很多浏览器都限制一个站点最多保存 20 个 cookie。</li><li>session 是通过 cookie来工作的。</li></ul><h3 id="cookie和sessionStorage、localStorage之间的区别"><a href="#cookie和sessionStorage、localStorage之间的区别" class="headerlink" title="cookie和sessionStorage、localStorage之间的区别"></a>cookie和sessionStorage、localStorage之间的区别</h3><ul><li>共同点：都是保存在浏览器端，且同源的。</li><li>区别：<ul><li>cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。而<strong>sessionStorage和localStorage</strong>不会自动把数据发给服务器，<strong>仅在本地保存</strong>。</li><li><strong>cookie数据还有路径（path）的概念</strong>，可以限制cookie只属于某个路径下。</li><li><strong>存储大小限制也不同</strong>，cookie数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</li><li><strong>数据有效期不同</strong>：<ul><li>sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；</li><li>localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；</li><li>cookie只<strong>在设置的cookie过期时间之前一直有效</strong>，即使窗口或浏览器关闭。</li></ul></li><li><strong>作用域不同</strong>：<ul><li>sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；</li><li>localStorage 在所有同源窗口中都是共享的；</li><li>cookie也是在所有同源窗口中都是共享的。</li></ul></li><li>Web Storage 支持事件通知机制，可以将数据更新的通知发送给监听者。</li><li>Web Storage 的 api 接口使用更方便。</li></ul></li></ul><h3 id="sessionStorage与页面-js-数据对象的区别"><a href="#sessionStorage与页面-js-数据对象的区别" class="headerlink" title="sessionStorage与页面 js 数据对象的区别"></a>sessionStorage与页面 js 数据对象的区别</h3><ul><li>页面中一般的 js 对象或数据的生存期是仅在当前页面有效，因此刷新页面或转到另一页面这样的<strong>重新加载页面</strong>的情况，<strong>数据</strong>就<strong>不存在</strong>了。</li><li>而 sessionStorage 只要同源的同窗口（或tab）中，刷新页面或进入同源的不同页面，数据始终存在。也就是说<strong>只要这个浏览器窗口没有关闭，加载新页面或重新加载，数据仍然存在</strong>。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;cookie&quot;&gt;&lt;a href=&quot;#cookie&quot; class=&quot;headerlink&quot; title=&quot;cookie&quot;&gt;&lt;/a&gt;cookie&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;cookie是指&lt;strong&gt;某些网站&lt;/strong&gt;为了辨别用户身份而&lt;strong&gt;存储在用户本地终端（client side）上的数据（通常经过加密）&lt;/strong&gt;。cookie通过HTTP请求报文和响应报文配合完成。&lt;/li&gt;
&lt;li&gt;cookie是存储于访问者的计算机中的变量。每当同一台计算机通过浏览器请求同一个页面时，就会发送这个cookie 。&lt;/li&gt;
&lt;li&gt;通俗的说就是当一个&lt;strong&gt;用户通过HTTP协议访问一个服务器&lt;/strong&gt;的时候，这个&lt;strong&gt;服务器&lt;/strong&gt;会将一些&lt;strong&gt;key/Value键值对返回给客户端浏览器&lt;/strong&gt;，并给这些数据加上一些限制条件，在条件符合时这个用户下次访问这个服务器的时候，数据又被完整的带回给服务器。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Web" scheme="https://chongtianhong.github.io/tags/Web/"/>
    
      <category term="Cookie" scheme="https://chongtianhong.github.io/tags/Cookie/"/>
    
      <category term="Session" scheme="https://chongtianhong.github.io/tags/Session/"/>
    
      <category term="WebStorage" scheme="https://chongtianhong.github.io/tags/WebStorage/"/>
    
  </entry>
  
  <entry>
    <title>ThinkJS学习笔记(一)</title>
    <link href="https://chongtianhong.github.io/2018/03/02/thinkjs/"/>
    <id>https://chongtianhong.github.io/2018/03/02/thinkjs/</id>
    <published>2018-03-02T03:09:44.000Z</published>
    <updated>2018-03-02T12:45:02.003Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>ThinkJS 是一款使用 ES6/7 特性全新开发的 Node.js MVC 框架，使用 ES7 中 <code>async/await</code>，或者 ES6 中的 <code>*/yield</code> 特性彻底解决了 Node.js 中<strong>异步嵌套</strong>的问题。同时吸收了国内外众多框架的设计理念和思想，让<strong>开发 Node.js 项目更加简单、高效</strong>。</li><li>使用 ES6/7 特性来开发项目可以大大提高开发效率，是趋势所在。并且新版的 Node.js 对 ES6 特性也有了较好的支持，即使有些特性还没有支持，也可以借助 Babel 编译来支持。</li><li>本次是基于ThinkJS 2.2 版本进行学习。<a id="more"></a></li></ul><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><h4 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h4><ul><li>ThinkJS 是一款 Node.js 的 MVC 框架，所以安装 ThinkJS 之前，需要先安装 Node.js 环境。安装完成后，在命令行执行 <code>node -v</code>，如果能看到对应的版本号输出，则表示安装成功。</li><li>ThinkJS 需要 Node.js 的版本 <code>&gt;=0.12.0</code>，如果版本小于这个版本，需要升级 Node.js，否则无法启动服务。建议将 Node.js 版本升级到 <code>4.2.1</code> 或更高版本。</li></ul><h4 id="安装-ThinkJS"><a href="#安装-ThinkJS" class="headerlink" title="安装 ThinkJS"></a>安装 ThinkJS</h4><ul><li><p>通过下面的命令即可全局安装 ThinkJS：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install thinkjs@2 -g --verbose</span><br></pre></td></tr></table></figure></li><li><p>安装完成后，可以通过 <code>thinkjs –version</code> 或 <code>thinkjs -V</code> 命令查看安装的版本。</p></li></ul><h4 id="使用命令创建项目"><a href="#使用命令创建项目" class="headerlink" title="使用命令创建项目"></a>使用命令创建项目</h4><ul><li>ThinkJS 安装完成后，就可以通过下面的命令创建项目:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thinkjs new project_path; <span class="comment">#project_path为项目存放的目录</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><ul><li>项目安装后，进入项目目录，执行 <code>npm install</code> 安装依赖，可以使用 <code>taobao</code> 源进行安装。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --registry=https://registry.npm.taobao.org --verbose</span><br></pre></td></tr></table></figure></li></ul><h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><ul><li>在项目目录下执行命令 <code>npm start</code>，如果能看到类似下面的内容，表示服务启动成功。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[2015-09-21 20:21:09] [THINK] Server running at http://127.0.0.1:8360/</span><br><span class="line">[2015-09-21 20:21:09] [THINK] ThinkJS Version: 2.0.0</span><br><span class="line">[2015-09-21 20:21:09] [THINK] Cluster Status: closed</span><br><span class="line">[2015-09-21 20:21:09] [THINK] WebSocket Status: closed</span><br><span class="line">[2015-09-21 20:21:09] [THINK] File Auto Reload: <span class="literal">true</span></span><br><span class="line">[2015-09-21 20:21:09] [THINK] App Enviroment: development</span><br></pre></td></tr></table></figure></li></ul><h4 id="访问项目"><a href="#访问项目" class="headerlink" title="访问项目"></a>访问项目</h4><ul><li>打开浏览器，访问<code><a href="http://127.0.0.1:8360/" target="_blank" rel="noopener">http://127.0.0.1:8360/</a></code>即可。</li></ul><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ul><li>ThinkJS 创建项目时支持多种项目模式，默认创建的项目是按模块来划分的，并且自动添加了 <code>common</code> 和 <code>home</code> 2 个模块。每个模块有独立的配置、控制器、视图、模型等文件。</li><li>使用模块的方式划分项目，可以让项目结构更加清晰。</li><li>路由访问规则：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">域名/模块名/控制器名 /action名</span><br><span class="line">test.com/home/api/index</span><br></pre></td></tr></table></figure></li></ul><h4 id="模块列表"><a href="#模块列表" class="headerlink" title="模块列表"></a>模块列表</h4><ul><li><code>src</code>是源代码目录，使用 <code>ES6</code> 模式创建项目才有该目录。项目启动时会自动将 <code>src</code> 目录下的文件编译到 <code>app</code> 目录下。</li><li>在ThinkJS中是用模块来分拆项目的。</li></ul><h4 id="common模块"><a href="#common模块" class="headerlink" title="common模块"></a>common模块</h4><ul><li>common 模块是个通用模块，该模块下存放一些通用的功能，如： 通用的配置，runtime 目录，启动文件，错误处理控制器等。</li><li><p><code>注</code>：该模块下的控制器不能响应用户的请求。</p><blockquote>src/common/bootstrap</blockquote><ul><li>项目启动目录，该目录下的文件会自动加载，无需手动 require 。</li><li><p>可以在这个目录下文件里定义一些全局函数、注册中间件等常用的功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> // src/common/bootstrap/global.js</span><br><span class="line">global.formatDate = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>注</code>：bootstrap 只能放在 common 模块里。</p></li></ul><blockquote>src/common/config</blockquote><ul><li>配置文件，这里放一些通用的配置。</li><li>其中：路由配置、hook 配置、本地化配置等必须放在这里。</li></ul><blockquote>src/common/controller</blockquote><ul><li>控制器，放一些通用的控制器。其中 <code>error.js</code> 里错误处理的不同行为，项目里可以根据需要进行修改。</li></ul></li></ul><h4 id="默认模块"><a href="#默认模块" class="headerlink" title="默认模块"></a>默认模块</h4><ul><li>项目默认模块为 <code>home</code> 模块。当解析用户的请求找不到模块时会自动对应到 <code>home</code> 下。</li><li>可以在 <code>src/common/config/config.js</code> 中修改配置<code>default_module</code> 来重新定义默认模块：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//将默认模块名改为 blog</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">    default_module: <span class="string">'blog'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="添加模块"><a href="#添加模块" class="headerlink" title="添加模块"></a>添加模块</h4><ul><li>添加模块直接通过 ThinkJS 命令即可完成。</li><li><p>在当前项目目录下，执行 <code>thinkjs module xxx</code>，即可创建名为 <code>xxx</code> 的模块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thinkjs module user //添加一个user模块</span><br></pre></td></tr></table></figure></li><li><p>如果模块名已经存在，则无法创建。</p></li><li><p>模块下默认有四个文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config---配置信息，如数据库等</span><br><span class="line">controller --- 控制器目录，控制器用于获取post与get数据和处理逻辑。一个 url 对应一个 controller 下的 action</span><br><span class="line">logic --- 这是thinkjs最有特色的一点，和controller一一对应，用于验证controller数据合法性与处理数据，在controller之前调用，可以降低controller里action的复杂度</span><br><span class="line">model --- 用于操作数据库，返回数据</span><br></pre></td></tr></table></figure></li><li><p>可以给模块增加一个<code>service</code>文件夹,用于存放公用方法，可供其他模块调用。假如在refund模块里面,要调用其/service里面common.js里的check()方法,则在/controller里面的api.js里面调用方式如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> refundService = think.service(<span class="string">'common'</span>, <span class="string">'refund'</span>);</span><br><span class="line"><span class="built_in">let</span> refundInstance = new refundService();</span><br><span class="line"><span class="built_in">let</span> refundCount = await refundInstance.check();</span><br></pre></td></tr></table></figure></li></ul><blockquote>添加 controller</blockquote><ul><li><p>可以在项目目录下通过 <code>thinkjs controller [name]</code> 命令来添加 controller。如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thinkjs controller user;</span><br></pre></td></tr></table></figure></li><li><p>执行完成后，会创建 <code>src/common/controller/user.js</code> 文件，同时会创建 <code>src/common/logic/user.js</code> 文件。</p></li><li><p>默认会在 <code>common</code> 模块下创建，如果想在其他模块下创建，可以通过指定模块创建。如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thinkjs controller home/user;</span><br></pre></td></tr></table></figure></li><li><p>指定模块为 <code>home</code> 后，会创建 <code>src/home/controller/user.js</code> 文件。</p></li></ul><blockquote>添加 service</blockquote><ul><li><p>可以在项目目录下通过 <code>thinkjs service [name]</code> 命令来添加 <code>service</code>。如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thinkjs service github; <span class="comment">#创建调用 github 接口的 service</span></span><br></pre></td></tr></table></figure></li><li><p>执行完成后，会创建 <code>src/common/service/github.js</code> 文件。</p></li><li><p>默认会在 <code>common</code> 模块下创建，如果想在其他模块下创建，可以通过指定模块创建。如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thinkjs service home/github;</span><br></pre></td></tr></table></figure></li><li><p>指定模块为 <code>home</code> 后，会创建 <code>src/home/service/github.js</code> 文件。</p></li></ul><h4 id="禁用模块"><a href="#禁用模块" class="headerlink" title="禁用模块"></a>禁用模块</h4><ul><li>ThinkJS 默认会自动查找和识别项目下的模块，并认为所有的模块都是可用的。</li><li>如果想禁用部分模块，可以修改配置文件 <code>src/common/config/config.js</code>，添加下面的配置：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">    deny_module_list: [<span class="string">'xxx'</span>] //禁用 xxx 模块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><ul><li>控制器是一类操作的集合，用来响应用户同一类的请求。</li></ul><h4 id="使用-async-await"><a href="#使用-async-await" class="headerlink" title="使用 async/await"></a>使用 async/await</h4><ul><li>借助 Babel 编译，可以在控制器里使用 ES7 里的 async/await。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line"></span><br><span class="line">import Base from <span class="string">'./base.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default class extends Base &#123;</span><br><span class="line">  /**</span><br><span class="line">   * index action</span><br><span class="line">   * @<span class="built_in">return</span> &#123;Promise&#125; []</span><br><span class="line">   */</span><br><span class="line">  async <span class="function"><span class="title">indexAction</span></span>()&#123;</span><br><span class="line">    <span class="built_in">let</span> model = this.model(<span class="string">'user'</span>); //实例化模型 user</span><br><span class="line">    <span class="built_in">let</span> data = await model.select();</span><br><span class="line">    <span class="built_in">return</span> this.success(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><ul><li>控制器里的每一个<code>Action</code> 代表一个要执行的操作。如： <code>url</code> 为 <code>/home/article/detail</code>，解析后的模块为 <code>/home</code>，控制器为 <code>article</code>， <code>Action</code> 为 <code>detail</code>，那么执行的 <code>Action</code> 就是文件 <code>src/home/controller/aritcle</code> 里的 <code>detailAction</code> 方法。</li></ul><h4 id="模型实例化"><a href="#模型实例化" class="headerlink" title="模型实例化"></a>模型实例化</h4><ul><li>在控制器中可以通过 <code>this.model</code> 方法快速获得一个模型的实例。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.controller.base &#123;</span><br><span class="line">  <span class="function"><span class="title">indexAction</span></span>()&#123;</span><br><span class="line">    <span class="built_in">let</span> model = this.model(<span class="string">'user'</span>); //实例化模型 user</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="this-作用域的问题"><a href="#this-作用域的问题" class="headerlink" title="this 作用域的问题"></a>this 作用域的问题</h4><ul><li>Node.js 里经常有很多异步操作，而异步操作常见的处理方式是使用回调函数或者 Promise。这些处理方式都会增加一层作用域，导致在回调函数内无法直接使用 <code>this</code>，简单的处理办法是在顶部定义一个变量，将 <code>this</code> 赋值给这个变量，然后在回调函数内使用这个变量。如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">module.exports = think.controller(&#123;</span><br><span class="line">  <span class="function"><span class="title">indexAction</span></span>()&#123;</span><br><span class="line">    var self = this; //这里将 this 赋值给变量 self，然后在后面的回调函数里都使用 self</span><br><span class="line">    this.model(<span class="string">'user'</span>).find().<span class="keyword">then</span>(<span class="keyword">function</span>(data)&#123;</span><br><span class="line">      <span class="built_in">return</span> self.model(<span class="string">'article'</span>).<span class="built_in">where</span>(&#123;user_id: data.id&#125;).select();</span><br><span class="line">    &#125;).<span class="keyword">then</span>(<span class="keyword">function</span>(data)&#123;</span><br><span class="line">      self.success(data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="JSON-输出"><a href="#JSON-输出" class="headerlink" title="JSON 输出"></a>JSON 输出</h4><ul><li>项目中经常要提供一些接口，这些接口一般都是直接输出 <code>JSON</code> 格式的数据，并且会有标识表明当前接口是否正常。如果发生异常，需要将对应的错误信息随着接口一起输出。控制器里提供了 <code>this.success</code> 和 <code>this.fail</code> 方法来输出这样的接口数据。</li></ul><blockquote>输出正常的 JSON</blockquote><ul><li><p>可以通过 <code>this.success</code> 方法输出正常的接口数据，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.controller.base &#123;</span><br><span class="line">  <span class="function"><span class="title">indexAction</span></span>()&#123;</span><br><span class="line">    <span class="built_in">let</span> data = &#123;name: <span class="string">"thinkjs"</span>&#125;;</span><br><span class="line">    this.success(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输出结果为 <code>{errno: 0, errmsg: “”, data: {“name”: “thinkjs”}}</code>，客户端可以通过 <code>errno</code> 是否为 0 来判断当前接口是否有异常。</p></li></ul><blockquote>输出含有错误信息的 JSON</blockquote><ul><li><p>可以通过 <code>this.fail</code> 方法输出含有错误信息的接口数据，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.controller.base &#123;</span><br><span class="line">  <span class="function"><span class="title">indexAction</span></span>()&#123;</span><br><span class="line">    this.fail(1000, <span class="string">'connect error'</span>); //指定错误号和错误信息</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输出结果为 <code>{errno: 1000, errmsg: “connect error”}</code>，客户端判断 <code>errno</code> 大于 0，就知道当前接口有异常，并且通过 <code>errmsg</code> 拿到具体的错误信息。</p></li></ul><blockquote>配置错误号和错误信息</blockquote><ul><li>如果每个地方输出错误的时候都要指定错误号和错误信息势必比较麻烦，比较好的方式是把错误号和错误信息在一个地方配置，然后输出的时候只要指定错误号，错误信息根据错误号自动读取。</li><li><p>错误信息支持国际化，所以配置放在 <code>src/common/config/locale/[lang].js</code> 文件中。如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  10001: <span class="string">'get data error'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过上面的配置后，执行 <code>this.fail(10001)</code> 时会自动读取到对应的错误信息。</p></li></ul><blockquote>友好的错误号</blockquote><ul><li>在程序里执行 this.fail(10001) 虽然能输出正确的错误号和错误信息，但人不能直观的看出来错误号对应的错误信息是什么。</li><li><p>这时可以将 key 配置为大写字符串，值为错误号和错误信息。如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  GET_DATA_ERROR: [1234, <span class="string">'get data error'</span>] //key 必须为大写字符或者下划线才有效</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行 <code>this.fail(‘GET_DATA_ERROR’)</code> 时也会自动取到对应的错误号和错误信息。</p></li></ul><blockquote>格式配置</blockquote><ul><li>默认输出的错误号的 key 为 errno，错误信息的 key 为 errmsg。如果不满足需求的话，可以修改配置文件 src/common/config/error.js。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  key: <span class="string">'errno'</span>, //error number</span><br><span class="line">  msg: <span class="string">'errmsg'</span>, //error message</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote>输出不包含错误信息的 JSON</blockquote><ul><li>如果输出的 JSON 数据里不想包含 errno 和 errmsg 的话，可以通过 this.json 方法输出 JSON。如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.controller.base &#123;</span><br><span class="line">  <span class="function"><span class="title">indexAction</span></span>()&#123;</span><br><span class="line">    this.json(&#123;name: <span class="string">'thinkjs'</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h4><blockquote>通过get方法获取GET参数</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.controller.base &#123;</span><br><span class="line">  <span class="function"><span class="title">indexAction</span></span>()&#123;</span><br><span class="line">    <span class="built_in">let</span> name = this.get(<span class="string">'name'</span>); //获取一个参数值</span><br><span class="line">    <span class="built_in">let</span> allParams = this.get(); //获取所有 GET 参数，返回值为对象</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果参数不存在，那么值为空字符串。</li></ul><blockquote>通过post方法获取 POST 参数</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.controller.base &#123;</span><br><span class="line">  <span class="function"><span class="title">indexAction</span></span>()&#123;</span><br><span class="line">    <span class="built_in">let</span> name = this.post(<span class="string">'name'</span>); //获取一个参数值</span><br><span class="line">    <span class="built_in">let</span> allParams = this.post(); //获取所有 POST 参数，返回值为对象</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果参数不存在，那么值为空字符串。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ThinkJS 是一款使用 ES6/7 特性全新开发的 Node.js MVC 框架，使用 ES7 中 &lt;code&gt;async/await&lt;/code&gt;，或者 ES6 中的 &lt;code&gt;*/yield&lt;/code&gt; 特性彻底解决了 Node.js 中&lt;strong&gt;异步嵌套&lt;/strong&gt;的问题。同时吸收了国内外众多框架的设计理念和思想，让&lt;strong&gt;开发 Node.js 项目更加简单、高效&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;使用 ES6/7 特性来开发项目可以大大提高开发效率，是趋势所在。并且新版的 Node.js 对 ES6 特性也有了较好的支持，即使有些特性还没有支持，也可以借助 Babel 编译来支持。&lt;/li&gt;
&lt;li&gt;本次是基于ThinkJS 2.2 版本进行学习。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Node.js" scheme="https://chongtianhong.github.io/tags/Node-js/"/>
    
      <category term="ThinkJS" scheme="https://chongtianhong.github.io/tags/ThinkJS/"/>
    
  </entry>
  
  <entry>
    <title>Promise对象</title>
    <link href="https://chongtianhong.github.io/2018/03/01/promise/"/>
    <id>https://chongtianhong.github.io/2018/03/01/promise/</id>
    <published>2018-03-01T14:38:04.000Z</published>
    <updated>2018-03-04T04:27:12.986Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>Promise对象是异步编程的一种解决方案，它表示一个尚未完成且预计在未来完成的异步操作。它有三种状态，分别是<code>pending</code>-进行中、<code>resolved</code>-已完成、<code>rejected</code>-已失败。</li><li>当Promise的状态由<code>pending</code>转变为<code>resolved</code>或<code>rejected</code>时，会执行相应的方法，并且状态一旦改变，就无法再次改变状态，这也是它名字Promise-承诺的由来。<a id="more"></a></li></ul><h4 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h4><ul><li>JavaScript的执行环境是「单线程」。 <ul><li>单线程，是指JS引擎中负责解释和执行JavaScript代码的线程只有一个，也就是一次只能完成一项任务，这个任务执行完后才能执行下一个，它会「阻塞」其他任务。这个任务可称为<strong>主线程</strong>（同步）。 </li><li>但实际上还有<strong>其他线程</strong>（异步），如事件触发线程、ajax请求线程等。</li></ul></li><li>这也就引发了<strong>同步</strong>和<strong>异步</strong>的问题。</li></ul><h5 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h5><ul><li><p><strong>同步模式</strong>，即上述所说的<strong>单线程模式</strong>，<strong>一次只能执行一个任务</strong>，函数调用后需等到函数执行结束，返回执行的结果，才能进行下一个任务。如果这个任务执行的时间较长，就会导致<strong>「线程阻塞」</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 例1.1 */</span><br><span class="line">var x = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(x); //死循环</span><br><span class="line">console.log(<span class="string">"don't carry out"</span>);    //不会执行</span><br></pre></td></tr></table></figure></li><li><p>上面的例子即同步模式，其中的while是一个<strong>死循环</strong>，它会<strong>阻塞进程</strong>，因此第三句console不会执行。 </p></li><li><strong>同步模式</strong>比较<strong>简单</strong>，也较<strong>容易编写</strong>。但问题也显而易见，<strong>如果请求的时间较长，而阻塞了后面代码的执行</strong>，体验是很不好的。因此对于一些耗时的操作，<strong>异步模式</strong>则是<strong>更好的选择</strong>。</li></ul><h5 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h5><ul><li><strong>异步模式</strong>，即与同步模式相反，<strong>可以一起执行多个任务</strong>，函数调用后不会立即返回执行的结果，如果任务A需要等待，可先执行任务B，等到任务A结果返回后再继续回调。 </li><li><p><strong>最常见的异步模式</strong>就数<strong>定时器</strong>了，例子如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* 例1.2 */</span><br><span class="line">setTimeout(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">'taskA, asynchronous'</span>);</span><br><span class="line">&#125;, 0);</span><br><span class="line">console.log(<span class="string">'taskB, synchronize'</span>);</span><br><span class="line">//<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">-------ouput-------</span><br><span class="line">taskB, synchronize</span><br><span class="line">taskA, asynchronous</span><br></pre></td></tr></table></figure></li><li><p>可以看到，定时器延时的时间为0，但taskA还是晚于taskB执行。这是由于定时器是异步的，<strong>异步任务会在当前脚本的所有同步任务执行完才会执行</strong>。如果同步代码中含有死循环，即将上例的注释去掉，那么这个异步任务就不会执行，因为同步任务阻塞了进程。</p></li></ul><h5 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h5><ul><li>回调函数可以简单理解为：（执行完）回（来）调（用）的函数。</li><li>回调函数是一段可执行的代码段，它以「参数」的形式传递给其他代码，在其合适的时间执行这段（回调函数）的代码。<ul><li>可以理解为是将一个函数func2作为参数传入另一个函数func1中，当func1执行到某一步或者满足某种条件的时候才执行传入的参数func2。</li></ul></li><li><p>回调函数不仅可以用于异步调用，一般同步的场景也可以用回调。<strong>在同步调用下，回调函数一般是最后执行的</strong>。而<strong>异步调用下，可能一段时间后执行或不执行（未达到执行的条件）</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/* 例1.3 */</span><br><span class="line">/******************同步回调******************/</span><br><span class="line">var fun1 = <span class="keyword">function</span>(callback) &#123;</span><br><span class="line">    //<span class="keyword">do</span> something</span><br><span class="line">    console.log(<span class="string">"before callback"</span>);</span><br><span class="line">    (callback &amp;&amp; typeof(callback) === <span class="string">'function'</span>) &amp;&amp; callback();</span><br><span class="line">    console.log(<span class="string">"after callback"</span>);</span><br><span class="line">&#125;</span><br><span class="line">var fun2 = <span class="keyword">function</span>(param) &#123;</span><br><span class="line">    //<span class="keyword">do</span> something</span><br><span class="line">    var start = new Date();</span><br><span class="line">    <span class="keyword">while</span>((new Date() - start) &lt; 3000) &#123; //delay 3s</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(<span class="string">"I'm callback"</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun1(fun2);</span><br><span class="line"></span><br><span class="line">-------output--------</span><br><span class="line">before callback</span><br><span class="line">//after 3s</span><br><span class="line">I’m callback</span><br><span class="line">after callback</span><br></pre></td></tr></table></figure></li><li><p>由于是同步回调，会阻塞后面的代码，如果fun2是个死循环，后面的代码就不执行了。</p></li><li><strong>setTimeout</strong>是常见的<strong>异步回调</strong>，另外常见的异步回调即<strong>ajax请求</strong>:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/* 例1.4 */</span><br><span class="line">/******************异步回调******************/</span><br><span class="line"><span class="keyword">function</span> request(url, param, successFun, errorFun) &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">'GET'</span>,</span><br><span class="line">        url: url,</span><br><span class="line">        param: param,</span><br><span class="line">        async: <span class="literal">true</span>,    //默认为<span class="literal">true</span>,即异步请求；<span class="literal">false</span>为同步请求</span><br><span class="line">        success: successFun,</span><br><span class="line">        error: errorFun</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">request(<span class="string">'test.html'</span>, <span class="string">''</span>, <span class="keyword">function</span>(data) &#123;</span><br><span class="line">    //请求成功后的回调函数，通常是对请求回来的数据进行处理</span><br><span class="line">    console.log(<span class="string">'请求成功啦, 这是返回的数据:'</span>, data);</span><br><span class="line">&#125;,<span class="keyword">function</span>(error) &#123;</span><br><span class="line">    console.log(<span class="string">'sorry, 请求失败了, 这是失败信息:'</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="为什么使用Promise"><a href="#为什么使用Promise" class="headerlink" title="为什么使用Promise"></a>为什么使用Promise</h4><ul><li>一般来说我们会碰到的回调嵌套都不会很多，一般就一到两级，但是某些情况下，回调嵌套很多时，代码就会非常繁琐，会给我们的编程带来很多的麻烦，这种情况俗称——回调地狱。</li><li>由此，<strong>Promise</strong>的概念就由社区提出并实现，<strong>作用</strong>与回调方法几乎一致，都是<strong>在某种情况下执行预先设定好的方法</strong>，但是使用它却能够让代码变得更简洁清晰。</li><li><p>利用Promise改写例1.4的异步回调如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/* 例1.5 */</span><br><span class="line"><span class="keyword">function</span> request(url, param, successFun, errorFun) &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">'GET'</span>,</span><br><span class="line">        url: url,</span><br><span class="line">        param: param,</span><br><span class="line">        async: <span class="literal">true</span>,    //默认为<span class="literal">true</span>,即异步请求；<span class="literal">false</span>为同步请求</span><br><span class="line">        success: successFun,</span><br><span class="line">        error: errorFun</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> sendRequest(url, param) &#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise(<span class="keyword">function</span> (resolve, reject) &#123;</span><br><span class="line">        request(url, param, resolve, reject);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sendRequest(<span class="string">'test.html'</span>, <span class="string">''</span>).<span class="keyword">then</span>(<span class="keyword">function</span>(data) &#123;</span><br><span class="line">    //异步操作成功后的回调</span><br><span class="line">    console.log(<span class="string">'请求成功啦, 这是返回的数据:'</span>, data);</span><br><span class="line">&#125;, <span class="keyword">function</span>(error) &#123;</span><br><span class="line">    //异步操作失败后的回调</span><br><span class="line">    console.log(<span class="string">'sorry, 请求失败了, 这是失败信息:'</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>Promise的真正强大之处在于它的<strong>多重链式调用</strong>，可以<strong>避免层层嵌套回调</strong>。如果我们在第一次ajax请求后，还要用它返回的结果再次请求时：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/* 例1.6 */</span><br><span class="line">request(<span class="string">'test1.html'</span>, <span class="string">''</span>, <span class="keyword">function</span>(data1) &#123;</span><br><span class="line">    console.log(<span class="string">'第一次请求成功, 这是返回的数据:'</span>, data1);</span><br><span class="line">    request(<span class="string">'test2.html'</span>, data1, <span class="keyword">function</span> (data2) &#123;</span><br><span class="line">        console.log(<span class="string">'第二次请求成功, 这是返回的数据:'</span>, data2);</span><br><span class="line">        request(<span class="string">'test3.html'</span>, data2, <span class="keyword">function</span> (data3) &#123;</span><br><span class="line">            console.log(<span class="string">'第三次请求成功, 这是返回的数据:'</span>, data3);</span><br><span class="line">            //request... 继续请求</span><br><span class="line">        &#125;, <span class="keyword">function</span>(error3) &#123;</span><br><span class="line">            console.log(<span class="string">'第三次请求失败, 这是失败信息:'</span>, error3);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, <span class="keyword">function</span>(error2) &#123;</span><br><span class="line">        console.log(<span class="string">'第二次请求失败, 这是失败信息:'</span>, error2);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="keyword">function</span>(error1) &#123;</span><br><span class="line">    console.log(<span class="string">'第一次请求失败, 这是失败信息:'</span>, error1);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>以上出现了多层回调嵌套，有种晕头转向的感觉。这也就是我们常说的厄运回调金字塔（Pyramid of Doom），编程体验十分不好。而使用Promise，我们就可以<strong>利用then进行「链式回调」，将异步操作以同步操作的流程表示出来</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* 例1.7 */</span><br><span class="line">sendRequest(<span class="string">'test.html'</span>, <span class="string">''</span>).<span class="keyword">then</span>(<span class="keyword">function</span>(data1) &#123;</span><br><span class="line">    console.log(<span class="string">'第一次请求成功, 这是返回的数据:'</span>, data1);</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="keyword">function</span>(data2) &#123;</span><br><span class="line">    console.log(<span class="string">'第二次请求成功, 这是返回的数据:'</span>, data2);</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="keyword">function</span>(data3) &#123;</span><br><span class="line">    console.log(<span class="string">'第三次请求成功, 这是返回的数据:'</span>, data3);</span><br><span class="line">&#125;).catch(<span class="keyword">function</span>(error) &#123;</span><br><span class="line">    //用catch捕捉前面的错误</span><br><span class="line">    console.log(<span class="string">'sorry, 请求失败了, 这是失败信息:'</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="Promise的基本用法"><a href="#Promise的基本用法" class="headerlink" title="Promise的基本用法"></a>Promise的基本用法</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><ul><li>Promise对象代表一个未完成、但预计将来会完成的操作。它有以下三种状态：<ul><li><code>pending</code>：初始值，不是fulfilled，也不是rejected</li><li><code>fulfilled</code>：代表操作成功</li><li><code>rejected</code>：代表操作失败</li></ul></li><li>Promise有两种状态改变的方式，既可以从<code>pending</code>转变为<code>fulfilled</code>，也可以从<code>pending</code>转变为<code>rejected</code>。一旦状态改变，就「凝固」了，会一直保持这个状态，不会再发生变化。当状态发生变化，<code>promise.then</code>绑定的函数就会被调用。</li><li>注意：Promise<strong>一旦新建就会「立即执行」，无法取消</strong>。这也是它的<strong>缺点</strong>之一。</li><li><p>声明一个Promise对象有两种方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.1 */</span><br><span class="line">//构建Promise</span><br><span class="line">// 方法1</span><br><span class="line"><span class="built_in">let</span> promise = new Promise ( <span class="keyword">function</span> (resolve, reject) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( success ) &#123;</span><br><span class="line">        resolve(a) // pending ——&gt; resolved 参数将传递给对应的回调方法</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(err) // pending ——&gt; rejectd</span><br><span class="line">    &#125;</span><br><span class="line">&#125; );</span><br><span class="line">// 注意：实例化的Promise对象会立即执行</span><br><span class="line">// 方法2</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">promise</span></span> () &#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise ( <span class="keyword">function</span> (resolve, reject) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( success ) &#123;</span><br><span class="line">            resolve(a)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类似构建对象，我们使用new来构建一个Promise。<strong>Promise接受一个「函数」作为参数</strong>，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>。这两个函数就是就是<strong>「回调函数」，由JavaScript引擎提供</strong>。</p><ul><li>resolve函数的作用：在<strong>异步操作成功时调用</strong>，并<strong>将异步操作的结果，作为参数传递出去</strong>； </li><li>reject函数的作用：在<strong>异步操作失败时调用</strong>，并<strong>将异步操作报出的错误，作为参数传递出去</strong>。</li></ul></li><li><p>Promise实例生成以后，可以用<code>then</code>方法指定<code>resolved</code>状态和<code>rejected</code>状态的回调函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* 接例2.1 */</span><br><span class="line">promise.then(onFulfilled, onRejected);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="keyword">function</span>(data) &#123;</span><br><span class="line">  // <span class="keyword">do</span> something when success</span><br><span class="line">&#125;, <span class="keyword">function</span>(error) &#123;</span><br><span class="line">  // <span class="keyword">do</span> something when failure</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>then</code>方法会返回一个Promise。它有两个参数，分别为Promise从<code>pending</code>变为<code>fulfilled</code>和<code>rejected</code>时的回调函数（第二个参数非必选）。这两个函数都接受Promise对象传出的值作为参数。</p></li><li><p>简单来说，<code>then</code>就是定义<code>resolve</code>和<code>reject</code>函数的，其resolve参数相当于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> resolveFun(data) &#123;</span><br><span class="line">    //data为promise传出的值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>而新建Promise中的’resolve(data)’，则相当于执行resolveFun函数。<br>Promise新建后就会立即执行。而<code>then</code>方法中指定的回调函数，将<strong>在当前脚本所有<em>同步任务</em>执行完才会执行</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.2 */</span><br><span class="line">var promise = new Promise(<span class="keyword">function</span>(resolve, reject) &#123;</span><br><span class="line">  console.log(<span class="string">'before resolved'</span>);</span><br><span class="line">  resolve();</span><br><span class="line">  console.log(<span class="string">'after resolved'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  console.log(<span class="string">'resolved'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(<span class="string">'outer'</span>);</span><br><span class="line"></span><br><span class="line">-------output-------</span><br><span class="line">before resolved</span><br><span class="line">after resolved</span><br><span class="line">outer</span><br><span class="line">resolved</span><br></pre></td></tr></table></figure></li><li><p>由于<code>resolve</code>指定的是异步操作成功后的回调函数，它需要等所有同步代码执行后才会执行，因此最后打印’resolved’，这个和例1.2是一样的道理。</p></li></ul><blockquote>Promise.prototype.then() VS Promise.prototype.catch()</blockquote><ul><li><p><code>then</code>()方法是Promise原型链上的方法，它包含两个参数方法，分别是已成功<code>resolved</code>的回调函数和已失败<code>rejected</code>的回调函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="keyword">function</span>(data) &#123;</span><br><span class="line">    console.log(<span class="string">'this is success callback'</span>);</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;, <span class="keyword">function</span>(error) &#123;</span><br><span class="line">    console.log(<span class="string">'this is fail callback'</span>);</span><br><span class="line">    console.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>.catch()的作用是捕获Promise的错误，与<code>then</code>()的rejected回调作用几乎一致。但是由于Promise的抛错具有冒泡性质，能够不断传递，这样就能够在下一个catch()中统一处理这些错误。同时catch()也能够捕获<code>then</code>()中抛出的错误，所以<strong>建议不要使用<code>then</code>()的rejected回调</strong>，而是<strong>统一使用catch()来处理错误</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="keyword">function</span>(data) &#123;</span><br><span class="line">    console.log(<span class="string">'this is success callback'</span>);</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;).catch(<span class="keyword">function</span>(error) &#123;</span><br><span class="line">    console.log(<span class="string">'this is fail callback'</span>);</span><br><span class="line">    console.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>同样，catch()中也可以抛出错误，由于抛出的错误会在下一个catch中被捕获处理，因此可以再添加catch()。</p></li></ul><h4 id="基本API"><a href="#基本API" class="headerlink" title="基本API"></a>基本API</h4><h5 id="then"><a href="#then" class="headerlink" title=".then()"></a>.then()</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：Promise.prototype.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure><ul><li>对promise添加<code>onFulfilled</code>和<code>onRejected</code>回调，并返回的是一个新的Promise实例（不是原来那个Promise实例），且返回值将作为参数传入这个新Promise的<code>resolve</code>函数。</li><li>因此，我们可以使用链式写法，如上文的例1.7。由于前一个回调函数，返回的还是一个Promise对象（即有异步操作），这时后一个回调函数，就会等待<strong>该Promise对象的状态发生变化，才会被调用</strong>。</li></ul><h5 id="catch"><a href="#catch" class="headerlink" title=".catch()"></a>.catch()</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：Promise.prototype.catch(onRejected)</span><br></pre></td></tr></table></figure><ul><li><p>该方法是<code>.then(undefined, onRejected)</code>的别名，用于指定发生错误时的回调函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.3 */</span><br><span class="line">promise.then(<span class="keyword">function</span>(data) &#123;</span><br><span class="line">    console.log(<span class="string">'success'</span>);</span><br><span class="line">&#125;).catch(<span class="keyword">function</span>(error) &#123;</span><br><span class="line">    console.log(<span class="string">'error'</span>, error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*******等同于*******/</span><br><span class="line">promise.then(<span class="keyword">function</span>(data) &#123;</span><br><span class="line">    console.log(<span class="string">'success'</span>);</span><br><span class="line">&#125;, <span class="keyword">function</span>(error) &#123;</span><br><span class="line">    console.log(<span class="string">'error'</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>reject</code>方法的作用，等同于抛错:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.4 */</span><br><span class="line">var promise = new Promise(<span class="keyword">function</span> (resolve, reject) &#123;</span><br><span class="line">    throw new Error(<span class="string">'test'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">/*******等同于*******/</span><br><span class="line">var promise = new Promise(<span class="keyword">function</span> (resolve, reject) &#123;</span><br><span class="line">    reject(new Error(<span class="string">'test'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//用catch捕获</span><br><span class="line">promise.catch(<span class="keyword">function</span> (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">&#125;);</span><br><span class="line">-------output-------</span><br><span class="line">Error: <span class="built_in">test</span></span><br></pre></td></tr></table></figure></li><li><p>promise对象的错误，会一直向后传递，直到被捕获。即错误总会被下一个<code>catch</code>所捕获。<code>then</code>方法指定的回调函数，若抛出错误，也会被下一个<code>catch</code>捕获。<code>catch</code>中也能抛错，则需要后面的<code>catch</code>来捕获。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.5 */</span><br><span class="line">sendRequest(<span class="string">'test.html'</span>).<span class="keyword">then</span>(<span class="keyword">function</span>(data1) &#123;</span><br><span class="line">    //<span class="keyword">do</span> something</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="keyword">function</span> (data2) &#123;</span><br><span class="line">    //<span class="keyword">do</span> something</span><br><span class="line">&#125;).catch(<span class="keyword">function</span> (error) &#123;</span><br><span class="line">    //处理前面三个Promise产生的错误</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>上文提到过，promise状态一旦改变就会凝固，不会再改变。因此promise一旦<code>fulfilled</code>了，再抛错，也不会变为<code>rejected</code>，就不会被<code>catch</code>了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.6 */</span><br><span class="line">var promise = new Promise(<span class="keyword">function</span>(resolve, reject) &#123;</span><br><span class="line">  resolve();</span><br><span class="line">  throw <span class="string">'error'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.catch(<span class="keyword">function</span>(e) &#123;</span><br><span class="line">   console.log(e);      //This is never called</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>如果没有使用<code>catch</code>方法指定处理错误的回调函数，Promise对象抛出的错误不会传递到外层代码，即不会有任何反应（Chrome会抛错），这是Promise的另一个缺点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.7 */</span><br><span class="line">var promise = new Promise(<span class="keyword">function</span> (resolve, reject) &#123;</span><br><span class="line">    resolve(x);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="keyword">function</span> (data) &#123;</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h5 id="all"><a href="#all" class="headerlink" title=".all()"></a>.all()</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：Promise.all(iterable)</span><br></pre></td></tr></table></figure><ul><li><p>该方法用于将<strong>多个Promise实例，包装成一个新的Promise实例</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var p = Promise.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure></li><li><p><code>Promise.all</code>方法接受一个数组（或具有Iterator接口）作参数，数组中的对象（p1、p2、p3）均为promise实例（如果不是一个promise，该项会被用<code>Promise.resolve</code>转换为一个promise)。它的<strong>状态由这三个promise实例决定</strong>。</p><ul><li>当p1, p2, p3状态都变为<code>fulfilled</code>，p的状态才会变为<code>fulfilled</code>，并将三个promise返回的结果，按<strong>参数的顺序</strong>（而不是<code>resolved</code>的顺序）存入数组，传给p的回调函数，如例2.8。</li><li>当p1, p2, p3其中之一状态变为<code>rejected</code>，p的状态也会变为<code>rejected</code>，并把<strong>第一个被<code>reject</code>的promise的返回值</strong>，传给p的回调函数，如例2.9。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.8 */</span><br><span class="line">var p1 = new Promise(<span class="keyword">function</span> (resolve, reject) &#123;</span><br><span class="line">    setTimeout(resolve, 3000, <span class="string">"first"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">var p2 = new Promise(<span class="keyword">function</span> (resolve, reject) &#123;</span><br><span class="line">    resolve(<span class="string">'second'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">var p3 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  setTimeout(resolve, 1000, <span class="string">"third"</span>);</span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line">Promise.all([p1, p2, p3]).<span class="keyword">then</span>(<span class="keyword">function</span>(values) &#123; </span><br><span class="line">  console.log(values); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">-------output-------</span><br><span class="line">//约 3s 后</span><br><span class="line">[<span class="string">"first"</span>, <span class="string">"second"</span>, <span class="string">"third"</span>]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.9 */</span><br><span class="line">var p1 = new Promise((resolve, reject) =&gt; &#123; </span><br><span class="line">  setTimeout(resolve, 1000, <span class="string">"one"</span>); </span><br><span class="line">&#125;); </span><br><span class="line">var p2 = new Promise((resolve, reject) =&gt; &#123; </span><br><span class="line">  setTimeout(reject, 2000, <span class="string">"two"</span>); </span><br><span class="line">&#125;);</span><br><span class="line">var p3 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  reject(<span class="string">"three"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Promise.all([p1, p2, p3]).<span class="keyword">then</span>(<span class="keyword">function</span> (value) &#123;</span><br><span class="line">    console.log(<span class="string">'resolve'</span>, value);</span><br><span class="line">&#125;, <span class="keyword">function</span> (error) &#123;</span><br><span class="line">    console.log(<span class="string">'reject'</span>, error);    // =&gt; reject three</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">-------output-------</span><br><span class="line">reject three</span><br></pre></td></tr></table></figure></li><li><p>这多个 promise 是<strong>同时开始、并行执行</strong>的，而不是顺序执行。从下面例子可以看出。如果一个个执行，至少需要 1+32+64+128(ms)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.10 */</span><br><span class="line"><span class="keyword">function</span> timerPromisefy(delay) &#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise(<span class="keyword">function</span> (resolve) &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">            resolve(delay);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">var startDate = Date.now();</span><br><span class="line"></span><br><span class="line">Promise.all([</span><br><span class="line">    timerPromisefy(1),</span><br><span class="line">    timerPromisefy(32),</span><br><span class="line">    timerPromisefy(64),</span><br><span class="line">    timerPromisefy(128)</span><br><span class="line">]).<span class="keyword">then</span>(<span class="keyword">function</span> (values) &#123;</span><br><span class="line">    console.log(Date.now() - startDate + <span class="string">'ms'</span>);</span><br><span class="line">    console.log(values);</span><br><span class="line">&#125;);</span><br><span class="line">-------output-------</span><br><span class="line">133ms       //不一定，但大于128ms</span><br><span class="line">[1,32,64,128]</span><br></pre></td></tr></table></figure></li></ul><h5 id="race"><a href="#race" class="headerlink" title=".race()"></a>.race()</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：Promise.race(iterable)</span><br></pre></td></tr></table></figure><ul><li><p>该方法同样是将多个Promise实例，包装成一个新的Promise实例。不同的是，参数中的p1、p2、p3只要有一个改变状态，promise就会立刻变成相同的状态并执行对其的回调。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var p = Promise.race([p1, p2, p3]);</span><br></pre></td></tr></table></figure></li><li><p>Promise.race方法同样接受一个数组（或具有Iterator接口）作参数。<strong>当p1, p2, p3中有一个实例的状态发生改变（变为fulfilled或rejected），p的状态就跟着改变</strong>。并把<strong>第一个改变状态的promise的返回值</strong>，传给p的回调函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.11 */</span><br><span class="line">var p1 = new Promise(<span class="keyword">function</span>(resolve, reject) &#123; </span><br><span class="line">    setTimeout(reject, 500, <span class="string">"one"</span>); </span><br><span class="line">&#125;);</span><br><span class="line">var p2 = new Promise(<span class="keyword">function</span>(resolve, reject) &#123; </span><br><span class="line">    setTimeout(resolve, 100, <span class="string">"two"</span>); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Promise.race([p1, p2]).<span class="keyword">then</span>(<span class="keyword">function</span>(value) &#123;</span><br><span class="line">    console.log(<span class="string">'resolve'</span>, value); </span><br><span class="line">&#125;, <span class="keyword">function</span>(error) &#123;</span><br><span class="line">    //not called</span><br><span class="line">    console.log(<span class="string">'reject'</span>, error); </span><br><span class="line">&#125;);</span><br><span class="line">-------output-------</span><br><span class="line">resolve two</span><br><span class="line"></span><br><span class="line">var p3 = new Promise(<span class="keyword">function</span>(resolve, reject) &#123; </span><br><span class="line">    setTimeout(resolve, 500, <span class="string">"three"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">var p4 = new Promise(<span class="keyword">function</span>(resolve, reject) &#123; </span><br><span class="line">    setTimeout(reject, 100, <span class="string">"four"</span>); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Promise.race([p3, p4]).<span class="keyword">then</span>(<span class="keyword">function</span>(value) &#123;</span><br><span class="line">    //not called</span><br><span class="line">    console.log(<span class="string">'resolve'</span>, value);              </span><br><span class="line">&#125;, <span class="keyword">function</span>(error) &#123;</span><br><span class="line">    console.log(<span class="string">'reject'</span>, error); </span><br><span class="line">&#125;);</span><br><span class="line">-------output-------</span><br><span class="line">reject four</span><br></pre></td></tr></table></figure></li><li><p>在第一个promise对象变为resolve后，并不会取消其他promise对象(相同状态)的执行，如下例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.12 */</span><br><span class="line">var fastPromise = new Promise(<span class="keyword">function</span> (resolve) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'fastPromise'</span>);</span><br><span class="line">        resolve(<span class="string">'resolve fastPromise'</span>);</span><br><span class="line">    &#125;, 100);</span><br><span class="line">&#125;);</span><br><span class="line">var slowPromise = new Promise(<span class="keyword">function</span> (resolve) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'slowPromise'</span>);</span><br><span class="line">        resolve(<span class="string">'resolve slowPromise'</span>);</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;);</span><br><span class="line">// 第一个promise变为resolve后程序停止</span><br><span class="line">Promise.race([fastPromise, slowPromise]).<span class="keyword">then</span>(<span class="keyword">function</span> (value) &#123;</span><br><span class="line">    console.log(value);    // =&gt; resolve fastPromise</span><br><span class="line">&#125;);</span><br><span class="line">-------output-------</span><br><span class="line">fastPromise</span><br><span class="line">resolve fastPromise</span><br><span class="line">slowPromise     //仍会执行</span><br></pre></td></tr></table></figure></li></ul><h5 id="resolve"><a href="#resolve" class="headerlink" title=".resolve()"></a>.resolve()</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">Promise.resolve(value);</span><br><span class="line">Promise.resolve(promise);</span><br><span class="line">Promise.resolve(thenable);</span><br></pre></td></tr></table></figure><ul><li><p>它可以看做<code>new Promise()</code>的快捷方式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Promise.resolve(<span class="string">'Success'</span>);</span><br><span class="line"></span><br><span class="line">/*******等同于*******/</span><br><span class="line">new Promise(<span class="keyword">function</span> (resolve) &#123;</span><br><span class="line">    resolve(<span class="string">'Success'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>这段代码会让这个Promise对象立即进入<code>resolved</code>状态，并将结果<code>success</code>传递给<code>then</code>指定的<code>onFulfilled</code>回调函数。由于<code>Promise.resolve()</code>也是返回Promise对象，因此可以用<code>.then()</code>处理其返回值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.13 */</span><br><span class="line">Promise.resolve(<span class="string">'success'</span>).<span class="keyword">then</span>(<span class="keyword">function</span> (value) &#123;</span><br><span class="line">    console.log(value);</span><br><span class="line">&#125;);</span><br><span class="line">-------output-------</span><br><span class="line">Success</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.14 */</span><br><span class="line">//Resolving an array</span><br><span class="line">Promise.resolve([1,2,3]).<span class="keyword">then</span>(<span class="keyword">function</span>(value) &#123;</span><br><span class="line">  console.log(value[0]);    // =&gt; 1</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//Resolving a Promise</span><br><span class="line">var p1 = Promise.resolve(<span class="string">'this is p1'</span>);</span><br><span class="line">var p2 = Promise.resolve(p1);</span><br><span class="line">p2.then(<span class="keyword">function</span> (value) &#123;</span><br><span class="line">    console.log(value);     // =&gt; this is p1</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>Promise.resolve()</code>的另一个作用就是将<code>thenable</code>对象（即带有then方法的对象）转换为promise对象。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.15 */</span><br><span class="line">var p1 = Promise.resolve(&#123; </span><br><span class="line">    <span class="keyword">then</span>: <span class="keyword">function</span> (resolve, reject) &#123; </span><br><span class="line">        resolve(<span class="string">"this is an thenable object!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(p1 instanceof Promise);     // =&gt; <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">p1.then(<span class="keyword">function</span>(value) &#123;</span><br><span class="line">    console.log(value);     // =&gt; this is an thenable object!</span><br><span class="line">  &#125;, <span class="keyword">function</span>(e) &#123;</span><br><span class="line">    //not called</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>再看下面两个例子，无论是在什么时候抛异常，只要promise状态变成<code>resolved</code>或<code>rejected</code>，状态不会再改变，这和新建promise是一样的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.16 */</span><br><span class="line">//在回调函数前抛异常</span><br><span class="line">var p1 = &#123; </span><br><span class="line">    <span class="keyword">then</span>: <span class="keyword">function</span>(resolve) &#123;</span><br><span class="line">      throw new Error(<span class="string">"error"</span>);</span><br><span class="line">      resolve(<span class="string">"Resolved"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var p2 = Promise.resolve(p1);</span><br><span class="line">p2.then(<span class="keyword">function</span>(value) &#123;</span><br><span class="line">    //not called</span><br><span class="line">&#125;, <span class="keyword">function</span>(error) &#123;</span><br><span class="line">    console.log(error);       // =&gt; Error: error</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//在回调函数后抛异常</span><br><span class="line">var p3 = &#123; </span><br><span class="line">    <span class="keyword">then</span>: <span class="keyword">function</span>(resolve) &#123;</span><br><span class="line">        resolve(<span class="string">"Resolved"</span>);</span><br><span class="line">        throw new Error(<span class="string">"error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var p4 = Promise.resolve(p3);</span><br><span class="line">p4.then(<span class="keyword">function</span>(value) &#123;</span><br><span class="line">    console.log(value);     // =&gt; Resolved</span><br><span class="line">&#125;, <span class="keyword">function</span>(error) &#123;</span><br><span class="line">    //not called</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h5 id="reject"><a href="#reject" class="headerlink" title=".reject()"></a>.reject()</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：Promise.reject(reason)</span><br></pre></td></tr></table></figure><ul><li><p>这个方法和上述的<code>Promise.resolve()</code>类似，它也是<code>new Promise()</code>的快捷方式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Promise.reject(new Error(<span class="string">'error'</span>));</span><br><span class="line"></span><br><span class="line">/*******等同于*******/</span><br><span class="line">new Promise(<span class="keyword">function</span> (resolve, reject) &#123;</span><br><span class="line">    reject(new Error(<span class="string">'error'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>这段代码会让这个Promise对象立即进入<code>rejected</code>状态，并将错误对象传递给<code>then</code>指定的<code>onRejected</code>回调函数。</p></li></ul><h3 id="Promise常见问题"><a href="#Promise常见问题" class="headerlink" title="Promise常见问题"></a>Promise常见问题</h3><ul><li>总结一下创建promise的流程:<ol><li>使用<code>new Promise(fn)</code>或者它的快捷方式<code>Promise.resolve()</code>、<code>Promise.reject()</code>，返回一个promise对象。</li><li>在<code>fn</code>中指定异步的处理：<ul><li>处理结果正常，调用<code>resolve</code></li><li>处理结果错误，调用<code>reject</code></li></ul></li></ol></li></ul><h4 id="情景1：reject-和-catch-的区别"><a href="#情景1：reject-和-catch-的区别" class="headerlink" title="情景1：reject 和 catch 的区别"></a>情景1：reject 和 catch 的区别</h4><ol><li>promise.then(onFulfilled, onRejected)<br>在<code>onFulfilled</code>中发生异常的话，在<code>onRejected</code>中是捕获不到这个异常的。</li><li>promise.then(onFulfilled).catch(onRejected)<br><code>.then</code>中产生的异常能在<code>.catch</code>中捕获。</li></ol><ul><li>一般情况，还是建议使用第二种，因为<strong>能捕获之前的所有异常</strong>。当然了，第二种的<code>.catch()</code>也可以使用<code>.then()</code>表示，它们本质上是没有区别的，<code>.catch === .then(null, onRejected)</code>。</li></ul><h4 id="情景2：如果在then中抛错，而没有对错误进行处理（即catch），那么会一直保持reject状态，直到catch了错误"><a href="#情景2：如果在then中抛错，而没有对错误进行处理（即catch），那么会一直保持reject状态，直到catch了错误" class="headerlink" title="情景2：如果在then中抛错，而没有对错误进行处理（即catch），那么会一直保持reject状态，直到catch了错误"></a>情景2：如果在then中抛错，而没有对错误进行处理（即catch），那么会一直保持reject状态，直到catch了错误</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">* 例3.1 */</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">taskA</span></span>() &#123;</span><br><span class="line">    console.log(x);</span><br><span class="line">    console.log(<span class="string">"Task A"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">taskB</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">"Task B"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> onRejected(error) &#123;</span><br><span class="line">    console.log(<span class="string">"Catch Error: A or B"</span>, error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">finalTask</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">"Final Task"</span>);</span><br><span class="line">&#125;</span><br><span class="line">var promise = Promise.resolve();</span><br><span class="line">promise</span><br><span class="line">    .<span class="keyword">then</span>(taskA)</span><br><span class="line">    .<span class="keyword">then</span>(taskB)</span><br><span class="line">    .catch(onRejected)</span><br><span class="line">    .<span class="keyword">then</span>(finalTask);</span><br><span class="line">    </span><br><span class="line">-------output-------</span><br><span class="line">Catch Error: A or B,ReferenceError: x is not defined</span><br><span class="line">Final Task</span><br></pre></td></tr></table></figure><p><img src="/images/catch.png"></p><ul><li><p>根据例3.1的输出结果及流程图，可以看出，A抛错时，会按照 taskA → onRejected → finalTask这个流程来处理。A抛错后，若没有对它进行处理，如例2.7，状态就会维持rejected，taskB不会执行，直到catch了错误。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/* 例3.2 */</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">taskA</span></span>() &#123;</span><br><span class="line">    console.log(x);</span><br><span class="line">    console.log(<span class="string">"Task A"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">taskB</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">"Task B"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> onRejectedA(error) &#123;</span><br><span class="line">    console.log(<span class="string">"Catch Error: A"</span>, error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> onRejectedB(error) &#123;</span><br><span class="line">    console.log(<span class="string">"Catch Error: B"</span>, error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">finalTask</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">"Final Task"</span>);</span><br><span class="line">&#125;</span><br><span class="line">var promise = Promise.resolve();</span><br><span class="line">promise</span><br><span class="line">    .<span class="keyword">then</span>(taskA)</span><br><span class="line">    .catch(onRejectedA)</span><br><span class="line">    .<span class="keyword">then</span>(taskB)</span><br><span class="line">    .catch(onRejectedB)</span><br><span class="line">    .<span class="keyword">then</span>(finalTask);</span><br><span class="line">    </span><br><span class="line">-------output-------</span><br><span class="line">Catch Error: A ReferenceError: x is not defined</span><br><span class="line">Task B</span><br><span class="line">Final Task</span><br></pre></td></tr></table></figure></li><li><p>将例3.2与3.1对比，在taskA后多了对A的处理，因此，A抛错时，会按照A会按照 taskA → onRejectedA → taskB → finalTask这个流程来处理，此时taskB是正常执行的。</p></li></ul><h4 id="情景3：每次调用then都会返回一个新创建的promise对象，而then内部只是返回的数据"><a href="#情景3：每次调用then都会返回一个新创建的promise对象，而then内部只是返回的数据" class="headerlink" title="情景3：每次调用then都会返回一个新创建的promise对象，而then内部只是返回的数据"></a>情景3：每次调用then都会返回一个新创建的promise对象，而then内部只是返回的数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/* 例3.3 */</span><br><span class="line">//方法1：对同一个promise对象同时调用 <span class="keyword">then</span> 方法</span><br><span class="line">var p1 = new Promise(<span class="keyword">function</span> (resolve) &#123;</span><br><span class="line">    resolve(100);</span><br><span class="line">&#125;);</span><br><span class="line">p1.then(<span class="keyword">function</span> (value) &#123;</span><br><span class="line">    <span class="built_in">return</span> value * 2;</span><br><span class="line">&#125;);</span><br><span class="line">p1.then(<span class="keyword">function</span> (value) &#123;</span><br><span class="line">    <span class="built_in">return</span> value * 2;</span><br><span class="line">&#125;);</span><br><span class="line">p1.then(<span class="keyword">function</span> (value) &#123;</span><br><span class="line">    console.log(<span class="string">"finally: "</span> + value);</span><br><span class="line">&#125;);</span><br><span class="line">-------output-------</span><br><span class="line">finally: 100</span><br><span class="line"></span><br><span class="line">//方法2：对 <span class="keyword">then</span> 进行 promise chain 方式进行调用</span><br><span class="line">var p2 = new Promise(<span class="keyword">function</span> (resolve) &#123;</span><br><span class="line">    resolve(100);</span><br><span class="line">&#125;);</span><br><span class="line">p2.then(<span class="keyword">function</span> (value) &#123;</span><br><span class="line">    <span class="built_in">return</span> value * 2;</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="keyword">function</span> (value) &#123;</span><br><span class="line">    <span class="built_in">return</span> value * 2;</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="keyword">function</span> (value) &#123;</span><br><span class="line">    console.log(<span class="string">"finally: "</span> + value);</span><br><span class="line">&#125;);</span><br><span class="line">-------output-------</span><br><span class="line">finally: 400</span><br></pre></td></tr></table></figure><ul><li>第一种方法中，<code>then</code>的调用几乎是同时开始执行的，且传给每个<code>then</code>的value都是100，这种方法应当避免。方法二才是正确的链式调用。</li><li><p>因此容易出现下面的错误写法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/* 例3.4 */</span><br><span class="line"><span class="keyword">function</span> badAsyncCall(data) &#123;</span><br><span class="line">    var promise = Promise.resolve(data);</span><br><span class="line">    promise.then(<span class="keyword">function</span>(value) &#123;</span><br><span class="line">        //<span class="keyword">do</span> something</span><br><span class="line">        <span class="built_in">return</span> value + 1;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line">badAsyncCall(10).<span class="keyword">then</span>(<span class="keyword">function</span>(value) &#123;</span><br><span class="line">   console.log(value);          //想要得到11，实际输出10</span><br><span class="line">&#125;);</span><br><span class="line">-------output-------</span><br><span class="line">10</span><br></pre></td></tr></table></figure></li><li><p>正确的写法应该是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* 改写例3.4 */</span><br><span class="line"><span class="keyword">function</span> goodAsyncCall(data) &#123;</span><br><span class="line">    var promise = Promise.resolve(data);</span><br><span class="line">    <span class="built_in">return</span> promise.then(<span class="keyword">function</span>(value) &#123;</span><br><span class="line">        //<span class="keyword">do</span> something</span><br><span class="line">        <span class="built_in">return</span> value + 1;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">goodAsyncCall(10).<span class="keyword">then</span>(<span class="keyword">function</span>(value) &#123;</span><br><span class="line">   console.log(value);</span><br><span class="line">&#125;);</span><br><span class="line">-------output-------</span><br><span class="line">11</span><br></pre></td></tr></table></figure></li></ul><h4 id="情景4：在异步回调中抛错，不会被catch到"><a href="#情景4：在异步回调中抛错，不会被catch到" class="headerlink" title="情景4：在异步回调中抛错，不会被catch到"></a>情景4：在异步回调中抛错，不会被catch到</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Errors thrown inside asynchronous <span class="built_in">functions</span> will act like uncaught errors</span><br><span class="line">var promise = new Promise(<span class="keyword">function</span>(resolve, reject) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    throw <span class="string">'Uncaught Exception!'</span>;</span><br><span class="line">  &#125;, 1000);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.catch(<span class="keyword">function</span>(e) &#123;</span><br><span class="line">  console.log(e);       //This is never called</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="情景5：-promise状态变为resove或reject，就凝固了，不会再改变"><a href="#情景5：-promise状态变为resove或reject，就凝固了，不会再改变" class="headerlink" title="情景5： promise状态变为resove或reject，就凝固了，不会再改变"></a>情景5： promise状态变为resove或reject，就凝固了，不会再改变</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">console.log(1);</span><br><span class="line">new Promise(<span class="keyword">function</span> (resolve, reject)&#123;</span><br><span class="line">    reject(); //promise状态变为reject</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span> ()&#123;</span><br><span class="line">        resolve();            //not called</span><br><span class="line">    &#125;, 0);</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="title">function</span></span>()&#123; //跳过这里</span><br><span class="line">    console.log(2);</span><br><span class="line">&#125;, <span class="function"><span class="title">function</span></span>()&#123; //等同步过程执行完后执行这里</span><br><span class="line">    console.log(3);</span><br><span class="line">&#125;);</span><br><span class="line">console.log(4);</span><br><span class="line"></span><br><span class="line">-------output-------</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Promise对象是异步编程的一种解决方案，它表示一个尚未完成且预计在未来完成的异步操作。它有三种状态，分别是&lt;code&gt;pending&lt;/code&gt;-进行中、&lt;code&gt;resolved&lt;/code&gt;-已完成、&lt;code&gt;rejected&lt;/code&gt;-已失败。&lt;/li&gt;
&lt;li&gt;当Promise的状态由&lt;code&gt;pending&lt;/code&gt;转变为&lt;code&gt;resolved&lt;/code&gt;或&lt;code&gt;rejected&lt;/code&gt;时，会执行相应的方法，并且状态一旦改变，就无法再次改变状态，这也是它名字Promise-承诺的由来。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
      <category term="Promise" scheme="https://chongtianhong.github.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>前后端交互指南</title>
    <link href="https://chongtianhong.github.io/2018/02/28/ajax/"/>
    <id>https://chongtianhong.github.io/2018/02/28/ajax/</id>
    <published>2018-02-27T16:45:47.000Z</published>
    <updated>2018-03-03T01:18:19.218Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>前端工程师除了UI重构外，还有一个非常重要的职责就是<strong>在正确的区域渲染出服务端的数据</strong>。要构建一个大的web应用，不只是普普通通的由静态页面构成。</li></ul><h3 id="前后端如何实现交互"><a href="#前后端如何实现交互" class="headerlink" title="前后端如何实现交互"></a>前后端如何实现交互</h3><h4 id="前端请求数据URL由后台来写"><a href="#前端请求数据URL由后台来写" class="headerlink" title="前端请求数据URL由后台来写"></a>前端请求数据URL由后台来写</h4><ul><li>在开发中，URL主要是由<strong>后台</strong>来写好给前端。 </li><li>若后台在<strong>查询数据</strong>，需要<strong>借助查询条件</strong>才能查询到前端需要的数据时，这时后台会要求<strong>前端提供相关的查询参数</strong>（即URL请求的参数）。<a id="more"></a></li></ul><h4 id="接口文档主要由后台设计和修改"><a href="#接口文档主要由后台设计和修改" class="headerlink" title="接口文档主要由后台设计和修改"></a>接口文档主要由后台设计和修改</h4><ul><li><strong>接口文档</strong>主要由<strong>后台设计和修改</strong>，前端开发者起到了辅助的作用。</li><li>后台直接跟数据打交道，最清楚数据库里有什么数据，能返回什么数据。 </li><li>前端只是数据的被动接受者，只是接口文档的使用者。 </li><li>使用过程中，发现返回的数据不对，则需要跟后台商量，由后台修改。 </li><li>切记：前端不能随意更改接口文档，除非取得后台开发人员同意。</li></ul><h4 id="前端与后台交互的数据格式"><a href="#前端与后台交互的数据格式" class="headerlink" title="前端与后台交互的数据格式"></a>前端与后台交互的数据格式</h4><ul><li><strong>前端与后台交互的数据格式</strong>主要是<strong>JSON</strong>，XML现在用的不多。</li><li>JSON 通常用于与服务端交换数据。</li><li>在接收服务器数据时一般是得到字符串，我们可以使用 JSON.parse() 方法将数据转换为 JavaScript 对象。</li></ul><blockquote>JSON.parse()方法用于从一个字符串中解析出json对象。</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JSON.parse(<span class="string">'&#123;"name":"tom"&#125;'</span>);  // &#123;name: <span class="string">"tom"</span>&#125;</span><br><span class="line">JSON.parse(<span class="string">'&#123;"age":10&#125;'</span>);      // &#123;age: 10&#125;</span><br><span class="line">JSON.parse(<span class="string">'&#123;"age":null&#125;'</span>);     // &#123;age: null&#125;</span><br></pre></td></tr></table></figure><blockquote>JSON.stringify()方法用于将一个对象解析成一个JSON字符串</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a = &#123;a:1,b:2&#125;;</span><br><span class="line">JSON.stringify(a);  // <span class="string">"&#123;"</span>a<span class="string">":1,"</span>b<span class="string">":2&#125;"</span></span><br></pre></td></tr></table></figure><h4 id="前端与后台的交互原理"><a href="#前端与后台的交互原理" class="headerlink" title="前端与后台的交互原理"></a>前端与后台的交互原理</h4><ul><li>前后端开发关注点：<strong>接口地址</strong>、<strong>前端请求的参数</strong>、<strong>后端返回的参数</strong>。 </li><li>完成接口开发后，调一下接口，看一下返回的数据是否符合要求。</li></ul><h4 id="前端请求参数的形式"><a href="#前端请求参数的形式" class="headerlink" title="前端请求参数的形式"></a>前端请求参数的形式</h4><ul><li>前端请求参数的形式：<strong>GET</strong>和<strong>POST</strong>两种方式。</li><li>GET：从指定的服务器中<strong>获取</strong>数据（方便，较不安全）。</li><li>POST：<strong>提交</strong>数据给指定的服务器处理（不方便，比较安全）。</li></ul><blockquote>GET 和 POST的对比</blockquote><ul><li>与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。</li><li>然而，在以下情况中，请使用 POST 请求：<ul><li>无法使用缓存文件（更新服务器上的文件或数据库）</li><li>向服务器发送大量数据（POST 没有数据量限制）</li><li>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</li></ul></li></ul><h4 id="前端应该告知后台哪些有效信息，后台才能返回前端想要的数据"><a href="#前端应该告知后台哪些有效信息，后台才能返回前端想要的数据" class="headerlink" title="前端应该告知后台哪些有效信息，后台才能返回前端想要的数据"></a>前端应该告知后台哪些有效信息，后台才能返回前端想要的数据</h4><ul><li>先将要展示的页面内容进行模块划分，将模块的内容提取出来，以及方便前端的一些标志值等，将所有想要的内容和逻辑告知后端。</li><li>后端从数据库里面去查询相应的数据表以获得相应的内容或者图片地址信息。</li><li><strong>URL中的参数</strong>主要是<strong>根据后台需要</strong>，若后台需要一个参数作为查询的辅助条件，前端在URL数据请求时就传递参数。</li><li>请求格式：URL?参数（如果有几个参数则用&amp;连接参数。</li></ul><h4 id="前端如何把页面信息有效传达给后台，以及后台如何获取到这些数据"><a href="#前端如何把页面信息有效传达给后台，以及后台如何获取到这些数据" class="headerlink" title="前端如何把页面信息有效传达给后台，以及后台如何获取到这些数据"></a>前端如何把页面信息有效传达给后台，以及后台如何获取到这些数据</h4><ul><li>所有前端请求的URL后面的参数都是辅助后台数据查询的 ，若不需要参数，那后台就会直接给个URL给前端。</li></ul><h4 id="前端应该如何回拒一些本不属于自己做的一些功能需求或任务"><a href="#前端应该如何回拒一些本不属于自己做的一些功能需求或任务" class="headerlink" title="前端应该如何回拒一些本不属于自己做的一些功能需求或任务"></a>前端应该如何回拒一些本不属于自己做的一些功能需求或任务</h4><ul><li><strong>前端负责把数据展示在页面上</strong>（清晰的认识自己需要做的需求和任务）。</li></ul><h4 id="当前端在调用数据接口时，发现有些数据不是我们想要的，那么前端应该怎么办"><a href="#当前端在调用数据接口时，发现有些数据不是我们想要的，那么前端应该怎么办" class="headerlink" title="当前端在调用数据接口时，发现有些数据不是我们想要的，那么前端应该怎么办"></a>当前端在调用数据接口时，发现有些数据不是我们想要的，那么前端应该怎么办</h4><ul><li>把请求的URL和返回的数据以及在页面的展示的情况给后台看。</li><li>考虑后端开发的难处（后台查询数据、取数据、封装数据方面等蛮难处理的），耐心进行沟通。</li></ul><h4 id="前端有时候需要在请求的时候传入参数"><a href="#前端有时候需要在请求的时候传入参数" class="headerlink" title="前端有时候需要在请求的时候传入参数"></a>前端有时候需要在请求的时候传入参数</h4><ul><li>后台在查询数据库的时候需要<strong>条件查询</strong>。</li></ul><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><ul><li>AJAX = 异步 JavaScript 和 XML。</li><li>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</li><li>XMLHttpRequest 是 AJAX 的基础。<ul><li>所有现代浏览器均支持 XMLHttpRequest 对象。</li><li>XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</li></ul></li><li>通过 AJAX，JavaScript 无需等待服务器的响应，而是：<ul><li>在等待服务器响应时执行其他脚本</li><li>当响应就绪后对响应进行处理</li></ul></li><li>Web的运作原理：一次HTTP请求对应一个页面。<ul><li>如果要让用户留在当前页面中，同时发出新的HTTP请求，就必须用JavaScript发送这个新请求，接收到数据后，再用JavaScript更新页面，这样一来，用户就感觉自己仍然停留在当前页面，但是数据却可以不断地更新。</li></ul></li></ul><blockquote>例子：通过 AJAX 加载一段文本</blockquote><ul><li><p>jQuery 代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"#b01"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        htmlobj=$.ajax(&#123;url:<span class="string">"/jquery/test1.txt"</span>,async:<span class="literal">false</span>&#125;);</span><br><span class="line">        $(<span class="string">"#myDiv"</span>).html(htmlobj.responseText);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>HTML 代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"myDiv"</span>&gt;&lt;h2&gt;Let AJAX change this text&lt;/h2&gt;&lt;/div&gt;</span><br><span class="line">&lt;button id=<span class="string">"b01"</span> <span class="built_in">type</span>=<span class="string">"button"</span>&gt;Change Content&lt;/button&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="AJAX-load-方法"><a href="#AJAX-load-方法" class="headerlink" title="AJAX load() 方法"></a>AJAX load() 方法</h4><ul><li>jQuery load() 方法是简单但强大的 AJAX 方法。</li><li>load() 方法从服务器加载数据，并把返回的数据放入被选元素中。</li><li>语法：<code>$(selector).load(URL,data,callback);</code><ul><li>必需的 URL 参数规定希望加载数据的URL。</li><li>可选的 data 参数规定与请求一同发送的查询字符串键/值对集合。</li><li>可选的 callback 参数是 load() 方法完成后所执行的函数名称。</li></ul></li></ul><blockquote>例子：把文件 “demo_test.txt” 的内容加载到指定的 &lt;div&gt; 元素中</blockquote><ul><li><p>jQuery 代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        $(<span class="string">'#test'</span>).load(<span class="string">'/example/jquery/demo_test.txt'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>HTML 代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3 id=<span class="string">"test"</span>&gt;请点击下面的按钮，通过 jQuery AJAX 改变这段文本。&lt;/h3&gt;</span><br><span class="line">&lt;button id=<span class="string">"btn1"</span> <span class="built_in">type</span>=<span class="string">"button"</span>&gt;获得外部的内容&lt;/button&gt;</span><br></pre></td></tr></table></figure></li></ul><ul><li>也可以把 jQuery 选择器添加到 URL 参数。</li></ul><blockquote>例子：把 “demo_test.txt” 文件中 id=”p1” 的元素的内容，加载到指定的 &lt;div&gt; 元素中</blockquote><ul><li><p>jQuery 代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        $(<span class="string">"#div1"</span>).load(<span class="string">"demo_test.txt #p1"</span>); // demo_test.txt</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>“demo_test.txt” 文件中的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;jQuery and AJAX is FUN!!!&lt;/h2&gt;</span><br><span class="line">&lt;p id=<span class="string">"p1"</span>&gt;This is some text <span class="keyword">in</span> a paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure></li></ul><div class="note danger">可选的 callback 参数规定当 load() 方法完成后所要允许的回调函数。<br>回调函数可以设置不同的参数：<br>- responseTxt : 包含调用成功时的结果内容<br>- statusTXT : 包含调用的状态<br>- xhr : 包含 XMLHttpRequest 对象</div><blockquote>例子：在 load() 方法完成后显示一个提示框。如果 load() 方法已成功，则显示“外部内容加载成功！”，而如果失败，则显示错误消息：</blockquote><ul><li><p>jQuery 代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"#div1"</span>).load(<span class="string">"demo_test.txt"</span>,<span class="keyword">function</span>(responseTxt,statusTxt,xhr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(statusTxt==<span class="string">"success"</span>)</span><br><span class="line">        alert(<span class="string">"外部内容加载成功！"</span>);</span><br><span class="line">        <span class="keyword">if</span>(statusTxt==<span class="string">"error"</span>)</span><br><span class="line">        alert(<span class="string">"Error: "</span>+xhr.status+<span class="string">": "</span>+xhr.statusText);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="AJAX-get-和-post-方法"><a href="#AJAX-get-和-post-方法" class="headerlink" title="AJAX get() 和 post() 方法"></a>AJAX get() 和 post() 方法</h4><ul><li>jQuery get() 和 post() 方法用于通过 HTTP GET 或 POST 请求从服务器请求数据。</li><li>两种在客户端和服务器端进行请求-响应的常用方法是：GET 和 POST。<ul><li>GET - 从指定的资源请求数据</li><li>POST - 向指定的资源提交要处理的数据</li></ul></li><li>GET 基本上用于从服务器获得（取回）数据。注释：GET 方法可能返回缓存数据。</li><li>POST 也可用于从服务器获取数据。不过，POST 方法不会缓存数据，并且常用于连同请求一起发送数据。</li></ul><h5 id="jQuery-get-方法"><a href="#jQuery-get-方法" class="headerlink" title="jQuery $.get() 方法"></a>jQuery $.get() 方法</h5><ul><li>$.get() 方法通过 HTTP GET 请求从服务器上请求数据。</li><li>语法：<code>$.get(url,[data],[callback],[type]);</code><ul><li>必需的 URL 参数规定希望请求的 URL。</li><li>可选的 data 参数是请求时所传递的参数，可以json对象也可以是字符串拼接形式。</li><li>可选的 callback 参数是请求成功后所执行的函数名。</li><li>可选的 type 参数是期待的返回值类型，可以是text/xml/json。</li></ul></li></ul><blockquote>例子：使用 $.get() 方法从服务器上的一个文件中取回数据：</blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">$.get() 的第一个参数是我们希望请求的 URL（<span class="string">"demo_test.asp"</span>）。</span><br><span class="line">第二个参数是回调函数。第一个回调参数存有被请求页面的内容data，第二个回调参数存有请求的状态status。</span><br><span class="line">*/</span><br><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        $.get(<span class="string">"/example/jquery/demo_test.asp"</span>,<span class="keyword">function</span>(data,status)&#123;</span><br><span class="line">            alert(<span class="string">"数据："</span> + data + <span class="string">"\n状态："</span> + status);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="jQuery-post-方法"><a href="#jQuery-post-方法" class="headerlink" title="jQuery $.post() 方法"></a>jQuery $.post() 方法</h5><ul><li>$.post() 方法通过 HTTP POST 请求从服务器上请求数据。</li><li>语法：<code>$.post(url,[data],[callback],[type]);</code><ul><li>必需的 URL 参数规定您希望请求的 URL。</li><li>可选的 data 参数规定连同请求发送的数据。</li><li>可选的 callback 参数是请求成功后所执行的函数名。</li><li>可选的 type 参数是期待的返回值类型，可以是text/xml/json。</li></ul></li></ul><blockquote>例子：使用 $.post() 连同请求一起发送数据：</blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">$.post() 的第一个参数是我们希望请求的 URL (<span class="string">"demo_test_post.asp"</span>)。</span><br><span class="line">然后我们连同请求（name 和 city）一起发送数据。</span><br><span class="line"><span class="string">"demo_test_post.asp"</span> 中的 ASP 脚本读取这些参数，对它们进行处理，然后返回结果。</span><br><span class="line">第三个参数是回调函数。第一个回调参数存有被请求页面的内容，而第二个参数存有请求的状态。</span><br><span class="line">*/</span><br><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $.post(<span class="string">"demo_test_post.asp"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        name:<span class="string">"Donald Duck"</span>,</span><br><span class="line">        city:<span class="string">"Duckburg"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span>(data,status)&#123;</span><br><span class="line">        alert(<span class="string">"Data: "</span> + data + <span class="string">"\nStatus: "</span> + status);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="post-和-get-的完整形式"><a href="#post-和-get-的完整形式" class="headerlink" title="$.post() 和 $.get() 的完整形式"></a>$.post() 和 $.get() 的完整形式</h5><ul><li><p>$.post() 和 $.get() 是简写的 Ajax 函数，等价于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: url,</span><br><span class="line">    <span class="built_in">type</span>: <span class="string">"get"</span>/<span class="string">"post"</span>,</span><br><span class="line">    data: data,</span><br><span class="line">    dataType: callback</span><br><span class="line">    success: success,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>根据响应的不同的 MIME 类型，传递给 success 回调函数的返回数据也有所不同，这些数据可以是 XML root 元素、文本字符串、JavaScript 文件或者 JSON 对象,也可向 success 回调函数传递响应的文本状态，取决于<code>dataType</code>的类型。</p></li></ul><blockquote>实现get方式跨域请求数据：</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">"http://www.xxx.cn/index.php"</span>,</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">"get"</span>,</span><br><span class="line">        dataType: <span class="string">"jsonp"</span>, //指定服务器返回的数据类型</span><br><span class="line">        success: <span class="keyword">function</span> (data) &#123;</span><br><span class="line">            console.log(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote>实现post方式跨域请求：</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">"http://www.xxx.cn/index.php"</span>,</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">"post"</span>,</span><br><span class="line">        dataType: <span class="string">"json"</span>, //指定服务器返回的数据类型</span><br><span class="line">        success: <span class="keyword">function</span> (data) &#123;</span><br><span class="line">            console.log(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote>服务器端：</blockquote><ul><li><code>Access-Control-Allow-Origin:*</code> 表示允许任何域名跨域访问。</li><li>如果需要指定某域名才允许跨域访问，只需把<ul><li><code>Access-Control-Allow-Origin:*</code> 改为 <code>Access-Control-Allow-Origin:允许的域名</code>。</li></ul></li><li>某些header请求头：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 指定允许其他域名访问</span><br><span class="line">header(<span class="string">'Access-Control-Allow-Origin:*'</span>);</span><br><span class="line">// 响应类型</span><br><span class="line">header(<span class="string">'Access-Control-Allow-Methods:POST'</span>);</span><br><span class="line">// 响应头设置</span><br><span class="line">header(<span class="string">'Access-Control-Allow-Headers:x-requested-with,content-type'</span>);</span><br><span class="line"></span><br><span class="line">//设置内容类型为json</span><br><span class="line"></span><br><span class="line">header(<span class="string">'content-type:application:json;charset=utf8'</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;前端工程师除了UI重构外，还有一个非常重要的职责就是&lt;strong&gt;在正确的区域渲染出服务端的数据&lt;/strong&gt;。要构建一个大的web应用，不只是普普通通的由静态页面构成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;前后端如何实现交互&quot;&gt;&lt;a href=&quot;#前后端如何实现交互&quot; class=&quot;headerlink&quot; title=&quot;前后端如何实现交互&quot;&gt;&lt;/a&gt;前后端如何实现交互&lt;/h3&gt;&lt;h4 id=&quot;前端请求数据URL由后台来写&quot;&gt;&lt;a href=&quot;#前端请求数据URL由后台来写&quot; class=&quot;headerlink&quot; title=&quot;前端请求数据URL由后台来写&quot;&gt;&lt;/a&gt;前端请求数据URL由后台来写&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在开发中，URL主要是由&lt;strong&gt;后台&lt;/strong&gt;来写好给前端。 &lt;/li&gt;
&lt;li&gt;若后台在&lt;strong&gt;查询数据&lt;/strong&gt;，需要&lt;strong&gt;借助查询条件&lt;/strong&gt;才能查询到前端需要的数据时，这时后台会要求&lt;strong&gt;前端提供相关的查询参数&lt;/strong&gt;（即URL请求的参数）。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Web" scheme="https://chongtianhong.github.io/tags/Web/"/>
    
      <category term="交互" scheme="https://chongtianhong.github.io/tags/%E4%BA%A4%E4%BA%92/"/>
    
      <category term="AJAX" scheme="https://chongtianhong.github.io/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Pages绑定顶级域名的方法</title>
    <link href="https://chongtianhong.github.io/2018/02/27/domainname/"/>
    <id>https://chongtianhong.github.io/2018/02/27/domainname/</id>
    <published>2018-02-27T02:16:46.000Z</published>
    <updated>2018-02-27T02:56:29.032Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><ul><li>本文将简单写一下我将Hexo + Github Pages绑定顶级域名的方法，本文适用于已经使用<code>Github Pages</code>和<code>Hexo</code>完成个人博客的搭建的读者。</li><li>根据网上的资料和自己的选择，我决定在<a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">阿里云</a>申请域名，使用<a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNSpod</a>解析域名。<a id="more"></a></li></ul><h4 id="注册阿里云域名"><a href="#注册阿里云域名" class="headerlink" title="注册阿里云域名"></a>注册阿里云域名</h4><ul><li>在<a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">阿里云</a>上查找想要申请购买的域名，如果该域名没被注册，则可以申请购买，按照步骤执行，成功购买域名。<ul><li>申请域名时需要创建一个信息模版，按要求创建模版，在申请域名时选择这个模版即可。</li><li>注意：域名持有者信息的<strong>通讯地址</strong>要与身份证的<strong>住址信息</strong>一致，否则实名认证后域名仍无法被解析（serverHold）。</li></ul></li><li>缴费成功后，需要对域名进行<strong>实名认证</strong>，上传自己的身份证等待审核即可。如域名为xxx.com。</li></ul><h4 id="DNSpod下域名相关处理"><a href="#DNSpod下域名相关处理" class="headerlink" title="DNSpod下域名相关处理"></a>DNSpod下域名相关处理</h4><ul><li>在<a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNSpod</a>注册后，点击域名解析，DNSpod界面如下：<br><img src="/images/DNSpod1.png" alt="DNSpod界面1"></li><li><p>添加DNS Service记录</p><ul><li><p>给刚添加的域名设置两个A记录，主机记录都为@，记录值填：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.30.252.153 //第一个@</span><br><span class="line">192.30.252.154 //第二个@</span><br></pre></td></tr></table></figure></li><li><p>再添加一个CNAME记录，主机记录为www，记录值填：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chongtianhong.github.io.</span><br></pre></td></tr></table></figure></li><li><p>如下图所示：</p></li></ul><p><img src="/images/DNSpod2.png" alt="DNSpod界面2"></p></li><li>选择自定义域名服务器，更改成DNSpod提供的域名。<ul><li>DNSpod提供的域名为<code>f1g1ns1.dnspod.net</code>和<code>f1g1ns1.dnspod.net</code>，如下图所示：</li></ul></li></ul><p><img src="/images/DNSpod3.png" alt="DNSpod界面3"></p><ul><li>阿里云域名控制台界面进行域名更改，如下图所示：<br><img src="/images/alinet1.png" alt="阿里云域名控制台界面1"><br><img src="/images/alinet2.png" alt="阿里云域名控制台界面2"></li></ul><h4 id="创建CNAME文件"><a href="#创建CNAME文件" class="headerlink" title="创建CNAME文件"></a>创建CNAME文件</h4><ul><li><p>在自己网站项目repo的根目录添加CNAME，里面的内容为域名不要有http以及www等前缀，只需写入域名本身，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xbhong.top</span><br></pre></td></tr></table></figure><div class="note danger">如果是直接在GitHub网页上添加CNAME文件的话，会遇到一个问题就是在通过<code>hexo g -d</code>之后hexo会把根目录下的CNAME文件删除。</div></li><li><p>解决方案：把CNAME文件添加到<code>/source</code>目录下，这样<code>hexo g -d</code>之后hexo会自动把CNAME复制到<code>/puclic</code>目录下然后将<code>/public</code>路径下的内容进行复制并push到远程<code>master</code>分支的根目录下。</p></li></ul><h4 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h4><ul><li>等域名实名认证和解析生效后，便可在浏览器输入自己的域名www.xxx.com和xxx.com对GitHub Pages博客进行访问了，如下图所示：<br><img src="/images/homepage.png" alt="域名访问页面"></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol><li><a href="https://link.jianshu.com?t=https://www.zhihu.com/question/31377141/" target="_blank" rel="nofollow">github怎么绑定自己的域名？</a></li><li><a href="https://link.jianshu.com?t=http://pytlab.org/2016/01/23/GitHub-Pages%E7%BB%91%E5%AE%9A%E9%A1%B6%E7%BA%A7%E5%9F%9F%E5%90%8D/" target="_blank" rel="nofollow">GitHub Pages绑定顶级域名的方法</a></li><li><a href="https://www.jianshu.com/p/d92ea8542673/" target="_blank" rel="nofollow">github pages 绑定阿里云域名</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;本文将简单写一下我将Hexo + Github Pages绑定顶级域名的方法，本文适用于已经使用&lt;code&gt;Github Pages&lt;/code&gt;和&lt;code&gt;Hexo&lt;/code&gt;完成个人博客的搭建的读者。&lt;/li&gt;
&lt;li&gt;根据网上的资料和自己的选择，我决定在&lt;a href=&quot;https://wanwang.aliyun.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阿里云&lt;/a&gt;申请域名，使用&lt;a href=&quot;https://www.dnspod.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DNSpod&lt;/a&gt;解析域名。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Web" scheme="https://chongtianhong.github.io/tags/Web/"/>
    
      <category term="Hexo" scheme="https://chongtianhong.github.io/tags/Hexo/"/>
    
      <category term="Github" scheme="https://chongtianhong.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="https://chongtianhong.github.io/2018/02/26/hexo/"/>
    <id>https://chongtianhong.github.io/2018/02/26/hexo/</id>
    <published>2018-02-26T00:13:04.000Z</published>
    <updated>2018-03-02T11:10:08.093Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h3><ul><li>Hexo 是一个简单的、轻量的、基于Node.js的一个静态博客框架。</li><li>通过Hexo我们可以快速创建自己的博客，仅需要几条命令就可以完成。 </li><li>Hexo特性： <ul><li>Hexo基于Node.js，支持多进程，几百篇文章也可以秒生成。 </li><li>支持GitHub Flavored Markdown和所有Octopress的插件。 </li><li>Hexo支持EJS、Swig和Stylus。通过插件支持Haml、Jade和Less。<a id="more"></a></li></ul></li></ul><h3 id="Hexo：安装和配置"><a href="#Hexo：安装和配置" class="headerlink" title="Hexo：安装和配置"></a>Hexo：安装和配置</h3><ul><li>在安装Hexo之前需要先安装一些它所依赖的环境配置，本文主要介绍Hexo如何安装、使用，以及配置文件。</li></ul><h4 id="运行环境准备"><a href="#运行环境准备" class="headerlink" title="运行环境准备"></a>运行环境准备</h4><ul><li>本文以Hexo 3.0.0为例，操作系统为Windows 7 x64。</li><li>首先需要安装以下程序：<ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a><br>下载最新版的 Node.js，一路next安装到C盘。</li><li><a href="https://git-scm.com/downloads/" target="_blank" rel="noopener">Git</a><br>根据不同的平台相应选择下载版本，安装建议勾选Git Bash Here，方便以后的操作，然后一路next即可。</li><li><a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener">Notepad++</a>（可选）<br>文本编辑器，用于修改配置文件及写文章。</li></ul></li></ul><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><ol><li>新建一个文件夹，例如blog。</li><li>进入blog文件夹，右键点击<code>Git Bash Here</code>。</li><li><p>安装Hexo。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><ul><li>输入hexo -v，检查hexo是否安装成功。</li></ul></li><li><p>初始化blog文件夹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><ul><li>看到”Start blogging with Hexo！”，则表示初始化完成。</li></ul></li><li><p>安装依赖和插件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>在<code>_config.yml</code>，进行基础配置。</p></li><li><p>新建一篇博客。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post “博客名”</span><br></pre></td></tr></table></figure><ul><li>这时候在文件夹_posts目录下将会看到已经创建的文件。</li></ul></li><li><p>启动服务器进行本地预览。</p><ul><li>clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。</li><li>generate 生成静态文件。</li><li>server 启动本地服务器。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><ul><li>终端结果显示： <code>INFO Hexo is running at <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>. Press Ctrl+C to stop.</code>时就说明已经搭建起本地的hexo博客了。</li><li>在浏览器中打开 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> ， 成功的话即可看到博客页面，至此安装就完成了。</li></ul></li><li><p>安装插件。</p><ul><li>在生成以及部署文章之前，需要安装一个扩展：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ul><li>使用编辑器编好文章，就可以使用命令：<code>hexo d -g</code>，进行生成以及部署文章（下面会具体讲解如何将文章部署到github）。</li></ul></li><li><p>安装主题(以next主题为例)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li><li><p>若要回到命令窗口，则输入命令: <code>Ctrl+C</code> 停止服务器。</p></li></ol><h4 id="将文章部署到Github"><a href="#将文章部署到Github" class="headerlink" title="将文章部署到Github"></a>将文章部署到Github</h4><ol><li>申请Github账号。</li><li>创建Github仓库。<ul><li>new repository：Repository name 必须为<code>Github用户名+Github.io</code>这种格式，它将是我们个人博客的域名，即别人可以输入这个网址来访问我们的博客。</li></ul></li><li><p>配置本地文件。</p><ul><li>在<code>hexo init</code>的文件夹里（即blog）找到<code>_config.yml</code>全局配置文件，通过配置里面的参数，来与我们的Github上的仓库进行关联。 </li><li><p>打开这个文件，找到最下面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line"><span class="built_in">type</span>:</span><br></pre></td></tr></table></figure></li><li><p>修改为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">   <span class="built_in">type</span>: git <span class="comment">#部署类型，使用Github(key-value空格隔开)</span></span><br><span class="line">   repository: git@github.com:chongtianHong/chongtianHong.github.io.git <span class="comment">#部署的仓库的SSH(key-value空格隔开)</span></span><br><span class="line">   branch: master <span class="comment">#部署分支， 一般使用master主分支(key-value空格隔开)</span></span><br><span class="line">   message: update <span class="comment">#默认类型(key-value空格隔开)</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>安装<code>hexo-deployer-git</code>自动部署发布工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>将Hexo与Github page联系起来，设置Git的user name和email（如果是第一次的话）。</p><ul><li><p>在<code>hexo init</code>的文件夹（即blog）里面鼠标右键，点击<code>Git Base Here</code>，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"yourname"</span>  //github用户名</span><br><span class="line">git config --global user.email <span class="string">"your_email@example.com"</span>  //github 注册邮箱</span><br></pre></td></tr></table></figure></li><li><p>输入cd ~/.ssh，检查是否有.ssh的文件夹(若存在则直接跳过第6步)。</p></li></ul></li><li><p>生成新的SSH Key。</p><ul><li><p>输入以下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"450707109@qq.com"</span></span><br></pre></td></tr></table></figure></li><li><p>连续三个回车，SSH key就生成成功了。这时候可打开用户目录（默认存储路径是：<code>C:\Users\Administrator.ssh</code>），里面有一个“.ssh”文件夹，里面有“id_rsa” “id_rsa.pub” 这两个文件。其中“<code>id_rsa</code>”是私钥文件，“<code>id_rsa.pub</code>”是公钥文件。</p></li><li><p>添加密钥到ssh-agent，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span><br></pre></td></tr></table></figure></li><li><p>再输入以下命令，添加生成的SSH key到ssh-agent。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></li></ul></li><li><p>添加SSH Key到Github。</p><ul><li>登录Github，点击头像下的settings，添加ssh。</li><li>新建一个new ssh key，将<code>id_rsa.pub</code>文件里的内容复制上去。</li><li>输入<code>ssh -T git@github.com</code>，测试添加ssh是否成功。如果看到Hi后面是Github用户名，就说明成功了。</li></ul></li><li>发布到Github。<ul><li>输入如下命令，则可以完成hexo项目在Github上的生成及部署。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>hexo配置文件_config.yml 里面的每个冒号后面都要有个空格，否则会报错。</li><li>所有标点符号都是英文的，所以输入时要切换到英文状态。</li><li>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。其中：<ul><li>一份位于站点根目录下，主要包含 Hexo 本身的配置，称为站点配置文件；</li><li>另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项，称为主题配置文件。</li></ul></li><li>在切换主题之后、验证之前，最好使用 hexo clean 来清除 Hexo 的缓存。</li><li>在next/source/css/_custom目录下面专门提供了custom.styl供我们自定义样式，因此也可以在custom.styl里面添加样式代码。</li><li>博客内容按照<code>markdown</code>的语法进行编写。</li><li>所有文件（不管是以md为后缀的，还是以yml结尾的），都必须转换成UTF-8格式，可以在notepad++的格式里转换下，否则在本地查看（localhost:4000）中会出现乱码。</li><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方的安装教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hexo简介&quot;&gt;&lt;a href=&quot;#Hexo简介&quot; class=&quot;headerlink&quot; title=&quot;Hexo简介&quot;&gt;&lt;/a&gt;Hexo简介&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Hexo 是一个简单的、轻量的、基于Node.js的一个静态博客框架。&lt;/li&gt;
&lt;li&gt;通过Hexo我们可以快速创建自己的博客，仅需要几条命令就可以完成。 &lt;/li&gt;
&lt;li&gt;Hexo特性： &lt;ul&gt;
&lt;li&gt;Hexo基于Node.js，支持多进程，几百篇文章也可以秒生成。 &lt;/li&gt;
&lt;li&gt;支持GitHub Flavored Markdown和所有Octopress的插件。 &lt;/li&gt;
&lt;li&gt;Hexo支持EJS、Swig和Stylus。通过插件支持Haml、Jade和Less。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Hexo" scheme="https://chongtianhong.github.io/tags/Hexo/"/>
    
      <category term="Github" scheme="https://chongtianhong.github.io/tags/Github/"/>
    
      <category term="Node.js" scheme="https://chongtianhong.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>jQuery学习笔记（四）</title>
    <link href="https://chongtianhong.github.io/2018/02/25/jquery4/"/>
    <id>https://chongtianhong.github.io/2018/02/25/jquery4/</id>
    <published>2018-02-25T13:52:19.000Z</published>
    <updated>2018-02-27T11:47:49.265Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jQuery动画及jQuery事件"><a href="#jQuery动画及jQuery事件" class="headerlink" title="jQuery动画及jQuery事件"></a>jQuery动画及jQuery事件</h3><h4 id="jQuery动画"><a href="#jQuery动画" class="headerlink" title="jQuery动画"></a>jQuery动画</h4><h5 id="隐藏和显示"><a href="#隐藏和显示" class="headerlink" title="隐藏和显示"></a>隐藏和显示</h5><ul><li><code>show()</code>：显示动画<ul><li>原理：<code>show()</code>从上到下增加元素的高度，从左到右增加元素宽度，从0到1增加透明度，直至内容完全可见。</li><li>语法：<code>$(selector).show(speed,callback);</code></li><li>可选的 speed 参数规定隐藏/显示的速度，可以取以下值：”slow”、”fast” 或毫秒。</li><li>可选的 callback 参数是显示完成后所执行的函数名称。</li></ul></li><li><code>hide()</code>：隐藏动画<ul><li>原理：<code>hide()</code>通过改变元素的高度宽度和不透明度，直到这三个属性值到0。隐藏动画后将display设置为none。</li><li>语法：<code>$(selector).hide(speed,callback);</code></li></ul></li><li>显示和隐藏是一对密不可分的动画形式。<a id="more"></a></li></ul><h5 id="显隐切换"><a href="#显隐切换" class="headerlink" title="显隐切换"></a>显隐切换</h5><ul><li><code>toggle()</code>：切换元素的可见状态：显示被隐藏的元素，并隐藏已显示的元素。<ul><li>原理：匹配元素的宽度、高度以及不透明度，同时进行动画，隐藏动画后将display设置为none。</li><li>语法：<code>$(selector).toggle(speed,callback);</code></li></ul></li></ul><h5 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h5><ul><li><code>slideDown()</code>：滑动显示<ul><li>通过使用滑动效果，显示已隐藏的被选元素。</li><li>语法：<code>$(selector).slideDown(speed,callback);</code></li></ul></li><li><code>slidUp()</code>：滑动隐藏<ul><li>通过使用滑动效果，隐藏被选元素，如果元素已显示出来的话。</li><li>语法：<code>$(selector).slideUp(speed,callback);</code></li></ul></li><li><code>slideToggle()</code>:显隐滑动切换<ul><li>通过使用滑动效果（高度变化）来切换元素的可见状态。</li><li>如果被选元素是可见的，则隐藏这些元素，如果被选元素是隐藏的，则显示这些元素。</li><li>语法：<code>$(selector).slideToggle(speed,callback);</code></li></ul></li></ul><h5 id="渐变：通过改变不透明度"><a href="#渐变：通过改变不透明度" class="headerlink" title="渐变：通过改变不透明度"></a>渐变：通过改变不透明度</h5><ul><li><code>fadeIn()</code>：淡入<ul><li>使用淡入效果来显示被选元素，假如该元素是隐藏的。</li><li>语法：<code>$(selector).fadeIn(speed,callback);</code></li></ul></li><li><code>fadeOut()</code>：淡出<ul><li>使用淡出效果来隐藏被选元素，假如该元素是显示的。</li><li>语法：<code>$(selector).fadeOut(speed,callback);</code></li></ul></li><li><code>fadeTo()</code>：设置淡出透明效果<ul><li>以渐进的方式调整到指定透明度</li><li>语法：<code>$(selector).fadeTo(speed,opacity,callback);</code></li></ul></li><li><code>fadeToggle()</code>：结合fadeIn和fadeOut，实现渐变切换<ul><li>如果元素已淡出，则 <code>fadeToggle()</code> 会向元素添加淡入效果。</li><li>如果元素已淡入，则 <code>fadeToggle()</code> 会向元素添加淡出效果。</li><li>语法：<code>$(selector).fadeToggle(speed,callback);</code></li></ul></li></ul><h5 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h5><ul><li><p><code>animate()</code></p><div class="note danger">注意：<br>在使用animate方法之前，为了影响该元素的top  left bottom  right样式属性，必须先把元素的position样式设置为relative或者absolute。</div><ul><li>该方法执行 CSS 属性集的自定义动画。</li><li>语法：<code>$(selector).animate(styles,speed,easing,callback);</code></li><li>该方法通过CSS样式将元素从一个状态改变为另一个状态。CSS属性值是逐渐改变的，这样就可以创建动画效果。</li><li>只有数字值可创建动画（比如 “margin:30px”）。字符串值无法创建动画（比如 “background-color:red”）。</li><li>注释：使用 “+=” 或 “-=” 来创建相对动画（relative animations）。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".btn1"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"#box"</span>).animate(&#123;height:<span class="string">"300px"</span>&#125;); //改变 <span class="string">"div"</span> 元素的高度</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>stop()</code>：停止元素的动画</p><ul><li>很多时候需要停止匹配正在进行的动画，需要使用<code>stop()</code>。</li><li>jQuery <code>stop()</code> 方法用于在动画或效果完成前对它们进行停止。</li><li>语法：<code>$(selector).stop([stopAll],[goToEnd]);</code></li><li>stopAll，goToEnd都是可选参数，为布尔值；如果直接使用<code>stop()</code>方法，会立即停止当前正在进行的动画。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#stop"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"#panel"</span>).stop(); //停止滑动面板动画</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>判断元素是否处于动画状态</p><ul><li><p>如果不处于动画状态，则为元素添加新的动画，否则不添加。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!$(element).is(<span class="string">":animated"</span>))&#123; //判断元素是否处于动画状态&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个方法在animate动画中经常被用到，需要注意。</p></li></ul></li><li>延迟动画<ul><li>在动画执行过程中，如果想对动画进行延迟操作，则使用<code>delay()</code></li></ul></li><li><p>用animate模拟<code>show()</code>、<code>toggle()</code>、<code>hide()</code>:</p><ul><li>show: 表示由透明到不透明</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).animate(&#123;</span><br><span class="line">        height:<span class="string">'show'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>toggle: 切换</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).animate(&#123;</span><br><span class="line">        height:<span class="string">'toggle'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>hide:表示由显示到隐藏</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).animate(&#123;</span><br><span class="line">        height:<span class="string">'hide'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h5 id="动画方法总结"><a href="#动画方法总结" class="headerlink" title="动画方法总结"></a>动画方法总结</h5><table><thead><tr><th style="text-align:center">方法名</th><th style="text-align:center">说明 </th></tr></thead><tbody><tr><td style="text-align:center">hide()和show()</td><td style="text-align:center">同时修改多个样式属性，即高度、宽度和不透明度</td></tr><tr><td style="text-align:center">fadeIn()和fadeOut()</td><td style="text-align:center">只改变不透明度</td></tr><tr><td style="text-align:center">slideUp()和slideDown()</td><td style="text-align:center">只改变高度</td></tr><tr><td style="text-align:center">fadeTo()</td><td style="text-align:center">只改变不透明度</td></tr><tr><td style="text-align:center">toggle()</td><td style="text-align:center">用来代替show()和hide()方法，所以会同时修改多个属性，即高度、宽度和不透明度</td></tr><tr><td style="text-align:center">slideToggle()</td><td style="text-align:center">用来代替slideUp和slideDown()方法，所以只能改变高度</td></tr><tr><td style="text-align:center">fadeToggle()</td><td style="text-align:center">用来代替fadeIn()和fadeOut方法，只能改变不透明度</td></tr><tr><td style="text-align:center">animate()</td><td style="text-align:center">属于自定义动画，以上各种动画方法都是调用了animate方法。此外，用animate方法还能自定义其他的样式属性，例如：left、marginLeft、scrollTop等</td></tr></tbody></table><h4 id="jQuery事件"><a href="#jQuery事件" class="headerlink" title="jQuery事件"></a>jQuery事件</h4><h5 id="事件对象的属性"><a href="#事件对象的属性" class="headerlink" title="事件对象的属性"></a>事件对象的属性</h5><ul><li><p><code>event.type</code>：描述触发事件的类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).<span class="built_in">bind</span>(<span class="string">'click dblclick mouseover mouseout'</span>,<span class="keyword">function</span>(event)&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).html(<span class="string">"Event: "</span> + event.type); //显示触发了哪种类型的事件</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>event.target</code>：获取到触发事件的 DOM 元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p, button, h1, h2"</span>).click(<span class="keyword">function</span>(event)&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).html(<span class="string">"Triggered by a "</span> + event.target.nodeName + <span class="string">" element."</span>); //显示哪个 DOM 元素触发了事件</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>event.preventDefault</code>：阻止元素发生默认的行为（例如，当点击提交按钮时阻止对表单的提交）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"a"</span>).click(<span class="keyword">function</span>(event)&#123;</span><br><span class="line">    event.preventDefault(); //防止链接打开 URL</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>event.stopPropagation()</code>：阻止事件的冒泡</p></li><li><code>keyCode</code>：只针对于keypress事件，获取键盘键数字(按下回车-&gt;13)</li><li><p><code>event.pageX</code> / <code>event.pageY</code>：获取到光标相对于页面的x坐标和y坐标</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(document).mousemove(<span class="keyword">function</span>(e)&#123;</span><br><span class="line">    $(<span class="string">"span"</span>).text(<span class="string">"X: "</span> + e.pageX + <span class="string">", Y: "</span> + e.pageY); //显示鼠标指针的位置</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>如果没有jQuery，在IE浏览器中用event.x / event.y；在Firefox浏览器中用event.pageX / event.pageY。如果页面上有滚动条还要加上滚动条的宽度和高度</li></ul></li><li><code>event.clientX</code>：光标对于<strong>浏览器窗口</strong>的水平坐标</li><li><code>event.clientY</code>：光标对于<strong>浏览器窗口</strong>的垂直坐标</li><li><code>event.screenX</code>：光标对于<strong>电脑屏幕</strong>的水平坐标</li><li><code>event.screenY</code>：光标对于<strong>电脑屏幕</strong>的水平坐标</li><li><code>event.which</code>：which 属性指示按了键盘/鼠标的哪个键<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"input"</span>).keydown(<span class="keyword">function</span>(event)&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).html(<span class="string">"Key: "</span> + event.which); //显示按了哪个键</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h5 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h5><ul><li>什么是冒泡<ul><li>在页面上可以有多个事件，也可以多个元素影响同一个元素。</li><li>从里到外、嵌套关系、相同事件。</li><li>其中的某一父类没有相同事件时,继续向上查找。</li></ul></li><li>停止事件冒泡<ul><li>停止事件冒泡可以阻止事件中其他对象的事件处理函数被执行。</li><li>在jQuery中提供了<code>stopPropagation()</code>方法。</li></ul></li><li>阻止默认行为<ul><li>网页中元素有自己的默认行为，例如：单击超链接后会跳转、单击提交后表单会提交，有时需要阻止元素的默认行为。</li><li>在jQuery中提供了<code>preventDefault()</code>方法来阻止元素的默认行为。</li></ul></li><li>事件捕获<ul><li>事件捕获和冒泡是相反的过程，事件捕获是从最顶端往下开始触发。</li><li>并非所有的浏览器都支持事件捕获，并且这个缺陷无法通过JavaScript来修复。</li><li>jQuery不支持事件捕获，如需要用事件捕获，要用原生的JavaScript。</li></ul></li></ul><h5 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h5><ul><li><p><code>bind()</code></p><ul><li>为被选元素添加一个或多个事件处理程序，并规定事件发生时运行的函数。</li><li>语法：<code>$(selector).bind(event,data,function)</code></li><li>替代语法：<code>$(selector).bind({event:function, event:function, …});</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).<span class="built_in">bind</span>(<span class="string">'click dblclick mouseover mouseout'</span>,<span class="keyword">function</span>(event)&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).html(<span class="string">"Event: "</span> + event.type); //显示触发了哪种类型的事件</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>one()</code></p><ul><li>为被选元素附加一个或多个事件处理程序，并规定当事件发生时运行的函数。</li><li>当使用 one() 方法时，每个元素只能运行一次事件处理器函数。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).one(<span class="string">"click"</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(this).animate(&#123;fontSize:<span class="string">"+=6px"</span>&#125;); //当点击 p 元素时，增加该元素的文本大小</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h5 id="绑定特定事件类型方法："><a href="#绑定特定事件类型方法：" class="headerlink" title="绑定特定事件类型方法："></a>绑定特定事件类型方法：</h5><table><thead><tr><th style="text-align:center">分类</th><th style="text-align:center">方法名称</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">页面载入</td><td style="text-align:center">ready(fn)</td><td style="text-align:center">当DOM载入就绪可以绑定一个要执行的函数</td></tr><tr><td style="text-align:center">事件绑定</td><td style="text-align:center">bind(type,[data],fn)</td><td style="text-align:center">为每个匹配元素的特定事件绑定一个事件处理函数</td></tr><tr><td style="text-align:center">事件绑定</td><td style="text-align:center">unbind()</td><td style="text-align:center">解除绑定</td></tr><tr><td style="text-align:center">事件绑定</td><td style="text-align:center">on(events,[,selector[,]data],handler)</td><td style="text-align:center">在选择元素上绑定一个或者多个事件处理函数</td></tr><tr><td style="text-align:center">事件绑定</td><td style="text-align:center">off()</td><td style="text-align:center">移除on绑定的事件</td></tr><tr><td style="text-align:center">事件绑定</td><td style="text-align:center">delegate(selector,eventType,handler)</td><td style="text-align:center">为所有选择匹配元素附加一个或多个事件处理函数</td></tr><tr><td style="text-align:center">事件绑定</td><td style="text-align:center">undelegate()</td><td style="text-align:center">移除绑定</td></tr><tr><td style="text-align:center">事件动态</td><td style="text-align:center">live(type,fn)</td><td style="text-align:center">对动态生成的元素进行事件绑定</td></tr><tr><td style="text-align:center">事件动态</td><td style="text-align:center">die(type,fn)</td><td style="text-align:center">移除live()绑定的事件</td></tr><tr><td style="text-align:center">交互事件</td><td style="text-align:center">hover()</td><td style="text-align:center">鼠标移入移出</td></tr><tr><td style="text-align:center">交互事件</td><td style="text-align:center">toggle(fn1,fn2,[fn3],[fn4])</td><td style="text-align:center">每单击后依次调用函数</td></tr><tr><td style="text-align:center">交互事件</td><td style="text-align:center">blur(fn)</td><td style="text-align:center">触发每一个匹配元素的blur事件</td></tr><tr><td style="text-align:center">交互事件</td><td style="text-align:center">change()</td><td style="text-align:center">触发每一个匹配元素的change事件</td></tr><tr><td style="text-align:center">交互事件</td><td style="text-align:center">click()</td><td style="text-align:center">触发每一个匹配元素的click事件</td></tr><tr><td style="text-align:center">交互事件</td><td style="text-align:center">focus()</td><td style="text-align:center">触发每一个匹配元素的focus事件</td></tr><tr><td style="text-align:center">交互事件</td><td style="text-align:center">submit()</td><td style="text-align:center">触发每一个匹配元素的submit事件</td></tr><tr><td style="text-align:center">键盘事件</td><td style="text-align:center">keydown()</td><td style="text-align:center">触发每一个匹配元素的keydown事件</td></tr><tr><td style="text-align:center">键盘事件</td><td style="text-align:center">keypress()</td><td style="text-align:center">触发每一个匹配元素的keypress事件</td></tr><tr><td style="text-align:center">键盘事件</td><td style="text-align:center">keyup()</td><td style="text-align:center">触发每一个匹配元素的keyup事件</td></tr><tr><td style="text-align:center">鼠标事件</td><td style="text-align:center">mousedown(fn)</td><td style="text-align:center">绑定一个处理函数</td></tr><tr><td style="text-align:center">鼠标事件</td><td style="text-align:center">mouseenter(fn)</td><td style="text-align:center">绑定一个处理函数</td></tr><tr><td style="text-align:center">键盘事件</td><td style="text-align:center">mouseleave(fn)</td><td style="text-align:center">绑定一个处理函数</td></tr><tr><td style="text-align:center">键盘事件</td><td style="text-align:center">mouseout(fn)</td><td style="text-align:center">绑定一个处理函数</td></tr><tr><td style="text-align:center">键盘事件</td><td style="text-align:center">mouseover(fn)</td><td style="text-align:center">绑定一个处理函数</td></tr><tr><td style="text-align:center">窗口操作</td><td style="text-align:center">resize(fn)</td><td style="text-align:center">绑定一个处理函数</td></tr><tr><td style="text-align:center">窗口操作</td><td style="text-align:center">scroll(fn)</td><td style="text-align:center">绑定一个处理函数</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;jQuery动画及jQuery事件&quot;&gt;&lt;a href=&quot;#jQuery动画及jQuery事件&quot; class=&quot;headerlink&quot; title=&quot;jQuery动画及jQuery事件&quot;&gt;&lt;/a&gt;jQuery动画及jQuery事件&lt;/h3&gt;&lt;h4 id=&quot;jQuery动画&quot;&gt;&lt;a href=&quot;#jQuery动画&quot; class=&quot;headerlink&quot; title=&quot;jQuery动画&quot;&gt;&lt;/a&gt;jQuery动画&lt;/h4&gt;&lt;h5 id=&quot;隐藏和显示&quot;&gt;&lt;a href=&quot;#隐藏和显示&quot; class=&quot;headerlink&quot; title=&quot;隐藏和显示&quot;&gt;&lt;/a&gt;隐藏和显示&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;show()&lt;/code&gt;：显示动画&lt;ul&gt;
&lt;li&gt;原理：&lt;code&gt;show()&lt;/code&gt;从上到下增加元素的高度，从左到右增加元素宽度，从0到1增加透明度，直至内容完全可见。&lt;/li&gt;
&lt;li&gt;语法：&lt;code&gt;$(selector).show(speed,callback);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可选的 speed 参数规定隐藏/显示的速度，可以取以下值：”slow”、”fast” 或毫秒。&lt;/li&gt;
&lt;li&gt;可选的 callback 参数是显示完成后所执行的函数名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hide()&lt;/code&gt;：隐藏动画&lt;ul&gt;
&lt;li&gt;原理：&lt;code&gt;hide()&lt;/code&gt;通过改变元素的高度宽度和不透明度，直到这三个属性值到0。隐藏动画后将display设置为none。&lt;/li&gt;
&lt;li&gt;语法：&lt;code&gt;$(selector).hide(speed,callback);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;显示和隐藏是一对密不可分的动画形式。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="jQuery" scheme="https://chongtianhong.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery学习笔记（三）</title>
    <link href="https://chongtianhong.github.io/2018/02/24/jquery3/"/>
    <id>https://chongtianhong.github.io/2018/02/24/jquery3/</id>
    <published>2018-02-24T03:55:00.000Z</published>
    <updated>2018-02-27T09:06:57.729Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jQuery中DOM操作"><a href="#jQuery中DOM操作" class="headerlink" title="jQuery中DOM操作"></a>jQuery中DOM操作</h3><ul><li>DOM是一种与浏览器、平台、语言无关的接口，使用该接口可以轻松的访问页面中的所有的标准组件。</li></ul><h4 id="DOM操作的分类："><a href="#DOM操作的分类：" class="headerlink" title="DOM操作的分类："></a>DOM操作的分类：</h4><blockquote>DOM Core</blockquote><ul><li>DOM core并不专属于JavaScript，任何支持DOM的程序都可以使用。</li><li>JavaScript 中的<code>getElementById()</code>、<code>getElementsByTagName()</code>、<code>getAttribute()</code>、<code>setAttribute()</code>等方法都是DOM Core的组成部分。</li></ul><blockquote>HTML-DOM</blockquote><ul><li>HTML -DOM的出现比DOM-Core还要早，它提供一些更简明的标志来描述HTML元素的属性。</li><li>比如：使用HTML-DOM来获取某元素的src属性的方法：<code>element.src</code>。</li></ul><blockquote>CSS-DOM</blockquote><ul><li>针对CSS的操作。在JavaScript中，主要用于获取和设置style对象的各种属性，通过改变style对象的属性，使网页呈现不同的效果。<a id="more"></a></li></ul><h4 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h4><ul><li><p><code>attr()</code>方法设置或返回被选元素的属性值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        alert(<span class="string">"Image width "</span> + $(<span class="string">"img"</span>).attr(<span class="string">"width"</span>)); //返回图像的width属性</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        $(<span class="string">"img"</span>).attr(<span class="string">"width"</span>,<span class="string">"180"</span>); //设置图像的width属性</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h4><ul><li><p><code>html()</code>方法返回或设置被选元素的内容(inner HTML)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//语法：$(selector).html()</span><br><span class="line">//当使用该方法返回一个值时，它会返回第一个匹配元素的内容。</span><br><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">".btn1"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        alert($(<span class="string">"p"</span>).html()); </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//语法：$(selector).html(content)</span><br><span class="line">//当使用该方法设置一个值时，它会覆盖所有匹配元素的内容。</span><br><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">".btn1"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        $(<span class="string">"p"</span>).html(<span class="string">"Hello &lt;b&gt;world!&lt;/b&gt;"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h4><ul><li><p><code>append()</code> 方法在被选元素的结尾（仍然在内部）插入指定内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).append(<span class="string">" &lt;b&gt;Hello world!&lt;/b&gt;"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>appendTo()</code> 方法在被选元素的结尾（仍然在内部）插入指定内容（颠倒<code>append()</code>的操作）。不同之处在于：内容和选择器的位置，以及 <code>append()</code> 能够使用函数来附加内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"&lt;b&gt;Hello World!&lt;/b&gt;"</span>).appendTo(<span class="string">"p"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>prepend()</code> 方法在被选元素的开头（仍位于内部）插入指定内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".btn1"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).prepend(<span class="string">"&lt;b&gt;Hello world!&lt;/b&gt;"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>prependTo()</code> 方法在被选元素的开头（仍位于内部）插入指定内容（颠倒prepend()的操作）。不同之处在于：内容和选择器的位置，以及 <code>prepend()</code> 能够使用函数来附加内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".btn1"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"&lt;b&gt;Hello World!&lt;/b&gt;"</span>).prependTo(<span class="string">"p"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>after()</code> 方法在被选元素后插入指定的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).after(<span class="string">"&lt;p&gt;Hello world!&lt;/p&gt;"</span>); //在每个 p 元素后插入内容</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>insertAfter()</code> 方法在被选元素之后插入 HTML 标记或已有的元素（颠倒<code>after()</code>的操作）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"&lt;span&gt;Hello world!&lt;/span&gt;"</span>).insertAfter(<span class="string">"p"</span>); //在每个 p 元素之后插入 span 元素</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>before()</code> 方法在被选元素前插入指定的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).before(<span class="string">"&lt;p&gt;Hello world!&lt;/p&gt;"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>insertBefore()</code> 方法在被选元素之前插入 HTML 标记或已有的元素（颠倒<code>before()</code>的操作）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"&lt;span&gt;Hello world!&lt;/span&gt;"</span>).insertBefore(<span class="string">"p"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><ul><li>jQuery提供了三种删除节点的方法<code>remove()</code>、<code>detach()</code>、<code>empty()。</code></li><li><p><code>remove()</code>方法</p><ul><li>当某个节点用此方法删除后，该节点所包含的所有文本和子节点将同时被删除，用<code>remove()</code>方法删除后，还是可以继续使用删除后的引用。</li><li>但除了这个元素本身得以保留之外，<code>remove()</code> 不会保留元素的 jQuery 数据。其他的比如绑定的事件、附加的数据等都会被移除。这一点与 detach() 不同。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).remove();//移除所有 &lt;p&gt; 元素</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>detach()</code></p><ul><li>和<code>remove()</code>方法一样，也是从DOM中去掉所有匹配的元素，与<code>remove()</code>不同的是，<code>detach()</code> 会保留所有绑定的事件、附加的数据。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).detach();//移除所有 &lt;p&gt; 元素</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>empty()</code></p><ul><li><code>empty()</code> 方法删除匹配的元素集合中所有的子节点。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".btn1"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).empty(); //移除 p 元素，包括所有文本和子节点。</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="复制节点"><a href="#复制节点" class="headerlink" title="复制节点"></a>复制节点</h4><ul><li><code>clone()</code> 方法生成被选元素的副本，包含子节点、文本和属性。</li><li>在<code>clone()</code>方法中传递一个可选的布尔值，规定是否复制元素的所有事件处理。默认的，副本中不包含事件处理器(false)。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"body"</span>).append($(<span class="string">"p"</span>).<span class="built_in">clone</span>()); //克隆并追加一个 p 元素</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h4><ul><li><p>获取样式和设置样式 <code>attr()</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"img"</span>).attr(<span class="string">"width"</span>,<span class="string">"180"</span>); //设置图像的width属性</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>追加样式 <code>addClass()</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"p:first"</span>).addClass(<span class="string">"intro"</span>); //向第一个 p 元素添加一个类</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>移除样式 <code>removeClass()</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"p:first"</span>).removeClass(<span class="string">"intro"</span>); //从第一个 p 元素删除类</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>切换样式：</p><ul><li><code>toggle()</code>方法只要是控制行为上的重复切换（如果元素是显示的，则隐藏；如果元素原来是隐藏的，则显示）</li><li><code>toggleClass()</code>方法控制样式上的重复切换（如果类名存在，则删除它，如果类名不存在，则添加它）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).toggleClass(<span class="string">"main"</span>);//控制所有 &lt;p&gt; 元素的 <span class="string">"main"</span> 类样式上的重复切换</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>判断是否含有某个样式</p><ul><li><code>hasClass()</code>可以用来判断元素是否含有某个class,如有返回true 该方法等价于is()</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    alert($(<span class="string">"p:first"</span>).hasClass(<span class="string">"intro"</span>));//检查第一个 &lt;p&gt; 元素是否包含 <span class="string">"intro"</span> 类</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="设置和获取HTML、文本和值"><a href="#设置和获取HTML、文本和值" class="headerlink" title="设置和获取HTML、文本和值"></a>设置和获取HTML、文本和值</h4><ul><li><code>html()</code>方法<ul><li>此方法类似JavaScript中innerHTML属性，可以用来读取和设置某个元素中的HTML内容。</li></ul></li><li><p><code>text()</code>方法</p><ul><li>此方法类型JavaScript中innerText属性，用来读取和设置某个元素中的文本内容。</li><li><code>html()</code>和<code>text()</code>的区别主要在于是否包含标签</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".btn1"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).text(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>val()</code>方法</p><ul><li>此方法类似JavaScript中的value属性，用来设置获取元素的值。无论是文本框、下拉列表还是单选框，都可以返回元素的值，如果元素多选，返回一个包含所有选择的值的数组。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">":text"</span>).val(<span class="string">"Hello World"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="遍历节点"><a href="#遍历节点" class="headerlink" title="遍历节点"></a>遍历节点</h4><ul><li><p><code>children()</code>方法</p><ul><li>该方法返回被选元素的所有直接子元素。</li><li>childre()方法只考虑直接子元素而不考虑其他后代元素</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).children(); //返回每个 &lt;div&gt; 元素的所有直接子元素</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>next()</code>方法</p><ul><li>该方法用于取得匹配元素后面紧邻的同胞元素。</li><li>如果提供选择器，则取回匹配该选择器的下一个同胞元素。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).next(<span class="string">".selected"</span>).css(<span class="string">"background"</span>, <span class="string">"yellow"</span>); //查找每个段落的下一个同胞元素，仅选中类名为 <span class="string">"selected"</span> 的段落，对其设置样式</span><br></pre></td></tr></table></figure></li><li><p><code>prev()</code>方法</p><ul><li>用于获得匹配元素集合中每个元素紧邻的前一个同胞元素，通过选择器进行筛选是可选的。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).prev(<span class="string">".selected"</span>); //检索每个段落，找到类名为 <span class="string">"selected"</span> 的前一个同胞元素</span><br></pre></td></tr></table></figure></li><li><p><code>siblings()</code>方法</p><ul><li>用于获得匹配集合中每个元素的同胞，通过选择器进行筛选是可选的。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).siblings(<span class="string">".selected"</span>); //查找每个 p 元素的所有类名为 <span class="string">"selected"</span> 的所有同胞元素</span><br></pre></td></tr></table></figure></li><li><p><code>parent()</code>方法</p><ul><li>获得当前匹配元素集合中每个元素的父级元素，使用选择器进行筛选是可选的。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).parent(<span class="string">".selected"</span>); //查找每个段落的带有 <span class="string">"selected"</span> 类的父元素</span><br></pre></td></tr></table></figure></li><li><p><code>parents()</code>方法</p><ul><li>获得当前匹配元素集合中每个元素的祖先元素，使用选择器进行筛选是可选的。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"b"</span>).parents(); //查找每个 b 元素的所有祖先元素</span><br></pre></td></tr></table></figure></li></ul><h4 id="CSS-DOM操作"><a href="#CSS-DOM操作" class="headerlink" title="CSS DOM操作"></a>CSS DOM操作</h4><ul><li>CSS DOM技术简单的来说就是读取和设置style对象的各种属性。</li><li>用<code>css()方法获取元素的样式属性，可以同时设置多个样式属性。</code></li><li><p>CSS DOM中关于元素定位有几个常用的方法：</p><blockquote><code>offset()</code>方法</blockquote><ul><li>它的作用是获取元素在当前视窗的相对偏移其中返回的对象包含两个属性，即top和left，它只对可见元素有效。</li></ul><blockquote><code>position()</code>方法</blockquote><ul><li>获取相对于最近的一个position()样式属性设置为relative或者absolute的祖父节点的相对偏移，与offset()一样，他返回的对象也包括两个属性，即top和left。</li></ul><blockquote><code>scrollTop()</code>方法和<code>scrollLeft</code>方法</blockquote><ul><li>这两个方法的作用分别是获取元素的滚动条距顶端的距离和距左侧的距离。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;jQuery中DOM操作&quot;&gt;&lt;a href=&quot;#jQuery中DOM操作&quot; class=&quot;headerlink&quot; title=&quot;jQuery中DOM操作&quot;&gt;&lt;/a&gt;jQuery中DOM操作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;DOM是一种与浏览器、平台、语言无关的接口，使用该接口可以轻松的访问页面中的所有的标准组件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;DOM操作的分类：&quot;&gt;&lt;a href=&quot;#DOM操作的分类：&quot; class=&quot;headerlink&quot; title=&quot;DOM操作的分类：&quot;&gt;&lt;/a&gt;DOM操作的分类：&lt;/h4&gt;&lt;blockquote&gt;DOM Core&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;DOM core并不专属于JavaScript，任何支持DOM的程序都可以使用。&lt;/li&gt;
&lt;li&gt;JavaScript 中的&lt;code&gt;getElementById()&lt;/code&gt;、&lt;code&gt;getElementsByTagName()&lt;/code&gt;、&lt;code&gt;getAttribute()&lt;/code&gt;、&lt;code&gt;setAttribute()&lt;/code&gt;等方法都是DOM Core的组成部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;HTML-DOM&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;HTML -DOM的出现比DOM-Core还要早，它提供一些更简明的标志来描述HTML元素的属性。&lt;/li&gt;
&lt;li&gt;比如：使用HTML-DOM来获取某元素的src属性的方法：&lt;code&gt;element.src&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;CSS-DOM&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;针对CSS的操作。在JavaScript中，主要用于获取和设置style对象的各种属性，通过改变style对象的属性，使网页呈现不同的效果。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="jQuery" scheme="https://chongtianhong.github.io/tags/jQuery/"/>
    
  </entry>
  
</feed>

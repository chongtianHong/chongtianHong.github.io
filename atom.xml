<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ice&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/c972cec44268ea709ae89f880845ea12</icon>
  <subtitle>知耻而后勇</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chongtianhong.github.io/"/>
  <updated>2018-03-06T13:44:30.116Z</updated>
  <id>https://chongtianhong.github.io/</id>
  
  <author>
    <name>Xiaobing Hong</name>
    <email>450707109@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ajax学习笔记</title>
    <link href="https://chongtianhong.github.io/2018/03/06/xml/"/>
    <id>https://chongtianhong.github.io/2018/03/06/xml/</id>
    <published>2018-03-06T08:24:50.000Z</published>
    <updated>2018-03-06T13:44:30.116Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>AJAX = 异步 JavaScript 和 XML。</li><li><strong>XMLHttpRequest</strong> 是 AJAX 的<strong>基础</strong>。XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在<strong>不重新加载整个网页</strong>的情况下，对网页的<strong>某部分</strong>进行<strong>更新</strong>。</li><li>XML 指<strong>可扩展标记语言</strong>。XML 被设计用来<strong>传输</strong>和<strong>存储</strong>数据。</li><li>HTML 被设计用来<strong>显示</strong>数据。<a id="more"></a></li></ul><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><h4 id="XML-与-HTML-的主要差异"><a href="#XML-与-HTML-的主要差异" class="headerlink" title="XML 与 HTML 的主要差异"></a>XML 与 HTML 的主要差异</h4><ul><li>XML 不是 HTML 的替代。</li><li>XML 和 HTML 为<strong>不同的目的</strong>而设计：<ul><li>XML 被设计为传输和存储数据，其焦点是数据的内容。</li><li>HTML 被设计用来显示数据，其焦点是数据的外观。</li></ul></li><li>HTML 旨在<strong>显示信息</strong>，而 XML 旨在<strong>传输信息</strong>。</li></ul><h4 id="XML-是不作为的"><a href="#XML-是不作为的" class="headerlink" title="XML 是不作为的"></a>XML 是不作为的</h4><ul><li>XML 被设计用来结构化、存储以及传输信息。</li><li><p>下面是 John 写给 George 的便签，存储为 XML：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">&lt;body&gt;Don<span class="string">'t forget the meeting!&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/note&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>上面的这条便签具有自我描述性。它拥有标题以及留言，同时包含了发送者和接受者的信息。</p></li><li>但是，这个 XML 文档仍然没有做任何事情。它仅仅是包装在 XML 标签中的纯粹的信息。我们<strong>需要编写软件或者程序，才能传送、接收和显示出这个文档</strong>。</li></ul><h4 id="XML-不是对-HTML-的替代"><a href="#XML-不是对-HTML-的替代" class="headerlink" title="XML 不是对 HTML 的替代"></a>XML 不是对 HTML 的替代</h4><ul><li>XML 是对 HTML 的<strong>补充</strong>。</li><li>XML 不会替代 HTML，理解这一点很重要。在大多数 web 应用程序中，XML 用于<strong>传输数据</strong>，而 HTML 用于<strong>格式化并显示数据</strong>。</li><li>对 XML 最好的描述是：<ul><li>XML 是<strong>独立于软件和硬件</strong>的<strong>信息传输工具</strong>。</li></ul></li></ul><h4 id="XML-语法规则"><a href="#XML-语法规则" class="headerlink" title="XML 语法规则"></a>XML 语法规则</h4><blockquote>所有 XML 元素都须有<strong>关闭标签</strong></blockquote><ul><li>在 HTML，经常会看到没有关闭标签的元素.</li><li>而在 XML 中，省略关闭标签是非法的。所有元素都必须有关闭标签：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;This is a paragraph&lt;/p&gt;</span><br><span class="line">&lt;p&gt;This is another paragraph&lt;/p&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote>XML 标签<strong>对大小写敏感</strong></blockquote><ul><li>XML 标签对大小写敏感。在 XML 中，标签 <code>&lt;Letter&gt;</code> 与标签 <code>&lt;letter&gt;</code> 是不同的。</li><li>必须使用相同的大小写来编写打开标签和关闭标签：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Message&gt;这是错误的。&lt;/message&gt;</span><br><span class="line"></span><br><span class="line">&lt;message&gt;这是正确的。&lt;/message&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote>XML 必须正确地嵌套</blockquote><ul><li><p>在 HTML 中，常会看到没有正确嵌套的元素:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;&lt;i&gt;This text is bold and italic&lt;/b&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure></li><li><p>在 XML 中，所有元素都必须彼此正确地嵌套：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;&lt;i&gt;This text is bold and italic&lt;/i&gt;&lt;/b&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote>XML 文档必须有根元素</blockquote><ul><li>XML 文档必须有一个元素是所有其他元素的父元素。该元素称为根元素:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;root&gt;</span><br><span class="line">  &lt;child&gt;</span><br><span class="line">    &lt;subchild&gt;.....&lt;/subchild&gt;</span><br><span class="line">  &lt;/child&gt;</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote>XML 的<strong>属性值须加引号</strong></blockquote><ul><li>与 HTML 类似，XML 也可拥有属性（名称/值的对）。</li><li>在 XML 中，XML 的属性值须加引号:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;note date=<span class="string">"08/08/2008"</span>&gt;</span><br><span class="line">&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote>实体引用</blockquote><ul><li>在 XML 中，一些字符拥有特殊的意义。</li><li><p>如果把字符 “&lt;” 放在 XML 元素中，会发生错误，这是因为解析器会把它当作新元素的开始，这样会产生 XML 错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;message&gt;<span class="keyword">if</span> salary &lt; 1000 <span class="keyword">then</span>&lt;/message&gt;</span><br></pre></td></tr></table></figure></li><li><p>为了避免这个错误，应该用实体引用来代替 “&lt;” 字符。</p></li></ul><blockquote>XML 中的注释</blockquote><ul><li>在 XML 中编写注释的语法与 HTML 的语法很相似。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- This is a comment --&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote>在 XML 中，<strong>空格会被保留</strong></blockquote><ul><li><p>HTML 会把多个连续的空格字符裁减（合并）为一个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTML:Hello           my name is David.</span><br><span class="line">输出:Hello my name is David.</span><br></pre></td></tr></table></figure></li><li><p>在 XML 中，文档中的空格不会被删节。</p></li></ul><h4 id="XML-元素"><a href="#XML-元素" class="headerlink" title="XML 元素"></a>XML 元素</h4><ul><li>XML 文档包含 XML 元素。</li><li>XML 元素指的是从（且包括）开始标签直到（且包括）结束标签的部分。</li></ul><blockquote>XML 元素是可扩展的</blockquote><ul><li>XML 元素是可扩展的，以携带更多的信息。</li><li><p>例如，下面一个XML例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">&lt;body&gt;Don<span class="string">'t forget the meeting!&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/note&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>如果我们创建了一个应用程序，可将 <code>&lt;to&gt;</code>、<code>&lt;from&gt;</code> 以及 <code>&lt;body&gt;</code> 元素提取出来，并产生以下的输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MESSAGE</span><br><span class="line">To: George</span><br><span class="line">From: John</span><br><span class="line"></span><br><span class="line">Don<span class="string">'t forget the meeting!</span></span><br></pre></td></tr></table></figure></li><li><p>之后这个 XML 文档作者又向这个文档添加了一些额外的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;note&gt;</span><br><span class="line">&lt;date&gt;2008-08-08&lt;/date&gt;</span><br><span class="line">&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">&lt;body&gt;Don<span class="string">'t forget the meeting!&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/note&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>这个应用程序不会中断或崩溃，仍然可以找到 XML 文档中的 <code>&lt;to&gt;</code>、<code>&lt;from&gt;</code> 以及 <code>&lt;body&gt;</code> 元素，并产生同样的输出。</p></li><li>XML 的优势之一，就是可以经常在不中断应用程序的情况进行扩展。</li></ul><h3 id="XML-JavaScript"><a href="#XML-JavaScript" class="headerlink" title="XML JavaScript"></a>XML JavaScript</h3><h4 id="XML-HTTP-Request"><a href="#XML-HTTP-Request" class="headerlink" title="XML HTTP Request"></a>XML HTTP Request</h4><ul><li>XMLHttpRequest 对象用于在后台<strong>与服务器交换数据</strong>。通过XMLHttpRequest 对象，能够实现：<ul><li>在<strong>不重新加载页面的情况下</strong>更新网页</li><li>在<strong>页面已加载后</strong>从服务器请求数据</li><li>在<strong>页面已加载后</strong>从服务器接收数据</li><li>在<strong>后台向服务器发送数据</strong></li></ul></li></ul><h5 id="创建XHR对象"><a href="#创建XHR对象" class="headerlink" title="创建XHR对象"></a>创建XHR对象</h5><blockquote>创建 XMLHttpRequest 对象</blockquote><ul><li>所有现代浏览器 (IE7+、Firefox、Chrome、Safari 以及 Opera) 都内建了 XMLHttpRequest 对象。</li><li><p>通过一行简单的 JavaScript 代码，就可以创建 XMLHttpRequest 对象：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp=new XMLHttpRequest();</span><br></pre></td></tr></table></figure></li><li><p>老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp=new ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br></pre></td></tr></table></figure></li><li><p>为了应对所有的现代浏览器，包括 IE5 和 IE6，请检查浏览器是否支持 XMLHttpRequest 对象。如果支持，则创建 XMLHttpRequest 对象。如果不支持，则创建 ActiveXObject ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var xmlhttp;</span><br><span class="line"><span class="keyword">if</span> (window.XMLHttpRequest)</span><br><span class="line">&#123;</span><br><span class="line">    //  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span><br><span class="line">    xmlhttp=new XMLHttpRequest();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    // IE6, IE5 浏览器执行代码</span><br><span class="line">    xmlhttp=new ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="向服务器发送请求"><a href="#向服务器发送请求" class="headerlink" title="向服务器发送请求"></a>向服务器发送请求</h5><ul><li>XMLHttpRequest 对象用于和服务器交换数据。</li></ul><blockquote>向服务器发送请求</blockquote><ul><li>如需将请求发送到服务器，使用 XMLHttpRequest 对象的 open() 和 send() 方法：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"ajax_info.txt"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:left">描述 </th></tr></thead><tbody><tr><td style="text-align:center">open(method,url,async)</td><td style="text-align:left">method:请求的类型(GET 或 POST)<br>URL:文件在服务器上的位置<br>async:是否异步处理请求(true异步或false同步)。</td></tr><tr><td style="text-align:center">send(string)</td><td style="text-align:left">将请求发送到服务器。<br>string：仅用于 POST 请求</td></tr></tbody></table><blockquote>GET 还是 POST？</blockquote><ul><li>与 POST 相比，<strong>GET 更简单也更快</strong>，并且在大部分情况下都能用。</li><li>然而，在以下情况中，请使用 <strong>POST 请求</strong>：<ul><li>无法使用缓存文件（<strong>更新</strong>服务器上的文件或数据库）</li><li>向服务器发送大量数据（<strong>POST 没有数据量限制</strong>）</li><li>发送包含未知字符的用户输入时，<strong>POST</strong> 比 GET <strong>更稳定也更可靠</strong></li></ul></li></ul><blockquote>GET 请求</blockquote><ul><li><p>一个简单的 GET 请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/try/ajax/demo_get.php"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure></li><li><p>在上面的例子中，可能得到的是缓存的结果。</p></li><li><p>为了避免这种情况，请向 URL 添加一个唯一的 ID：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/try/ajax/demo_get.php?t="</span> + Math.random(),<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure></li><li><p>如果希望通过 GET 方法发送信息，请向 URL 添加信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/try/ajax/demo_get2.php?fname=Henry&amp;lname=Ford"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure></li></ul><blockquote>POST 请求</blockquote><ul><li><p>一个简单 POST 请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"POST"</span>,<span class="string">"/try/ajax/demo_post.php"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure></li><li><p>如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定我们希望发送的数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"POST"</span>,<span class="string">"/try/ajax/demo_post2.php"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">xmlhttp.send(<span class="string">"fname=Henry&amp;lname=Ford"</span>);</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:left">描述 </th></tr></thead><tbody><tr><td style="text-align:center">setRequestHeader(header,value)</td><td style="text-align:left">向请求添加 HTTP 头。<br>header: 规定头的名称<br>value: 规定头的值</td></tr></tbody></table><blockquote>url - 服务器上的文件</blockquote><ul><li><p>open() 方法的 url 参数是服务器上文件的地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"ajax_test.html"</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li><li><p>该文件可以是任何类型的文件，比如 .txt 和 .xml，或者<strong>服务器脚本文件</strong>，比如 .asp 和 .php （<strong>在传回响应之前，能够在服务器上执行任务</strong>）。</p></li></ul><blockquote>异步 - True 或 False？</blockquote><ul><li>AJAX 指的是异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。</li><li><p>XMLHttpRequest 对象如果要<strong>用于 AJAX</strong> 的话，其 <strong>open() 方法的 async 参数</strong>必须<strong>设置为 true</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"ajax_test.html"</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li><li><p>对于 web 开发人员来说，发送异步请求是一个巨大的进步。很多在服务器执行的任务都相当费时。AJAX 出现之前，这可能会引起应用程序挂起或停止。</p></li><li>通过 AJAX，JavaScript 无需等待服务器的响应，而是：<ul><li>在等待服务器响应时执行其他脚本</li><li>当响应就绪后对响应进行处理(所有同步任务完成后执行异步响应)</li></ul></li></ul><blockquote>Async=true</blockquote><ul><li><strong>注意</strong>：需在调用open之前指定onreadystatechange事件绑定的函数才能确保跨浏览器兼容性。</li><li>当使用 async=true 时，必须规定在响应处于 onreadystatechange 事件中的就绪状态时执行的函数：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.onreadystatechange=<span class="keyword">function</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</span><br><span class="line">    &#123;</span><br><span class="line">        document.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/try/ajax/ajax_info.txt"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure></li></ul><blockquote>Async = false</blockquote><ul><li>如需使用 async=false，请将 open() 方法中的第三个参数改为 false。</li><li><p>通过把该参数设置为 “false”，可以省去额外的 onreadystatechange 代码。如果在请求失败时是否执行其余的代码无关紧要，那么可以使用这个参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/try/ajax/ajax_info.txt"</span>,<span class="literal">false</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure></li><li><p>不推荐使用 async=false，但是对于一些小型的请求，也是可以的。</p></li><li>请记住，JavaScript 会等到服务器响应就绪才继续执行。如果服务器繁忙或缓慢，应用程序会挂起或停止。</li></ul><h5 id="服务器响应"><a href="#服务器响应" class="headerlink" title="服务器响应"></a>服务器响应</h5><ul><li>如需获得来自服务器的响应，请使用 XMLHttpRequest 对象的 <code>responseText</code> 或 <code>responseXML</code> 属性。</li></ul><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:left">描述 </th></tr></thead><tbody><tr><td style="text-align:center">responseText</td><td style="text-align:left">获得字符串形式的响应数据(文本节点内容)</td></tr><tr><td style="text-align:center">responseText</td><td style="text-align:left">获得 XML 形式的响应数据</td></tr></tbody></table><blockquote>responseText 属性</blockquote><ul><li>如果来自服务器的响应并非 XML，请使用 <code>responseText</code> 属性。</li><li><code>responseText</code> 属性返回字符串形式的响应，因此我们可以这样使用：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</span><br></pre></td></tr></table></figure></li></ul><blockquote>responseXML 属性</blockquote><ul><li>如果来自服务器的响应是 XML，而且需要作为 XML 对象进行解析，请使用 <code>responseXML</code> 属性：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xmlDoc=xmlhttp.responseXML;</span><br><span class="line">txt=<span class="string">""</span>;</span><br><span class="line">x=xmlDoc.getElementsByTagName(<span class="string">"ARTIST"</span>);</span><br><span class="line"><span class="keyword">for</span> (i=0;i&lt;x.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">    txt=txt + x[i].childNodes[0].nodeValue + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">document.getElementById(<span class="string">"myDiv"</span>).innerHTML=txt;</span><br></pre></td></tr></table></figure></li></ul><h5 id="onreadystatechange-事件"><a href="#onreadystatechange-事件" class="headerlink" title="onreadystatechange 事件"></a>onreadystatechange 事件</h5><ul><li>当请求被发送到服务器时，我们需要执行一些基于响应的任务。</li><li>每当 readyState 改变时，就会触发 <code>onreadystatechange</code> 事件。</li><li><code>readyState</code> 属性存有 XMLHttpRequest 的状态信息。</li><li>下面是 XMLHttpRequest 对象的三个重要的属性：</li></ul><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:left">描述 </th></tr></thead><tbody><tr><td style="text-align:center">onreadystatechange</td><td style="text-align:left">存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。</td></tr><tr><td style="text-align:center">readyState</td><td style="text-align:left">存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。<br>0: 请求未初始化，未调用open() <br>1: 服务器连接已建立，已调用open，未调用send <br>2: 请求已接收，即服务器已收到请求头信息。 已调用send，尚未收到响应 <br>3: 请求处理中，已收到部分响应数据 <br>4: 请求已完成，已收到全部响应数据，可在客户端使用 </td></tr><tr><td style="text-align:center">status</td><td style="text-align:left">200: “OK”<br>404: 未找到页面</td></tr></tbody></table><ul><li>在 <code>onreadystatechange</code> 事件中，我们规定当服务器响应已做好被处理的准备时所执行的任务。</li><li><p>当 readyState 等于 4 且状态为 200 时，表示响应已就绪：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.onreadystatechange=<span class="keyword">function</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</span><br><span class="line">    &#123;</span><br><span class="line">        document.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意： <code>onreadystatechange</code> 事件被触发 5 次（0 - 4），对应着 readyState 的每个变化。</p></li></ul><blockquote>使用回调函数</blockquote><ul><li>回调函数是一种以参数形式传递给另一个函数的函数。</li><li>如果网站上存在多个 AJAX 任务，那么我们应该为创建 XMLHttpRequest 对象编写一个标准的函数，并为每个 AJAX 任务调用该函数。</li><li>该函数调用应该包含 URL 以及发生 <code>onreadystatechange</code> 事件时执行的任务（每次调用可能不尽相同）：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var xmlhttp;</span><br><span class="line"><span class="keyword">function</span> loadXMLDoc(url,cfunc)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (window.XMLHttpRequest)</span><br><span class="line">  &#123;// IE7+, Firefox, Chrome, Opera, Safari 代码</span><br><span class="line">  xmlhttp=new XMLHttpRequest();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;// IE6, IE5 代码</span><br><span class="line">  xmlhttp=new ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">xmlhttp.onreadystatechange=cfunc;</span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,url,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> myFunction()</span><br><span class="line">&#123;</span><br><span class="line">loadXMLDoc(<span class="string">"/try/ajax/ajax_info.txt"</span>,<span class="keyword">function</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</span><br><span class="line">&#123;</span><br><span class="line">document.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="XML-DOM"><a href="#XML-DOM" class="headerlink" title="XML DOM"></a>XML DOM</h4><ul><li>DOM （Document Object Model，文档对象模型）定义了<strong>访问</strong>和<strong>操作文档</strong>的标准方法。</li></ul><blockquote>XML DOM</blockquote><ul><li>XML DOM (XML Document Object Model) 定义了访问和操作 XML 文档的标准方法。</li><li>DOM 把 XML 文档作为树结构来查看。能够通过 DOM 树来访问所有元素。可以修改或删除它们的内容，并创建新的元素。元素，它们的文本，以及它们的属性，都被认为是节点。</li><li><p>使用 DOM 引用从 <to> 元素中获取文本：</to></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlDoc.getElementsByTagName(<span class="string">"to"</span>)[0].childNodes[0].nodeValue</span><br></pre></td></tr></table></figure><ul><li><strong>xmlDoc</strong> -由解析器创建的 XML 文档</li><li><strong>getElementsByTagName(“to”)[0]</strong> - 第一个 <code>&lt;to&gt;</code> 元素</li><li><strong>childNodes[0]</strong> - <code>&lt;to&gt;</code> 元素的第一个子元素（文本节点）</li><li><strong>nodeValue</strong> - 节点的值（文本本身）</li></ul></li></ul><blockquote>解析 XML 文件 - 跨浏览器实例</blockquote><ul><li><p>下列代码把一个 XML 文档 (“note.xml”) 载入 XML 解析器中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;W3School.com.cn Internal Note&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;&lt;b&gt;To:&lt;/b&gt; &lt;span id=<span class="string">"to"</span>&gt;&lt;/span&gt;&lt;br /&gt;</span><br><span class="line">&lt;b&gt;From:&lt;/b&gt; &lt;span id=<span class="string">"from"</span>&gt;&lt;/span&gt;&lt;br /&gt;</span><br><span class="line">&lt;b&gt;Message:&lt;/b&gt; &lt;span id=<span class="string">"message"</span>&gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">if</span> (window.XMLHttpRequest)&#123;</span><br><span class="line">    // code <span class="keyword">for</span> IE7+, Firefox, Chrome, Opera, Safari</span><br><span class="line">    xmlhttp=new XMLHttpRequest();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    // code <span class="keyword">for</span> IE6, IE5</span><br><span class="line">    xmlhttp=new ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"note.xml"</span>,<span class="literal">false</span>);</span><br><span class="line">xmlhttp.send();</span><br><span class="line">xmlDoc=xmlhttp.responseXML; //获得 XML 形式的响应数据。</span><br><span class="line"></span><br><span class="line">document.getElementById(<span class="string">"to"</span>).innerHTML=</span><br><span class="line">xmlDoc.getElementsByTagName(<span class="string">"to"</span>)[0].childNodes[0].nodeValue;</span><br><span class="line"></span><br><span class="line">document.getElementById(<span class="string">"from"</span>).innerHTML=</span><br><span class="line">xmlDoc.getElementsByTagName(<span class="string">"from"</span>)[0].childNodes[0].nodeValue;</span><br><span class="line"></span><br><span class="line">document.getElementById(<span class="string">"message"</span>).innerHTML=</span><br><span class="line">xmlDoc.getElementsByTagName(<span class="string">"body"</span>)[0].childNodes[0].nodeValue;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">W3School.com.cn Internal Note</span><br><span class="line"></span><br><span class="line">To: George</span><br><span class="line">From: John</span><br><span class="line">Message: Don<span class="string">'t forget the meeting!</span></span><br></pre></td></tr></table></figure></li></ul><blockquote>解析 XML 字符串 - 跨浏览器实例</blockquote><ul><li><p>下面的代码加载并解析一个 XML 字符串：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;W3School.com.cn Internal Note&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;&lt;b&gt;To:&lt;/b&gt; &lt;span id=<span class="string">"to"</span>&gt;&lt;/span&gt;&lt;br /&gt;</span><br><span class="line">&lt;b&gt;From:&lt;/b&gt; &lt;span id=<span class="string">"from"</span>&gt;&lt;/span&gt;&lt;br /&gt;</span><br><span class="line">&lt;b&gt;Message:&lt;/b&gt; &lt;span id=<span class="string">"message"</span>&gt;&lt;/span&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var txt = <span class="string">"&lt;note&gt;&lt;to&gt;George&lt;/to&gt;&lt;from&gt;John&lt;/from&gt;&lt;heading&gt;Reminder&lt;/heading&gt;&lt;body&gt;Don't forget the meeting!&lt;/body&gt;&lt;/note&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (window.DOMParser)&#123;</span><br><span class="line">    parser=new DOMParser();</span><br><span class="line">    xmlDoc=parser.parseFromString(txt,<span class="string">"text/xml"</span>); //解析XML字符串</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    // Internet Explorer</span><br><span class="line">    xmlDoc=new ActiveXObject(<span class="string">"Microsoft.XMLDOM"</span>);</span><br><span class="line">    xmlDoc.async=<span class="string">"false"</span>;</span><br><span class="line">    xmlDoc.loadXML(txt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">document.getElementById(<span class="string">"to"</span>).innerHTML=</span><br><span class="line">xmlDoc.getElementsByTagName(<span class="string">"to"</span>)[0].childNodes[0].nodeValue;</span><br><span class="line"></span><br><span class="line">document.getElementById(<span class="string">"from"</span>).innerHTML=</span><br><span class="line">xmlDoc.getElementsByTagName(<span class="string">"from"</span>)[0].childNodes[0].nodeValue;</span><br><span class="line"></span><br><span class="line">document.getElementById(<span class="string">"message"</span>).innerHTML=</span><br><span class="line">xmlDoc.getElementsByTagName(<span class="string">"body"</span>)[0].childNodes[0].nodeValue;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">W3School.com.cn Internal Note</span><br><span class="line"></span><br><span class="line">To: George</span><br><span class="line">From: John</span><br><span class="line">Message: Don<span class="string">'t forget the meeting!</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="AJAX-XML-实例"><a href="#AJAX-XML-实例" class="headerlink" title="AJAX XML 实例"></a>AJAX XML 实例</h4><ul><li>AJAX 可用来与 XML 文件进行<strong>交互式通信</strong>。</li><li><p>实例解析 - loadXMLDoc() 函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">loadXMLDoc</span></span>() &#123;</span><br><span class="line">    var xhttp = new XMLHttpRequest();</span><br><span class="line">    xhttp.onreadystatechange = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (this.readyState == 4 &amp;&amp; this.status == 200) &#123;</span><br><span class="line">            myFunction(this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhttp.open(<span class="string">"GET"</span>, <span class="string">"cd_catalog.xml"</span>, <span class="literal">true</span>);</span><br><span class="line">    xhttp.send();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> myFunction(xml) &#123;</span><br><span class="line">    var i;</span><br><span class="line">    var xmlDoc = xml.responseXML;</span><br><span class="line">    var table=<span class="string">"&lt;tr&gt;&lt;th&gt;Artist&lt;/th&gt;&lt;th&gt;Title&lt;/th&gt;&lt;/tr&gt;"</span>;</span><br><span class="line">    var x = xmlDoc.getElementsByTagName(<span class="string">"CD"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = 0; i &lt;x.length; i++) &#123;</span><br><span class="line">        table += <span class="string">"&lt;tr&gt;&lt;td&gt;"</span> +</span><br><span class="line">        x[i].getElementsByTagName(<span class="string">"ARTIST"</span>)[0].childNodes[0].nodeValue +</span><br><span class="line">        <span class="string">"&lt;/td&gt;&lt;td&gt;"</span> +</span><br><span class="line">        x[i].getElementsByTagName(<span class="string">"TITLE"</span>)[0].childNodes[0].nodeValue +</span><br><span class="line">        <span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    document.getElementById(<span class="string">"demo"</span>).innerHTML = table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>loadXMLDoc() 函数创建 XMLHttpRequest 对象，添加当服务器响应就绪时执行的函数，并将请求发送到服务器。</p></li></ul><h4 id="XML-CDATA"><a href="#XML-CDATA" class="headerlink" title="XML CDATA"></a>XML CDATA</h4><ul><li>术语 CDATA 指的是不应由 XML 解析器进行解析的文本数据（Unparsed Character Data）。</li><li><p>所有 XML 文档中的文本均会被解析器解析。XML 解析器通常会解析 XML 文档中所有的文本。当某个 XML 元素被解析时，其标签之间的文本也会被解析：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;message&gt;此文本也会被解析&lt;/message&gt;</span><br></pre></td></tr></table></figure></li><li><p>非法的 XML 字符必须被替换为实体引用：假如我们在 XML 文档中放置了一个类似 “&lt;” 字符，那么这个文档会产生一个错误，这是因为解析器会把它解释为新元素的开始。</p><ul><li>在 XML 元素中，”&lt;” 和 “&amp;” 是非法的。</li><li>“&lt;” 会产生错误，因为解析器会把该字符解释为新元素的开始。</li><li>“&amp;” 也会产生错误，因为解析器会把该字符解释为字符实体的开始。</li></ul></li><li>某些文本，比如 JavaScript 代码，包含大量 “&lt;” 或 “&amp;” 字符。为了避免错误，可以将脚本代码定义为 CDATA。<br>CDATA 部分中的所有内容都会被解析器忽略。</li><li>只有 CDATA 区段（CDATA section）中的文本会被解析器忽略。</li><li>CDATA 部分由 “<code>&lt;![CDATA[</code>“ 开始，由 “<code>]]&gt;</code>“ 结束。</li></ul><h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li>AJAX = 异步 JavaScript 和 XML。</li><li>AJAX 是一种用于创建快速动态网页的技术。</li><li>通过在后台与服务器进行少量数据交换，AJAX 可以<strong>使网页实现异步更新</strong>。这意味着可以<strong>在不重新加载整个网页的情况下</strong>，可以<strong>与服务器交换数据</strong>并<strong>对网页的某部分进行更新</strong>（最大优点）。</li><li>传统的网页（不使用 AJAX）如果需要更新内容，必须重载整个网页面。</li><li>AJAX 不需要任何浏览器插件，但需要用户允许JavaScript在浏览器上执行。</li><li><strong>XMLHttpRequest</strong> 是 AJAX 的<strong>基础</strong>。<ul><li>XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</li></ul></li><li>向服务器发送请求<ul><li>使用 XMLHttpRequest 对象的 open() 和 send() 方法。</li></ul></li></ul><h4 id="Ajax三步骤"><a href="#Ajax三步骤" class="headerlink" title="Ajax三步骤"></a>Ajax三步骤</h4><ol><li>运用HTML和CSS实现页面，表达信息；</li><li>运用XMLHttpRequest和web服务器进行数据的<strong>异步交换</strong>；</li><li>运用JavaScript操作DOM，实现动态局部刷新。</li></ol><h4 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h4><ul><li>同步：用户填写所有信息后，提交给服务器，等待服务器的回应（检验数据），是一次性的。信息错误又要重新填写！</li><li>异步：当用户填写完一条信息后，该信息会自动向服务器提交，然后服务器响应客户端，在此过程中，用户依然在填写表格的信息，即向服务器请求多次，节省了用户的时间，提高了用户的体验。</li><li>XMLhttpRequest对象来实现这一功能，也需要javascript来操作DOM实现局部的信息更新。不需要重新加载整个页面。</li></ul><h4 id="http请求"><a href="#http请求" class="headerlink" title="http请求"></a>http请求</h4><ul><li>HTTP是计算机通过网络进行通信的规则，使浏览器请求信息和服务</li><li>HTTP是一种无状态的协议(不建立持久的连接，服务端不保留连接的相关信息,浏览器发出请求和服务器返回响应是一个没有记忆的过程)</li><li>一个完整的【HTTP请求】过程有7个步骤：<ol><li>建立TCP连接;</li><li>Web浏览器向Web服务器发送请求命令;</li><li>Web浏览器发送请求头信息;</li><li>Web服务器应答;</li><li>Web服务器发送应答头信息;</li><li>Web服务器向浏览器发送数据;</li><li>Web服务器关闭TCP连接。</li></ol></li></ul><h4 id="建立异步请求的过程4个步骤"><a href="#建立异步请求的过程4个步骤" class="headerlink" title="建立异步请求的过程4个步骤"></a>建立异步请求的过程4个步骤</h4><ol><li>new一个XHR对象;</li><li>调用open方法;</li><li>send一些数据;</li><li>对过程进行监听，来知道服务器是不是正确地做出了响应，接着可以做一些事情:<ul><li>监听readyState,响应成功可以做一些事情，比如获取服务器响应的内容在页面上做一些呈现。</li></ul></li></ol><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ul><li>responseText：获得字符串形式的响应数据。</li><li>responseXML：获得XML形式的响应数据。</li><li>status和statusText：以数字和文本形式返回HTTP代码。</li><li>getAllResponseHeader()：获取所有响应表头。</li><li>getResponseHeader()：获取响应中的某个字段的值。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;AJAX = 异步 JavaScript 和 XML。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;XMLHttpRequest&lt;/strong&gt; 是 AJAX 的&lt;strong&gt;基础&lt;/strong&gt;。XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在&lt;strong&gt;不重新加载整个网页&lt;/strong&gt;的情况下，对网页的&lt;strong&gt;某部分&lt;/strong&gt;进行&lt;strong&gt;更新&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;XML 指&lt;strong&gt;可扩展标记语言&lt;/strong&gt;。XML 被设计用来&lt;strong&gt;传输&lt;/strong&gt;和&lt;strong&gt;存储&lt;/strong&gt;数据。&lt;/li&gt;
&lt;li&gt;HTML 被设计用来&lt;strong&gt;显示&lt;/strong&gt;数据。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Web" scheme="https://chongtianhong.github.io/tags/Web/"/>
    
      <category term="交互" scheme="https://chongtianhong.github.io/tags/%E4%BA%A4%E4%BA%92/"/>
    
      <category term="AJAX" scheme="https://chongtianhong.github.io/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>Cookie、Session和WebStorage的区别总结</title>
    <link href="https://chongtianhong.github.io/2018/03/03/session/"/>
    <id>https://chongtianhong.github.io/2018/03/03/session/</id>
    <published>2018-03-03T02:36:21.000Z</published>
    <updated>2018-03-03T15:02:43.417Z</updated>
    
    <content type="html"><![CDATA[<h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><ul><li>cookie是指<strong>某些网站</strong>为了辨别用户身份而<strong>存储在用户本地终端（client side）上的数据（通常经过加密）</strong>。cookie通过HTTP请求报文和响应报文配合完成。</li><li>cookie是存储于访问者的计算机中的变量。每当同一台计算机通过浏览器请求同一个页面时，就会发送这个cookie 。</li><li>通俗的说就是当一个<strong>用户通过HTTP协议访问一个服务器</strong>的时候，这个<strong>服务器</strong>会将一些<strong>key/Value键值对返回给客户端浏览器</strong>，并给这些数据加上一些限制条件，在条件符合时这个用户下次访问这个服务器的时候，数据又被完整的带回给服务器。<a id="more"></a><ul><li>cookie由服务器生成，返回给客户端浏览器，由<strong>浏览器进行存储</strong>。下次请求同一页面时带上该cookie。</li></ul></li><li>cookie是<strong>浏览器提供的一种机制</strong>，可以由 javascript 对其进行控制，而不是 javascript 本身的性质。</li></ul><h4 id="HTTP-无状态"><a href="#HTTP-无状态" class="headerlink" title="HTTP 无状态"></a>HTTP 无状态</h4><ul><li>HTTP协议是无状态的协议。一旦数据交换完毕，客户端与服务器的连接就会关闭，再次交换数据需要建立新的连接。这就意味着服务器无法从连接上跟踪会话。</li><li>而<strong>cookie机制</strong>采用的是<strong>在客户端保持状态</strong>的方案，而<strong>session机制</strong>采用的是<strong>在服务器端保持状态</strong>的方案。</li></ul><h4 id="cookie-的不可跨域名性"><a href="#cookie-的不可跨域名性" class="headerlink" title="cookie 的不可跨域名性"></a>cookie 的不可跨域名性</h4><ul><li>cookie是<strong>存于用户硬盘</strong>的一个文件，这个文件通常对应于一个域名。<strong>cookie可以跨越同一个域名下的多个网页，但不能跨越多个域名使用</strong>。</li></ul><h4 id="cookie-的使用场景"><a href="#cookie-的使用场景" class="headerlink" title="cookie 的使用场景"></a>cookie 的使用场景</h4><ul><li>购物车<ul><li>没有登录之前商品数据是保存在cookie中</li></ul></li><li>记住用户名<ul><li>利用cookie保存用户名</li></ul></li><li>记住我<ul><li>利用cookie来保存用户名和密码（加密后保存的）</li></ul></li></ul><h4 id="cookie-的缺点"><a href="#cookie-的缺点" class="headerlink" title="cookie 的缺点"></a>cookie 的缺点</h4><ul><li>cookie体积过大会造成请求和响应速度变慢。</li><li>默认浏览器会任何请求都把cookie带上去，哪怕是静态资源。</li><li>cookie可以在前后端修改，数据容易篡改或伪造。</li><li>cookie对于敏感数据的保护基本是无效的。</li><li>有些用户是禁用掉cookie的</li></ul><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><ul><li>除了cookie，web应用程序中还经常使用session来记录客户端的登录状态。不同于cookie，<strong>session保存在服务器上</strong>。session相当于程序<strong>在服务器上建立一份客户档案</strong>，客户来访时只需要查询客户档案表就可以了。</li></ul><h3 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h3><ul><li>webStorage是HTML5中<strong>本地存储</strong>的解决方案之一，在 html5 中的 WebStorage 概念引入并不是为取代 cookie 而制定的标准，cookie 作为HTTP协议的一部分用来处理客户端和服务器通信是不可或缺的，session正是依赖于cookie实现的客户端状态保持。</li><li><strong>webStorage</strong>的意图在于解决本地本来不应该用 cookie 做，却不得不用cookie的<strong>本地存储</strong>。</li></ul><h4 id="webStorage-的优势"><a href="#webStorage-的优势" class="headerlink" title="webStorage 的优势"></a>webStorage 的优势</h4><ul><li>从容量上讲WebStorage一般浏览器提供5M的存储空间。</li><li>安全性上WebStorage 并不作为 HTTP header 发送的浏览器，所以相对安全。</li><li>从流量上讲，因为WebStorage不传送到服务器，所以不必要的流量可以节省。</li><li>Html 5的Web Storage分两种，一个是<code>sessionStorage</code>，另一个是<code>localStorage</code>，两者差別就差在<strong>生命周期的不同</strong>而已。<ul><li>sessionStorage 用于本地存储一个会话（session）中的数据，这些<strong>数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁</strong>。因此 sessionStorage 不是一种长久化的本地存储，仅仅是<strong>会话级别的存储</strong>。</li><li>localStorage则正好相反，<strong>除非主动删除数据</strong>，否则<strong>数据是永远不会过期</strong>的。</li></ul></li></ul><h3 id="cookie和session的区别"><a href="#cookie和session的区别" class="headerlink" title="cookie和session的区别"></a>cookie和session的区别</h3><ul><li>session 保存在服务器，客户端不知道其中的信息；cookie 保存在客户端，服务器能够知道其中的信息。</li><li>session 中保存的是对象，cookie 中保存的是字符串。</li><li>session 不能区分路径，同一个用户在访问一个网站期间，所有的session在任何地方都可以访问到。而 cookie 中如果设置了路径参数，那么同一个网站不同路径下的 cookie 互相是不可以访问的。</li><li>cookie 不是很安全，本人可以分析存放在本地的 cookie 并进行 cookie欺骗。</li><li>session 会在一定时间内保存在服务器上。当访问增多，会占用服务器的性能。考虑到<strong>减轻服务器性能负担</strong>方面，应该<strong>使用 cookie</strong>。</li><li>单个 cookie 保存的数据不能超过 4k ，很多浏览器都限制一个站点最多保存 20 个 cookie。</li><li>session 是通过 cookie来工作的。</li></ul><h3 id="cookie和sessionStorage、localStorage之间的区别"><a href="#cookie和sessionStorage、localStorage之间的区别" class="headerlink" title="cookie和sessionStorage、localStorage之间的区别"></a>cookie和sessionStorage、localStorage之间的区别</h3><ul><li>共同点：都是保存在浏览器端，且同源的。</li><li>区别：<ul><li>cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。而<strong>sessionStorage和localStorage</strong>不会自动把数据发给服务器，<strong>仅在本地保存</strong>。</li><li><strong>cookie数据还有路径（path）的概念</strong>，可以限制cookie只属于某个路径下。</li><li><strong>存储大小限制也不同</strong>，cookie数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</li><li><strong>数据有效期不同</strong>：<ul><li>sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；</li><li>localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；</li><li>cookie只<strong>在设置的cookie过期时间之前一直有效</strong>，即使窗口或浏览器关闭。</li></ul></li><li><strong>作用域不同</strong>：<ul><li>sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；</li><li>localStorage 在所有同源窗口中都是共享的；</li><li>cookie也是在所有同源窗口中都是共享的。</li></ul></li><li>Web Storage 支持事件通知机制，可以将数据更新的通知发送给监听者。</li><li>Web Storage 的 api 接口使用更方便。</li></ul></li></ul><h3 id="sessionStorage与页面-js-数据对象的区别"><a href="#sessionStorage与页面-js-数据对象的区别" class="headerlink" title="sessionStorage与页面 js 数据对象的区别"></a>sessionStorage与页面 js 数据对象的区别</h3><ul><li>页面中一般的 js 对象或数据的生存期是仅在当前页面有效，因此刷新页面或转到另一页面这样的<strong>重新加载页面</strong>的情况，<strong>数据</strong>就<strong>不存在</strong>了。</li><li>而 sessionStorage 只要同源的同窗口（或tab）中，刷新页面或进入同源的不同页面，数据始终存在。也就是说<strong>只要这个浏览器窗口没有关闭，加载新页面或重新加载，数据仍然存在</strong>。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;cookie&quot;&gt;&lt;a href=&quot;#cookie&quot; class=&quot;headerlink&quot; title=&quot;cookie&quot;&gt;&lt;/a&gt;cookie&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;cookie是指&lt;strong&gt;某些网站&lt;/strong&gt;为了辨别用户身份而&lt;strong&gt;存储在用户本地终端（client side）上的数据（通常经过加密）&lt;/strong&gt;。cookie通过HTTP请求报文和响应报文配合完成。&lt;/li&gt;
&lt;li&gt;cookie是存储于访问者的计算机中的变量。每当同一台计算机通过浏览器请求同一个页面时，就会发送这个cookie 。&lt;/li&gt;
&lt;li&gt;通俗的说就是当一个&lt;strong&gt;用户通过HTTP协议访问一个服务器&lt;/strong&gt;的时候，这个&lt;strong&gt;服务器&lt;/strong&gt;会将一些&lt;strong&gt;key/Value键值对返回给客户端浏览器&lt;/strong&gt;，并给这些数据加上一些限制条件，在条件符合时这个用户下次访问这个服务器的时候，数据又被完整的带回给服务器。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Web" scheme="https://chongtianhong.github.io/tags/Web/"/>
    
      <category term="Cookie" scheme="https://chongtianhong.github.io/tags/Cookie/"/>
    
      <category term="Session" scheme="https://chongtianhong.github.io/tags/Session/"/>
    
      <category term="WebStorage" scheme="https://chongtianhong.github.io/tags/WebStorage/"/>
    
  </entry>
  
  <entry>
    <title>ThinkJS学习笔记(一)</title>
    <link href="https://chongtianhong.github.io/2018/03/02/thinkjs/"/>
    <id>https://chongtianhong.github.io/2018/03/02/thinkjs/</id>
    <published>2018-03-02T03:09:44.000Z</published>
    <updated>2018-03-02T12:45:02.003Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>ThinkJS 是一款使用 ES6/7 特性全新开发的 Node.js MVC 框架，使用 ES7 中 <code>async/await</code>，或者 ES6 中的 <code>*/yield</code> 特性彻底解决了 Node.js 中<strong>异步嵌套</strong>的问题。同时吸收了国内外众多框架的设计理念和思想，让<strong>开发 Node.js 项目更加简单、高效</strong>。</li><li>使用 ES6/7 特性来开发项目可以大大提高开发效率，是趋势所在。并且新版的 Node.js 对 ES6 特性也有了较好的支持，即使有些特性还没有支持，也可以借助 Babel 编译来支持。</li><li>本次是基于ThinkJS 2.2 版本进行学习。<a id="more"></a></li></ul><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><h4 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h4><ul><li>ThinkJS 是一款 Node.js 的 MVC 框架，所以安装 ThinkJS 之前，需要先安装 Node.js 环境。安装完成后，在命令行执行 <code>node -v</code>，如果能看到对应的版本号输出，则表示安装成功。</li><li>ThinkJS 需要 Node.js 的版本 <code>&gt;=0.12.0</code>，如果版本小于这个版本，需要升级 Node.js，否则无法启动服务。建议将 Node.js 版本升级到 <code>4.2.1</code> 或更高版本。</li></ul><h4 id="安装-ThinkJS"><a href="#安装-ThinkJS" class="headerlink" title="安装 ThinkJS"></a>安装 ThinkJS</h4><ul><li><p>通过下面的命令即可全局安装 ThinkJS：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install thinkjs@2 -g --verbose</span><br></pre></td></tr></table></figure></li><li><p>安装完成后，可以通过 <code>thinkjs –version</code> 或 <code>thinkjs -V</code> 命令查看安装的版本。</p></li></ul><h4 id="使用命令创建项目"><a href="#使用命令创建项目" class="headerlink" title="使用命令创建项目"></a>使用命令创建项目</h4><ul><li>ThinkJS 安装完成后，就可以通过下面的命令创建项目:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thinkjs new project_path; <span class="comment">#project_path为项目存放的目录</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><ul><li>项目安装后，进入项目目录，执行 <code>npm install</code> 安装依赖，可以使用 <code>taobao</code> 源进行安装。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --registry=https://registry.npm.taobao.org --verbose</span><br></pre></td></tr></table></figure></li></ul><h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><ul><li>在项目目录下执行命令 <code>npm start</code>，如果能看到类似下面的内容，表示服务启动成功。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[2015-09-21 20:21:09] [THINK] Server running at http://127.0.0.1:8360/</span><br><span class="line">[2015-09-21 20:21:09] [THINK] ThinkJS Version: 2.0.0</span><br><span class="line">[2015-09-21 20:21:09] [THINK] Cluster Status: closed</span><br><span class="line">[2015-09-21 20:21:09] [THINK] WebSocket Status: closed</span><br><span class="line">[2015-09-21 20:21:09] [THINK] File Auto Reload: <span class="literal">true</span></span><br><span class="line">[2015-09-21 20:21:09] [THINK] App Enviroment: development</span><br></pre></td></tr></table></figure></li></ul><h4 id="访问项目"><a href="#访问项目" class="headerlink" title="访问项目"></a>访问项目</h4><ul><li>打开浏览器，访问<code><a href="http://127.0.0.1:8360/" target="_blank" rel="noopener">http://127.0.0.1:8360/</a></code>即可。</li></ul><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ul><li>ThinkJS 创建项目时支持多种项目模式，默认创建的项目是按模块来划分的，并且自动添加了 <code>common</code> 和 <code>home</code> 2 个模块。每个模块有独立的配置、控制器、视图、模型等文件。</li><li>使用模块的方式划分项目，可以让项目结构更加清晰。</li><li>路由访问规则：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">域名/模块名/控制器名 /action名</span><br><span class="line">test.com/home/api/index</span><br></pre></td></tr></table></figure></li></ul><h4 id="模块列表"><a href="#模块列表" class="headerlink" title="模块列表"></a>模块列表</h4><ul><li><code>src</code>是源代码目录，使用 <code>ES6</code> 模式创建项目才有该目录。项目启动时会自动将 <code>src</code> 目录下的文件编译到 <code>app</code> 目录下。</li><li>在ThinkJS中是用模块来分拆项目的。</li></ul><h4 id="common模块"><a href="#common模块" class="headerlink" title="common模块"></a>common模块</h4><ul><li>common 模块是个通用模块，该模块下存放一些通用的功能，如： 通用的配置，runtime 目录，启动文件，错误处理控制器等。</li><li><p><code>注</code>：该模块下的控制器不能响应用户的请求。</p><blockquote>src/common/bootstrap</blockquote><ul><li>项目启动目录，该目录下的文件会自动加载，无需手动 require 。</li><li><p>可以在这个目录下文件里定义一些全局函数、注册中间件等常用的功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> // src/common/bootstrap/global.js</span><br><span class="line">global.formatDate = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>注</code>：bootstrap 只能放在 common 模块里。</p></li></ul><blockquote>src/common/config</blockquote><ul><li>配置文件，这里放一些通用的配置。</li><li>其中：路由配置、hook 配置、本地化配置等必须放在这里。</li></ul><blockquote>src/common/controller</blockquote><ul><li>控制器，放一些通用的控制器。其中 <code>error.js</code> 里错误处理的不同行为，项目里可以根据需要进行修改。</li></ul></li></ul><h4 id="默认模块"><a href="#默认模块" class="headerlink" title="默认模块"></a>默认模块</h4><ul><li>项目默认模块为 <code>home</code> 模块。当解析用户的请求找不到模块时会自动对应到 <code>home</code> 下。</li><li>可以在 <code>src/common/config/config.js</code> 中修改配置<code>default_module</code> 来重新定义默认模块：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//将默认模块名改为 blog</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">    default_module: <span class="string">'blog'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="添加模块"><a href="#添加模块" class="headerlink" title="添加模块"></a>添加模块</h4><ul><li>添加模块直接通过 ThinkJS 命令即可完成。</li><li><p>在当前项目目录下，执行 <code>thinkjs module xxx</code>，即可创建名为 <code>xxx</code> 的模块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thinkjs module user //添加一个user模块</span><br></pre></td></tr></table></figure></li><li><p>如果模块名已经存在，则无法创建。</p></li><li><p>模块下默认有四个文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config---配置信息，如数据库等</span><br><span class="line">controller --- 控制器目录，控制器用于获取post与get数据和处理逻辑。一个 url 对应一个 controller 下的 action</span><br><span class="line">logic --- 这是thinkjs最有特色的一点，和controller一一对应，用于验证controller数据合法性与处理数据，在controller之前调用，可以降低controller里action的复杂度</span><br><span class="line">model --- 用于操作数据库，返回数据</span><br></pre></td></tr></table></figure></li><li><p>可以给模块增加一个<code>service</code>文件夹,用于存放公用方法，可供其他模块调用。假如在refund模块里面,要调用其/service里面common.js里的check()方法,则在/controller里面的api.js里面调用方式如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> refundService = think.service(<span class="string">'common'</span>, <span class="string">'refund'</span>);</span><br><span class="line"><span class="built_in">let</span> refundInstance = new refundService();</span><br><span class="line"><span class="built_in">let</span> refundCount = await refundInstance.check();</span><br></pre></td></tr></table></figure></li></ul><blockquote>添加 controller</blockquote><ul><li><p>可以在项目目录下通过 <code>thinkjs controller [name]</code> 命令来添加 controller。如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thinkjs controller user;</span><br></pre></td></tr></table></figure></li><li><p>执行完成后，会创建 <code>src/common/controller/user.js</code> 文件，同时会创建 <code>src/common/logic/user.js</code> 文件。</p></li><li><p>默认会在 <code>common</code> 模块下创建，如果想在其他模块下创建，可以通过指定模块创建。如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thinkjs controller home/user;</span><br></pre></td></tr></table></figure></li><li><p>指定模块为 <code>home</code> 后，会创建 <code>src/home/controller/user.js</code> 文件。</p></li></ul><blockquote>添加 service</blockquote><ul><li><p>可以在项目目录下通过 <code>thinkjs service [name]</code> 命令来添加 <code>service</code>。如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thinkjs service github; <span class="comment">#创建调用 github 接口的 service</span></span><br></pre></td></tr></table></figure></li><li><p>执行完成后，会创建 <code>src/common/service/github.js</code> 文件。</p></li><li><p>默认会在 <code>common</code> 模块下创建，如果想在其他模块下创建，可以通过指定模块创建。如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thinkjs service home/github;</span><br></pre></td></tr></table></figure></li><li><p>指定模块为 <code>home</code> 后，会创建 <code>src/home/service/github.js</code> 文件。</p></li></ul><h4 id="禁用模块"><a href="#禁用模块" class="headerlink" title="禁用模块"></a>禁用模块</h4><ul><li>ThinkJS 默认会自动查找和识别项目下的模块，并认为所有的模块都是可用的。</li><li>如果想禁用部分模块，可以修改配置文件 <code>src/common/config/config.js</code>，添加下面的配置：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">    deny_module_list: [<span class="string">'xxx'</span>] //禁用 xxx 模块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><ul><li>控制器是一类操作的集合，用来响应用户同一类的请求。</li></ul><h4 id="使用-async-await"><a href="#使用-async-await" class="headerlink" title="使用 async/await"></a>使用 async/await</h4><ul><li>借助 Babel 编译，可以在控制器里使用 ES7 里的 async/await。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line"></span><br><span class="line">import Base from <span class="string">'./base.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default class extends Base &#123;</span><br><span class="line">  /**</span><br><span class="line">   * index action</span><br><span class="line">   * @<span class="built_in">return</span> &#123;Promise&#125; []</span><br><span class="line">   */</span><br><span class="line">  async <span class="function"><span class="title">indexAction</span></span>()&#123;</span><br><span class="line">    <span class="built_in">let</span> model = this.model(<span class="string">'user'</span>); //实例化模型 user</span><br><span class="line">    <span class="built_in">let</span> data = await model.select();</span><br><span class="line">    <span class="built_in">return</span> this.success(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><ul><li>控制器里的每一个<code>Action</code> 代表一个要执行的操作。如： <code>url</code> 为 <code>/home/article/detail</code>，解析后的模块为 <code>/home</code>，控制器为 <code>article</code>， <code>Action</code> 为 <code>detail</code>，那么执行的 <code>Action</code> 就是文件 <code>src/home/controller/aritcle</code> 里的 <code>detailAction</code> 方法。</li></ul><h4 id="模型实例化"><a href="#模型实例化" class="headerlink" title="模型实例化"></a>模型实例化</h4><ul><li>在控制器中可以通过 <code>this.model</code> 方法快速获得一个模型的实例。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.controller.base &#123;</span><br><span class="line">  <span class="function"><span class="title">indexAction</span></span>()&#123;</span><br><span class="line">    <span class="built_in">let</span> model = this.model(<span class="string">'user'</span>); //实例化模型 user</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="this-作用域的问题"><a href="#this-作用域的问题" class="headerlink" title="this 作用域的问题"></a>this 作用域的问题</h4><ul><li>Node.js 里经常有很多异步操作，而异步操作常见的处理方式是使用回调函数或者 Promise。这些处理方式都会增加一层作用域，导致在回调函数内无法直接使用 <code>this</code>，简单的处理办法是在顶部定义一个变量，将 <code>this</code> 赋值给这个变量，然后在回调函数内使用这个变量。如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">module.exports = think.controller(&#123;</span><br><span class="line">  <span class="function"><span class="title">indexAction</span></span>()&#123;</span><br><span class="line">    var self = this; //这里将 this 赋值给变量 self，然后在后面的回调函数里都使用 self</span><br><span class="line">    this.model(<span class="string">'user'</span>).find().<span class="keyword">then</span>(<span class="keyword">function</span>(data)&#123;</span><br><span class="line">      <span class="built_in">return</span> self.model(<span class="string">'article'</span>).<span class="built_in">where</span>(&#123;user_id: data.id&#125;).select();</span><br><span class="line">    &#125;).<span class="keyword">then</span>(<span class="keyword">function</span>(data)&#123;</span><br><span class="line">      self.success(data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="JSON-输出"><a href="#JSON-输出" class="headerlink" title="JSON 输出"></a>JSON 输出</h4><ul><li>项目中经常要提供一些接口，这些接口一般都是直接输出 <code>JSON</code> 格式的数据，并且会有标识表明当前接口是否正常。如果发生异常，需要将对应的错误信息随着接口一起输出。控制器里提供了 <code>this.success</code> 和 <code>this.fail</code> 方法来输出这样的接口数据。</li></ul><blockquote>输出正常的 JSON</blockquote><ul><li><p>可以通过 <code>this.success</code> 方法输出正常的接口数据，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.controller.base &#123;</span><br><span class="line">  <span class="function"><span class="title">indexAction</span></span>()&#123;</span><br><span class="line">    <span class="built_in">let</span> data = &#123;name: <span class="string">"thinkjs"</span>&#125;;</span><br><span class="line">    this.success(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输出结果为 <code>{errno: 0, errmsg: “”, data: {“name”: “thinkjs”}}</code>，客户端可以通过 <code>errno</code> 是否为 0 来判断当前接口是否有异常。</p></li></ul><blockquote>输出含有错误信息的 JSON</blockquote><ul><li><p>可以通过 <code>this.fail</code> 方法输出含有错误信息的接口数据，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.controller.base &#123;</span><br><span class="line">  <span class="function"><span class="title">indexAction</span></span>()&#123;</span><br><span class="line">    this.fail(1000, <span class="string">'connect error'</span>); //指定错误号和错误信息</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输出结果为 <code>{errno: 1000, errmsg: “connect error”}</code>，客户端判断 <code>errno</code> 大于 0，就知道当前接口有异常，并且通过 <code>errmsg</code> 拿到具体的错误信息。</p></li></ul><blockquote>配置错误号和错误信息</blockquote><ul><li>如果每个地方输出错误的时候都要指定错误号和错误信息势必比较麻烦，比较好的方式是把错误号和错误信息在一个地方配置，然后输出的时候只要指定错误号，错误信息根据错误号自动读取。</li><li><p>错误信息支持国际化，所以配置放在 <code>src/common/config/locale/[lang].js</code> 文件中。如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  10001: <span class="string">'get data error'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过上面的配置后，执行 <code>this.fail(10001)</code> 时会自动读取到对应的错误信息。</p></li></ul><blockquote>友好的错误号</blockquote><ul><li>在程序里执行 this.fail(10001) 虽然能输出正确的错误号和错误信息，但人不能直观的看出来错误号对应的错误信息是什么。</li><li><p>这时可以将 key 配置为大写字符串，值为错误号和错误信息。如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  GET_DATA_ERROR: [1234, <span class="string">'get data error'</span>] //key 必须为大写字符或者下划线才有效</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行 <code>this.fail(‘GET_DATA_ERROR’)</code> 时也会自动取到对应的错误号和错误信息。</p></li></ul><blockquote>格式配置</blockquote><ul><li>默认输出的错误号的 key 为 errno，错误信息的 key 为 errmsg。如果不满足需求的话，可以修改配置文件 src/common/config/error.js。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  key: <span class="string">'errno'</span>, //error number</span><br><span class="line">  msg: <span class="string">'errmsg'</span>, //error message</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote>输出不包含错误信息的 JSON</blockquote><ul><li>如果输出的 JSON 数据里不想包含 errno 和 errmsg 的话，可以通过 this.json 方法输出 JSON。如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.controller.base &#123;</span><br><span class="line">  <span class="function"><span class="title">indexAction</span></span>()&#123;</span><br><span class="line">    this.json(&#123;name: <span class="string">'thinkjs'</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h4><blockquote>通过get方法获取GET参数</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.controller.base &#123;</span><br><span class="line">  <span class="function"><span class="title">indexAction</span></span>()&#123;</span><br><span class="line">    <span class="built_in">let</span> name = this.get(<span class="string">'name'</span>); //获取一个参数值</span><br><span class="line">    <span class="built_in">let</span> allParams = this.get(); //获取所有 GET 参数，返回值为对象</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果参数不存在，那么值为空字符串。</li></ul><blockquote>通过post方法获取 POST 参数</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default class extends think.controller.base &#123;</span><br><span class="line">  <span class="function"><span class="title">indexAction</span></span>()&#123;</span><br><span class="line">    <span class="built_in">let</span> name = this.post(<span class="string">'name'</span>); //获取一个参数值</span><br><span class="line">    <span class="built_in">let</span> allParams = this.post(); //获取所有 POST 参数，返回值为对象</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果参数不存在，那么值为空字符串。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ThinkJS 是一款使用 ES6/7 特性全新开发的 Node.js MVC 框架，使用 ES7 中 &lt;code&gt;async/await&lt;/code&gt;，或者 ES6 中的 &lt;code&gt;*/yield&lt;/code&gt; 特性彻底解决了 Node.js 中&lt;strong&gt;异步嵌套&lt;/strong&gt;的问题。同时吸收了国内外众多框架的设计理念和思想，让&lt;strong&gt;开发 Node.js 项目更加简单、高效&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;使用 ES6/7 特性来开发项目可以大大提高开发效率，是趋势所在。并且新版的 Node.js 对 ES6 特性也有了较好的支持，即使有些特性还没有支持，也可以借助 Babel 编译来支持。&lt;/li&gt;
&lt;li&gt;本次是基于ThinkJS 2.2 版本进行学习。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Node.js" scheme="https://chongtianhong.github.io/tags/Node-js/"/>
    
      <category term="ThinkJS" scheme="https://chongtianhong.github.io/tags/ThinkJS/"/>
    
  </entry>
  
  <entry>
    <title>Promise对象</title>
    <link href="https://chongtianhong.github.io/2018/03/01/promise/"/>
    <id>https://chongtianhong.github.io/2018/03/01/promise/</id>
    <published>2018-03-01T14:38:04.000Z</published>
    <updated>2018-03-04T04:27:12.986Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>Promise对象是异步编程的一种解决方案，它表示一个尚未完成且预计在未来完成的异步操作。它有三种状态，分别是<code>pending</code>-进行中、<code>resolved</code>-已完成、<code>rejected</code>-已失败。</li><li>当Promise的状态由<code>pending</code>转变为<code>resolved</code>或<code>rejected</code>时，会执行相应的方法，并且状态一旦改变，就无法再次改变状态，这也是它名字Promise-承诺的由来。<a id="more"></a></li></ul><h4 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h4><ul><li>JavaScript的执行环境是「单线程」。 <ul><li>单线程，是指JS引擎中负责解释和执行JavaScript代码的线程只有一个，也就是一次只能完成一项任务，这个任务执行完后才能执行下一个，它会「阻塞」其他任务。这个任务可称为<strong>主线程</strong>（同步）。 </li><li>但实际上还有<strong>其他线程</strong>（异步），如事件触发线程、ajax请求线程等。</li></ul></li><li>这也就引发了<strong>同步</strong>和<strong>异步</strong>的问题。</li></ul><h5 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h5><ul><li><p><strong>同步模式</strong>，即上述所说的<strong>单线程模式</strong>，<strong>一次只能执行一个任务</strong>，函数调用后需等到函数执行结束，返回执行的结果，才能进行下一个任务。如果这个任务执行的时间较长，就会导致<strong>「线程阻塞」</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 例1.1 */</span><br><span class="line">var x = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(x); //死循环</span><br><span class="line">console.log(<span class="string">"don't carry out"</span>);    //不会执行</span><br></pre></td></tr></table></figure></li><li><p>上面的例子即同步模式，其中的while是一个<strong>死循环</strong>，它会<strong>阻塞进程</strong>，因此第三句console不会执行。 </p></li><li><strong>同步模式</strong>比较<strong>简单</strong>，也较<strong>容易编写</strong>。但问题也显而易见，<strong>如果请求的时间较长，而阻塞了后面代码的执行</strong>，体验是很不好的。因此对于一些耗时的操作，<strong>异步模式</strong>则是<strong>更好的选择</strong>。</li></ul><h5 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h5><ul><li><strong>异步模式</strong>，即与同步模式相反，<strong>可以一起执行多个任务</strong>，函数调用后不会立即返回执行的结果，如果任务A需要等待，可先执行任务B，等到任务A结果返回后再继续回调。 </li><li><p><strong>最常见的异步模式</strong>就数<strong>定时器</strong>了，例子如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* 例1.2 */</span><br><span class="line">setTimeout(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">'taskA, asynchronous'</span>);</span><br><span class="line">&#125;, 0);</span><br><span class="line">console.log(<span class="string">'taskB, synchronize'</span>);</span><br><span class="line">//<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">-------ouput-------</span><br><span class="line">taskB, synchronize</span><br><span class="line">taskA, asynchronous</span><br></pre></td></tr></table></figure></li><li><p>可以看到，定时器延时的时间为0，但taskA还是晚于taskB执行。这是由于定时器是异步的，<strong>异步任务会在当前脚本的所有同步任务执行完才会执行</strong>。如果同步代码中含有死循环，即将上例的注释去掉，那么这个异步任务就不会执行，因为同步任务阻塞了进程。</p></li></ul><h5 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h5><ul><li>回调函数可以简单理解为：（执行完）回（来）调（用）的函数。</li><li>回调函数是一段可执行的代码段，它以「参数」的形式传递给其他代码，在其合适的时间执行这段（回调函数）的代码。<ul><li>可以理解为是将一个函数func2作为参数传入另一个函数func1中，当func1执行到某一步或者满足某种条件的时候才执行传入的参数func2。</li></ul></li><li><p>回调函数不仅可以用于异步调用，一般同步的场景也可以用回调。<strong>在同步调用下，回调函数一般是最后执行的</strong>。而<strong>异步调用下，可能一段时间后执行或不执行（未达到执行的条件）</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/* 例1.3 */</span><br><span class="line">/******************同步回调******************/</span><br><span class="line">var fun1 = <span class="keyword">function</span>(callback) &#123;</span><br><span class="line">    //<span class="keyword">do</span> something</span><br><span class="line">    console.log(<span class="string">"before callback"</span>);</span><br><span class="line">    (callback &amp;&amp; typeof(callback) === <span class="string">'function'</span>) &amp;&amp; callback();</span><br><span class="line">    console.log(<span class="string">"after callback"</span>);</span><br><span class="line">&#125;</span><br><span class="line">var fun2 = <span class="keyword">function</span>(param) &#123;</span><br><span class="line">    //<span class="keyword">do</span> something</span><br><span class="line">    var start = new Date();</span><br><span class="line">    <span class="keyword">while</span>((new Date() - start) &lt; 3000) &#123; //delay 3s</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(<span class="string">"I'm callback"</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun1(fun2);</span><br><span class="line"></span><br><span class="line">-------output--------</span><br><span class="line">before callback</span><br><span class="line">//after 3s</span><br><span class="line">I’m callback</span><br><span class="line">after callback</span><br></pre></td></tr></table></figure></li><li><p>由于是同步回调，会阻塞后面的代码，如果fun2是个死循环，后面的代码就不执行了。</p></li><li><strong>setTimeout</strong>是常见的<strong>异步回调</strong>，另外常见的异步回调即<strong>ajax请求</strong>:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/* 例1.4 */</span><br><span class="line">/******************异步回调******************/</span><br><span class="line"><span class="keyword">function</span> request(url, param, successFun, errorFun) &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">'GET'</span>,</span><br><span class="line">        url: url,</span><br><span class="line">        param: param,</span><br><span class="line">        async: <span class="literal">true</span>,    //默认为<span class="literal">true</span>,即异步请求；<span class="literal">false</span>为同步请求</span><br><span class="line">        success: successFun,</span><br><span class="line">        error: errorFun</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">request(<span class="string">'test.html'</span>, <span class="string">''</span>, <span class="keyword">function</span>(data) &#123;</span><br><span class="line">    //请求成功后的回调函数，通常是对请求回来的数据进行处理</span><br><span class="line">    console.log(<span class="string">'请求成功啦, 这是返回的数据:'</span>, data);</span><br><span class="line">&#125;,<span class="keyword">function</span>(error) &#123;</span><br><span class="line">    console.log(<span class="string">'sorry, 请求失败了, 这是失败信息:'</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="为什么使用Promise"><a href="#为什么使用Promise" class="headerlink" title="为什么使用Promise"></a>为什么使用Promise</h4><ul><li>一般来说我们会碰到的回调嵌套都不会很多，一般就一到两级，但是某些情况下，回调嵌套很多时，代码就会非常繁琐，会给我们的编程带来很多的麻烦，这种情况俗称——回调地狱。</li><li>由此，<strong>Promise</strong>的概念就由社区提出并实现，<strong>作用</strong>与回调方法几乎一致，都是<strong>在某种情况下执行预先设定好的方法</strong>，但是使用它却能够让代码变得更简洁清晰。</li><li><p>利用Promise改写例1.4的异步回调如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/* 例1.5 */</span><br><span class="line"><span class="keyword">function</span> request(url, param, successFun, errorFun) &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">'GET'</span>,</span><br><span class="line">        url: url,</span><br><span class="line">        param: param,</span><br><span class="line">        async: <span class="literal">true</span>,    //默认为<span class="literal">true</span>,即异步请求；<span class="literal">false</span>为同步请求</span><br><span class="line">        success: successFun,</span><br><span class="line">        error: errorFun</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> sendRequest(url, param) &#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise(<span class="keyword">function</span> (resolve, reject) &#123;</span><br><span class="line">        request(url, param, resolve, reject);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sendRequest(<span class="string">'test.html'</span>, <span class="string">''</span>).<span class="keyword">then</span>(<span class="keyword">function</span>(data) &#123;</span><br><span class="line">    //异步操作成功后的回调</span><br><span class="line">    console.log(<span class="string">'请求成功啦, 这是返回的数据:'</span>, data);</span><br><span class="line">&#125;, <span class="keyword">function</span>(error) &#123;</span><br><span class="line">    //异步操作失败后的回调</span><br><span class="line">    console.log(<span class="string">'sorry, 请求失败了, 这是失败信息:'</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>Promise的真正强大之处在于它的<strong>多重链式调用</strong>，可以<strong>避免层层嵌套回调</strong>。如果我们在第一次ajax请求后，还要用它返回的结果再次请求时：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/* 例1.6 */</span><br><span class="line">request(<span class="string">'test1.html'</span>, <span class="string">''</span>, <span class="keyword">function</span>(data1) &#123;</span><br><span class="line">    console.log(<span class="string">'第一次请求成功, 这是返回的数据:'</span>, data1);</span><br><span class="line">    request(<span class="string">'test2.html'</span>, data1, <span class="keyword">function</span> (data2) &#123;</span><br><span class="line">        console.log(<span class="string">'第二次请求成功, 这是返回的数据:'</span>, data2);</span><br><span class="line">        request(<span class="string">'test3.html'</span>, data2, <span class="keyword">function</span> (data3) &#123;</span><br><span class="line">            console.log(<span class="string">'第三次请求成功, 这是返回的数据:'</span>, data3);</span><br><span class="line">            //request... 继续请求</span><br><span class="line">        &#125;, <span class="keyword">function</span>(error3) &#123;</span><br><span class="line">            console.log(<span class="string">'第三次请求失败, 这是失败信息:'</span>, error3);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, <span class="keyword">function</span>(error2) &#123;</span><br><span class="line">        console.log(<span class="string">'第二次请求失败, 这是失败信息:'</span>, error2);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="keyword">function</span>(error1) &#123;</span><br><span class="line">    console.log(<span class="string">'第一次请求失败, 这是失败信息:'</span>, error1);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>以上出现了多层回调嵌套，有种晕头转向的感觉。这也就是我们常说的厄运回调金字塔（Pyramid of Doom），编程体验十分不好。而使用Promise，我们就可以<strong>利用then进行「链式回调」，将异步操作以同步操作的流程表示出来</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* 例1.7 */</span><br><span class="line">sendRequest(<span class="string">'test.html'</span>, <span class="string">''</span>).<span class="keyword">then</span>(<span class="keyword">function</span>(data1) &#123;</span><br><span class="line">    console.log(<span class="string">'第一次请求成功, 这是返回的数据:'</span>, data1);</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="keyword">function</span>(data2) &#123;</span><br><span class="line">    console.log(<span class="string">'第二次请求成功, 这是返回的数据:'</span>, data2);</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="keyword">function</span>(data3) &#123;</span><br><span class="line">    console.log(<span class="string">'第三次请求成功, 这是返回的数据:'</span>, data3);</span><br><span class="line">&#125;).catch(<span class="keyword">function</span>(error) &#123;</span><br><span class="line">    //用catch捕捉前面的错误</span><br><span class="line">    console.log(<span class="string">'sorry, 请求失败了, 这是失败信息:'</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="Promise的基本用法"><a href="#Promise的基本用法" class="headerlink" title="Promise的基本用法"></a>Promise的基本用法</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><ul><li>Promise对象代表一个未完成、但预计将来会完成的操作。它有以下三种状态：<ul><li><code>pending</code>：初始值，不是fulfilled，也不是rejected</li><li><code>fulfilled</code>：代表操作成功</li><li><code>rejected</code>：代表操作失败</li></ul></li><li>Promise有两种状态改变的方式，既可以从<code>pending</code>转变为<code>fulfilled</code>，也可以从<code>pending</code>转变为<code>rejected</code>。一旦状态改变，就「凝固」了，会一直保持这个状态，不会再发生变化。当状态发生变化，<code>promise.then</code>绑定的函数就会被调用。</li><li>注意：Promise<strong>一旦新建就会「立即执行」，无法取消</strong>。这也是它的<strong>缺点</strong>之一。</li><li><p>声明一个Promise对象有两种方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.1 */</span><br><span class="line">//构建Promise</span><br><span class="line">// 方法1</span><br><span class="line"><span class="built_in">let</span> promise = new Promise ( <span class="keyword">function</span> (resolve, reject) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( success ) &#123;</span><br><span class="line">        resolve(a) // pending ——&gt; resolved 参数将传递给对应的回调方法</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(err) // pending ——&gt; rejectd</span><br><span class="line">    &#125;</span><br><span class="line">&#125; );</span><br><span class="line">// 注意：实例化的Promise对象会立即执行</span><br><span class="line">// 方法2</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">promise</span></span> () &#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise ( <span class="keyword">function</span> (resolve, reject) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( success ) &#123;</span><br><span class="line">            resolve(a)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类似构建对象，我们使用new来构建一个Promise。<strong>Promise接受一个「函数」作为参数</strong>，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>。这两个函数就是就是<strong>「回调函数」，由JavaScript引擎提供</strong>。</p><ul><li>resolve函数的作用：在<strong>异步操作成功时调用</strong>，并<strong>将异步操作的结果，作为参数传递出去</strong>； </li><li>reject函数的作用：在<strong>异步操作失败时调用</strong>，并<strong>将异步操作报出的错误，作为参数传递出去</strong>。</li></ul></li><li><p>Promise实例生成以后，可以用<code>then</code>方法指定<code>resolved</code>状态和<code>rejected</code>状态的回调函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* 接例2.1 */</span><br><span class="line">promise.then(onFulfilled, onRejected);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="keyword">function</span>(data) &#123;</span><br><span class="line">  // <span class="keyword">do</span> something when success</span><br><span class="line">&#125;, <span class="keyword">function</span>(error) &#123;</span><br><span class="line">  // <span class="keyword">do</span> something when failure</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>then</code>方法会返回一个Promise。它有两个参数，分别为Promise从<code>pending</code>变为<code>fulfilled</code>和<code>rejected</code>时的回调函数（第二个参数非必选）。这两个函数都接受Promise对象传出的值作为参数。</p></li><li><p>简单来说，<code>then</code>就是定义<code>resolve</code>和<code>reject</code>函数的，其resolve参数相当于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> resolveFun(data) &#123;</span><br><span class="line">    //data为promise传出的值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>而新建Promise中的’resolve(data)’，则相当于执行resolveFun函数。<br>Promise新建后就会立即执行。而<code>then</code>方法中指定的回调函数，将<strong>在当前脚本所有<em>同步任务</em>执行完才会执行</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.2 */</span><br><span class="line">var promise = new Promise(<span class="keyword">function</span>(resolve, reject) &#123;</span><br><span class="line">  console.log(<span class="string">'before resolved'</span>);</span><br><span class="line">  resolve();</span><br><span class="line">  console.log(<span class="string">'after resolved'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  console.log(<span class="string">'resolved'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(<span class="string">'outer'</span>);</span><br><span class="line"></span><br><span class="line">-------output-------</span><br><span class="line">before resolved</span><br><span class="line">after resolved</span><br><span class="line">outer</span><br><span class="line">resolved</span><br></pre></td></tr></table></figure></li><li><p>由于<code>resolve</code>指定的是异步操作成功后的回调函数，它需要等所有同步代码执行后才会执行，因此最后打印’resolved’，这个和例1.2是一样的道理。</p></li></ul><blockquote>Promise.prototype.then() VS Promise.prototype.catch()</blockquote><ul><li><p><code>then</code>()方法是Promise原型链上的方法，它包含两个参数方法，分别是已成功<code>resolved</code>的回调函数和已失败<code>rejected</code>的回调函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="keyword">function</span>(data) &#123;</span><br><span class="line">    console.log(<span class="string">'this is success callback'</span>);</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;, <span class="keyword">function</span>(error) &#123;</span><br><span class="line">    console.log(<span class="string">'this is fail callback'</span>);</span><br><span class="line">    console.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>.catch()的作用是捕获Promise的错误，与<code>then</code>()的rejected回调作用几乎一致。但是由于Promise的抛错具有冒泡性质，能够不断传递，这样就能够在下一个catch()中统一处理这些错误。同时catch()也能够捕获<code>then</code>()中抛出的错误，所以<strong>建议不要使用<code>then</code>()的rejected回调</strong>，而是<strong>统一使用catch()来处理错误</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="keyword">function</span>(data) &#123;</span><br><span class="line">    console.log(<span class="string">'this is success callback'</span>);</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;).catch(<span class="keyword">function</span>(error) &#123;</span><br><span class="line">    console.log(<span class="string">'this is fail callback'</span>);</span><br><span class="line">    console.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>同样，catch()中也可以抛出错误，由于抛出的错误会在下一个catch中被捕获处理，因此可以再添加catch()。</p></li></ul><h4 id="基本API"><a href="#基本API" class="headerlink" title="基本API"></a>基本API</h4><h5 id="then"><a href="#then" class="headerlink" title=".then()"></a>.then()</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：Promise.prototype.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure><ul><li>对promise添加<code>onFulfilled</code>和<code>onRejected</code>回调，并返回的是一个新的Promise实例（不是原来那个Promise实例），且返回值将作为参数传入这个新Promise的<code>resolve</code>函数。</li><li>因此，我们可以使用链式写法，如上文的例1.7。由于前一个回调函数，返回的还是一个Promise对象（即有异步操作），这时后一个回调函数，就会等待<strong>该Promise对象的状态发生变化，才会被调用</strong>。</li></ul><h5 id="catch"><a href="#catch" class="headerlink" title=".catch()"></a>.catch()</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：Promise.prototype.catch(onRejected)</span><br></pre></td></tr></table></figure><ul><li><p>该方法是<code>.then(undefined, onRejected)</code>的别名，用于指定发生错误时的回调函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.3 */</span><br><span class="line">promise.then(<span class="keyword">function</span>(data) &#123;</span><br><span class="line">    console.log(<span class="string">'success'</span>);</span><br><span class="line">&#125;).catch(<span class="keyword">function</span>(error) &#123;</span><br><span class="line">    console.log(<span class="string">'error'</span>, error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*******等同于*******/</span><br><span class="line">promise.then(<span class="keyword">function</span>(data) &#123;</span><br><span class="line">    console.log(<span class="string">'success'</span>);</span><br><span class="line">&#125;, <span class="keyword">function</span>(error) &#123;</span><br><span class="line">    console.log(<span class="string">'error'</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>reject</code>方法的作用，等同于抛错:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.4 */</span><br><span class="line">var promise = new Promise(<span class="keyword">function</span> (resolve, reject) &#123;</span><br><span class="line">    throw new Error(<span class="string">'test'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">/*******等同于*******/</span><br><span class="line">var promise = new Promise(<span class="keyword">function</span> (resolve, reject) &#123;</span><br><span class="line">    reject(new Error(<span class="string">'test'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//用catch捕获</span><br><span class="line">promise.catch(<span class="keyword">function</span> (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">&#125;);</span><br><span class="line">-------output-------</span><br><span class="line">Error: <span class="built_in">test</span></span><br></pre></td></tr></table></figure></li><li><p>promise对象的错误，会一直向后传递，直到被捕获。即错误总会被下一个<code>catch</code>所捕获。<code>then</code>方法指定的回调函数，若抛出错误，也会被下一个<code>catch</code>捕获。<code>catch</code>中也能抛错，则需要后面的<code>catch</code>来捕获。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.5 */</span><br><span class="line">sendRequest(<span class="string">'test.html'</span>).<span class="keyword">then</span>(<span class="keyword">function</span>(data1) &#123;</span><br><span class="line">    //<span class="keyword">do</span> something</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="keyword">function</span> (data2) &#123;</span><br><span class="line">    //<span class="keyword">do</span> something</span><br><span class="line">&#125;).catch(<span class="keyword">function</span> (error) &#123;</span><br><span class="line">    //处理前面三个Promise产生的错误</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>上文提到过，promise状态一旦改变就会凝固，不会再改变。因此promise一旦<code>fulfilled</code>了，再抛错，也不会变为<code>rejected</code>，就不会被<code>catch</code>了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.6 */</span><br><span class="line">var promise = new Promise(<span class="keyword">function</span>(resolve, reject) &#123;</span><br><span class="line">  resolve();</span><br><span class="line">  throw <span class="string">'error'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.catch(<span class="keyword">function</span>(e) &#123;</span><br><span class="line">   console.log(e);      //This is never called</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>如果没有使用<code>catch</code>方法指定处理错误的回调函数，Promise对象抛出的错误不会传递到外层代码，即不会有任何反应（Chrome会抛错），这是Promise的另一个缺点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.7 */</span><br><span class="line">var promise = new Promise(<span class="keyword">function</span> (resolve, reject) &#123;</span><br><span class="line">    resolve(x);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="keyword">function</span> (data) &#123;</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h5 id="all"><a href="#all" class="headerlink" title=".all()"></a>.all()</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：Promise.all(iterable)</span><br></pre></td></tr></table></figure><ul><li><p>该方法用于将<strong>多个Promise实例，包装成一个新的Promise实例</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var p = Promise.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure></li><li><p><code>Promise.all</code>方法接受一个数组（或具有Iterator接口）作参数，数组中的对象（p1、p2、p3）均为promise实例（如果不是一个promise，该项会被用<code>Promise.resolve</code>转换为一个promise)。它的<strong>状态由这三个promise实例决定</strong>。</p><ul><li>当p1, p2, p3状态都变为<code>fulfilled</code>，p的状态才会变为<code>fulfilled</code>，并将三个promise返回的结果，按<strong>参数的顺序</strong>（而不是<code>resolved</code>的顺序）存入数组，传给p的回调函数，如例2.8。</li><li>当p1, p2, p3其中之一状态变为<code>rejected</code>，p的状态也会变为<code>rejected</code>，并把<strong>第一个被<code>reject</code>的promise的返回值</strong>，传给p的回调函数，如例2.9。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.8 */</span><br><span class="line">var p1 = new Promise(<span class="keyword">function</span> (resolve, reject) &#123;</span><br><span class="line">    setTimeout(resolve, 3000, <span class="string">"first"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">var p2 = new Promise(<span class="keyword">function</span> (resolve, reject) &#123;</span><br><span class="line">    resolve(<span class="string">'second'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">var p3 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  setTimeout(resolve, 1000, <span class="string">"third"</span>);</span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line">Promise.all([p1, p2, p3]).<span class="keyword">then</span>(<span class="keyword">function</span>(values) &#123; </span><br><span class="line">  console.log(values); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">-------output-------</span><br><span class="line">//约 3s 后</span><br><span class="line">[<span class="string">"first"</span>, <span class="string">"second"</span>, <span class="string">"third"</span>]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.9 */</span><br><span class="line">var p1 = new Promise((resolve, reject) =&gt; &#123; </span><br><span class="line">  setTimeout(resolve, 1000, <span class="string">"one"</span>); </span><br><span class="line">&#125;); </span><br><span class="line">var p2 = new Promise((resolve, reject) =&gt; &#123; </span><br><span class="line">  setTimeout(reject, 2000, <span class="string">"two"</span>); </span><br><span class="line">&#125;);</span><br><span class="line">var p3 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  reject(<span class="string">"three"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Promise.all([p1, p2, p3]).<span class="keyword">then</span>(<span class="keyword">function</span> (value) &#123;</span><br><span class="line">    console.log(<span class="string">'resolve'</span>, value);</span><br><span class="line">&#125;, <span class="keyword">function</span> (error) &#123;</span><br><span class="line">    console.log(<span class="string">'reject'</span>, error);    // =&gt; reject three</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">-------output-------</span><br><span class="line">reject three</span><br></pre></td></tr></table></figure></li><li><p>这多个 promise 是<strong>同时开始、并行执行</strong>的，而不是顺序执行。从下面例子可以看出。如果一个个执行，至少需要 1+32+64+128(ms)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.10 */</span><br><span class="line"><span class="keyword">function</span> timerPromisefy(delay) &#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise(<span class="keyword">function</span> (resolve) &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">            resolve(delay);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">var startDate = Date.now();</span><br><span class="line"></span><br><span class="line">Promise.all([</span><br><span class="line">    timerPromisefy(1),</span><br><span class="line">    timerPromisefy(32),</span><br><span class="line">    timerPromisefy(64),</span><br><span class="line">    timerPromisefy(128)</span><br><span class="line">]).<span class="keyword">then</span>(<span class="keyword">function</span> (values) &#123;</span><br><span class="line">    console.log(Date.now() - startDate + <span class="string">'ms'</span>);</span><br><span class="line">    console.log(values);</span><br><span class="line">&#125;);</span><br><span class="line">-------output-------</span><br><span class="line">133ms       //不一定，但大于128ms</span><br><span class="line">[1,32,64,128]</span><br></pre></td></tr></table></figure></li></ul><h5 id="race"><a href="#race" class="headerlink" title=".race()"></a>.race()</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：Promise.race(iterable)</span><br></pre></td></tr></table></figure><ul><li><p>该方法同样是将多个Promise实例，包装成一个新的Promise实例。不同的是，参数中的p1、p2、p3只要有一个改变状态，promise就会立刻变成相同的状态并执行对其的回调。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var p = Promise.race([p1, p2, p3]);</span><br></pre></td></tr></table></figure></li><li><p>Promise.race方法同样接受一个数组（或具有Iterator接口）作参数。<strong>当p1, p2, p3中有一个实例的状态发生改变（变为fulfilled或rejected），p的状态就跟着改变</strong>。并把<strong>第一个改变状态的promise的返回值</strong>，传给p的回调函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.11 */</span><br><span class="line">var p1 = new Promise(<span class="keyword">function</span>(resolve, reject) &#123; </span><br><span class="line">    setTimeout(reject, 500, <span class="string">"one"</span>); </span><br><span class="line">&#125;);</span><br><span class="line">var p2 = new Promise(<span class="keyword">function</span>(resolve, reject) &#123; </span><br><span class="line">    setTimeout(resolve, 100, <span class="string">"two"</span>); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Promise.race([p1, p2]).<span class="keyword">then</span>(<span class="keyword">function</span>(value) &#123;</span><br><span class="line">    console.log(<span class="string">'resolve'</span>, value); </span><br><span class="line">&#125;, <span class="keyword">function</span>(error) &#123;</span><br><span class="line">    //not called</span><br><span class="line">    console.log(<span class="string">'reject'</span>, error); </span><br><span class="line">&#125;);</span><br><span class="line">-------output-------</span><br><span class="line">resolve two</span><br><span class="line"></span><br><span class="line">var p3 = new Promise(<span class="keyword">function</span>(resolve, reject) &#123; </span><br><span class="line">    setTimeout(resolve, 500, <span class="string">"three"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">var p4 = new Promise(<span class="keyword">function</span>(resolve, reject) &#123; </span><br><span class="line">    setTimeout(reject, 100, <span class="string">"four"</span>); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Promise.race([p3, p4]).<span class="keyword">then</span>(<span class="keyword">function</span>(value) &#123;</span><br><span class="line">    //not called</span><br><span class="line">    console.log(<span class="string">'resolve'</span>, value);              </span><br><span class="line">&#125;, <span class="keyword">function</span>(error) &#123;</span><br><span class="line">    console.log(<span class="string">'reject'</span>, error); </span><br><span class="line">&#125;);</span><br><span class="line">-------output-------</span><br><span class="line">reject four</span><br></pre></td></tr></table></figure></li><li><p>在第一个promise对象变为resolve后，并不会取消其他promise对象(相同状态)的执行，如下例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.12 */</span><br><span class="line">var fastPromise = new Promise(<span class="keyword">function</span> (resolve) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'fastPromise'</span>);</span><br><span class="line">        resolve(<span class="string">'resolve fastPromise'</span>);</span><br><span class="line">    &#125;, 100);</span><br><span class="line">&#125;);</span><br><span class="line">var slowPromise = new Promise(<span class="keyword">function</span> (resolve) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'slowPromise'</span>);</span><br><span class="line">        resolve(<span class="string">'resolve slowPromise'</span>);</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;);</span><br><span class="line">// 第一个promise变为resolve后程序停止</span><br><span class="line">Promise.race([fastPromise, slowPromise]).<span class="keyword">then</span>(<span class="keyword">function</span> (value) &#123;</span><br><span class="line">    console.log(value);    // =&gt; resolve fastPromise</span><br><span class="line">&#125;);</span><br><span class="line">-------output-------</span><br><span class="line">fastPromise</span><br><span class="line">resolve fastPromise</span><br><span class="line">slowPromise     //仍会执行</span><br></pre></td></tr></table></figure></li></ul><h5 id="resolve"><a href="#resolve" class="headerlink" title=".resolve()"></a>.resolve()</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">Promise.resolve(value);</span><br><span class="line">Promise.resolve(promise);</span><br><span class="line">Promise.resolve(thenable);</span><br></pre></td></tr></table></figure><ul><li><p>它可以看做<code>new Promise()</code>的快捷方式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Promise.resolve(<span class="string">'Success'</span>);</span><br><span class="line"></span><br><span class="line">/*******等同于*******/</span><br><span class="line">new Promise(<span class="keyword">function</span> (resolve) &#123;</span><br><span class="line">    resolve(<span class="string">'Success'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>这段代码会让这个Promise对象立即进入<code>resolved</code>状态，并将结果<code>success</code>传递给<code>then</code>指定的<code>onFulfilled</code>回调函数。由于<code>Promise.resolve()</code>也是返回Promise对象，因此可以用<code>.then()</code>处理其返回值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.13 */</span><br><span class="line">Promise.resolve(<span class="string">'success'</span>).<span class="keyword">then</span>(<span class="keyword">function</span> (value) &#123;</span><br><span class="line">    console.log(value);</span><br><span class="line">&#125;);</span><br><span class="line">-------output-------</span><br><span class="line">Success</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.14 */</span><br><span class="line">//Resolving an array</span><br><span class="line">Promise.resolve([1,2,3]).<span class="keyword">then</span>(<span class="keyword">function</span>(value) &#123;</span><br><span class="line">  console.log(value[0]);    // =&gt; 1</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//Resolving a Promise</span><br><span class="line">var p1 = Promise.resolve(<span class="string">'this is p1'</span>);</span><br><span class="line">var p2 = Promise.resolve(p1);</span><br><span class="line">p2.then(<span class="keyword">function</span> (value) &#123;</span><br><span class="line">    console.log(value);     // =&gt; this is p1</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>Promise.resolve()</code>的另一个作用就是将<code>thenable</code>对象（即带有then方法的对象）转换为promise对象。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.15 */</span><br><span class="line">var p1 = Promise.resolve(&#123; </span><br><span class="line">    <span class="keyword">then</span>: <span class="keyword">function</span> (resolve, reject) &#123; </span><br><span class="line">        resolve(<span class="string">"this is an thenable object!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(p1 instanceof Promise);     // =&gt; <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">p1.then(<span class="keyword">function</span>(value) &#123;</span><br><span class="line">    console.log(value);     // =&gt; this is an thenable object!</span><br><span class="line">  &#125;, <span class="keyword">function</span>(e) &#123;</span><br><span class="line">    //not called</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>再看下面两个例子，无论是在什么时候抛异常，只要promise状态变成<code>resolved</code>或<code>rejected</code>，状态不会再改变，这和新建promise是一样的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/* 例2.16 */</span><br><span class="line">//在回调函数前抛异常</span><br><span class="line">var p1 = &#123; </span><br><span class="line">    <span class="keyword">then</span>: <span class="keyword">function</span>(resolve) &#123;</span><br><span class="line">      throw new Error(<span class="string">"error"</span>);</span><br><span class="line">      resolve(<span class="string">"Resolved"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var p2 = Promise.resolve(p1);</span><br><span class="line">p2.then(<span class="keyword">function</span>(value) &#123;</span><br><span class="line">    //not called</span><br><span class="line">&#125;, <span class="keyword">function</span>(error) &#123;</span><br><span class="line">    console.log(error);       // =&gt; Error: error</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//在回调函数后抛异常</span><br><span class="line">var p3 = &#123; </span><br><span class="line">    <span class="keyword">then</span>: <span class="keyword">function</span>(resolve) &#123;</span><br><span class="line">        resolve(<span class="string">"Resolved"</span>);</span><br><span class="line">        throw new Error(<span class="string">"error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var p4 = Promise.resolve(p3);</span><br><span class="line">p4.then(<span class="keyword">function</span>(value) &#123;</span><br><span class="line">    console.log(value);     // =&gt; Resolved</span><br><span class="line">&#125;, <span class="keyword">function</span>(error) &#123;</span><br><span class="line">    //not called</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h5 id="reject"><a href="#reject" class="headerlink" title=".reject()"></a>.reject()</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：Promise.reject(reason)</span><br></pre></td></tr></table></figure><ul><li><p>这个方法和上述的<code>Promise.resolve()</code>类似，它也是<code>new Promise()</code>的快捷方式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Promise.reject(new Error(<span class="string">'error'</span>));</span><br><span class="line"></span><br><span class="line">/*******等同于*******/</span><br><span class="line">new Promise(<span class="keyword">function</span> (resolve, reject) &#123;</span><br><span class="line">    reject(new Error(<span class="string">'error'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>这段代码会让这个Promise对象立即进入<code>rejected</code>状态，并将错误对象传递给<code>then</code>指定的<code>onRejected</code>回调函数。</p></li></ul><h3 id="Promise常见问题"><a href="#Promise常见问题" class="headerlink" title="Promise常见问题"></a>Promise常见问题</h3><ul><li>总结一下创建promise的流程:<ol><li>使用<code>new Promise(fn)</code>或者它的快捷方式<code>Promise.resolve()</code>、<code>Promise.reject()</code>，返回一个promise对象。</li><li>在<code>fn</code>中指定异步的处理：<ul><li>处理结果正常，调用<code>resolve</code></li><li>处理结果错误，调用<code>reject</code></li></ul></li></ol></li></ul><h4 id="情景1：reject-和-catch-的区别"><a href="#情景1：reject-和-catch-的区别" class="headerlink" title="情景1：reject 和 catch 的区别"></a>情景1：reject 和 catch 的区别</h4><ol><li>promise.then(onFulfilled, onRejected)<br>在<code>onFulfilled</code>中发生异常的话，在<code>onRejected</code>中是捕获不到这个异常的。</li><li>promise.then(onFulfilled).catch(onRejected)<br><code>.then</code>中产生的异常能在<code>.catch</code>中捕获。</li></ol><ul><li>一般情况，还是建议使用第二种，因为<strong>能捕获之前的所有异常</strong>。当然了，第二种的<code>.catch()</code>也可以使用<code>.then()</code>表示，它们本质上是没有区别的，<code>.catch === .then(null, onRejected)</code>。</li></ul><h4 id="情景2：如果在then中抛错，而没有对错误进行处理（即catch），那么会一直保持reject状态，直到catch了错误"><a href="#情景2：如果在then中抛错，而没有对错误进行处理（即catch），那么会一直保持reject状态，直到catch了错误" class="headerlink" title="情景2：如果在then中抛错，而没有对错误进行处理（即catch），那么会一直保持reject状态，直到catch了错误"></a>情景2：如果在then中抛错，而没有对错误进行处理（即catch），那么会一直保持reject状态，直到catch了错误</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">* 例3.1 */</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">taskA</span></span>() &#123;</span><br><span class="line">    console.log(x);</span><br><span class="line">    console.log(<span class="string">"Task A"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">taskB</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">"Task B"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> onRejected(error) &#123;</span><br><span class="line">    console.log(<span class="string">"Catch Error: A or B"</span>, error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">finalTask</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">"Final Task"</span>);</span><br><span class="line">&#125;</span><br><span class="line">var promise = Promise.resolve();</span><br><span class="line">promise</span><br><span class="line">    .<span class="keyword">then</span>(taskA)</span><br><span class="line">    .<span class="keyword">then</span>(taskB)</span><br><span class="line">    .catch(onRejected)</span><br><span class="line">    .<span class="keyword">then</span>(finalTask);</span><br><span class="line">    </span><br><span class="line">-------output-------</span><br><span class="line">Catch Error: A or B,ReferenceError: x is not defined</span><br><span class="line">Final Task</span><br></pre></td></tr></table></figure><p><img src="/images/catch.png"></p><ul><li><p>根据例3.1的输出结果及流程图，可以看出，A抛错时，会按照 taskA → onRejected → finalTask这个流程来处理。A抛错后，若没有对它进行处理，如例2.7，状态就会维持rejected，taskB不会执行，直到catch了错误。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/* 例3.2 */</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">taskA</span></span>() &#123;</span><br><span class="line">    console.log(x);</span><br><span class="line">    console.log(<span class="string">"Task A"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">taskB</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">"Task B"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> onRejectedA(error) &#123;</span><br><span class="line">    console.log(<span class="string">"Catch Error: A"</span>, error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> onRejectedB(error) &#123;</span><br><span class="line">    console.log(<span class="string">"Catch Error: B"</span>, error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">finalTask</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">"Final Task"</span>);</span><br><span class="line">&#125;</span><br><span class="line">var promise = Promise.resolve();</span><br><span class="line">promise</span><br><span class="line">    .<span class="keyword">then</span>(taskA)</span><br><span class="line">    .catch(onRejectedA)</span><br><span class="line">    .<span class="keyword">then</span>(taskB)</span><br><span class="line">    .catch(onRejectedB)</span><br><span class="line">    .<span class="keyword">then</span>(finalTask);</span><br><span class="line">    </span><br><span class="line">-------output-------</span><br><span class="line">Catch Error: A ReferenceError: x is not defined</span><br><span class="line">Task B</span><br><span class="line">Final Task</span><br></pre></td></tr></table></figure></li><li><p>将例3.2与3.1对比，在taskA后多了对A的处理，因此，A抛错时，会按照A会按照 taskA → onRejectedA → taskB → finalTask这个流程来处理，此时taskB是正常执行的。</p></li></ul><h4 id="情景3：每次调用then都会返回一个新创建的promise对象，而then内部只是返回的数据"><a href="#情景3：每次调用then都会返回一个新创建的promise对象，而then内部只是返回的数据" class="headerlink" title="情景3：每次调用then都会返回一个新创建的promise对象，而then内部只是返回的数据"></a>情景3：每次调用then都会返回一个新创建的promise对象，而then内部只是返回的数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/* 例3.3 */</span><br><span class="line">//方法1：对同一个promise对象同时调用 <span class="keyword">then</span> 方法</span><br><span class="line">var p1 = new Promise(<span class="keyword">function</span> (resolve) &#123;</span><br><span class="line">    resolve(100);</span><br><span class="line">&#125;);</span><br><span class="line">p1.then(<span class="keyword">function</span> (value) &#123;</span><br><span class="line">    <span class="built_in">return</span> value * 2;</span><br><span class="line">&#125;);</span><br><span class="line">p1.then(<span class="keyword">function</span> (value) &#123;</span><br><span class="line">    <span class="built_in">return</span> value * 2;</span><br><span class="line">&#125;);</span><br><span class="line">p1.then(<span class="keyword">function</span> (value) &#123;</span><br><span class="line">    console.log(<span class="string">"finally: "</span> + value);</span><br><span class="line">&#125;);</span><br><span class="line">-------output-------</span><br><span class="line">finally: 100</span><br><span class="line"></span><br><span class="line">//方法2：对 <span class="keyword">then</span> 进行 promise chain 方式进行调用</span><br><span class="line">var p2 = new Promise(<span class="keyword">function</span> (resolve) &#123;</span><br><span class="line">    resolve(100);</span><br><span class="line">&#125;);</span><br><span class="line">p2.then(<span class="keyword">function</span> (value) &#123;</span><br><span class="line">    <span class="built_in">return</span> value * 2;</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="keyword">function</span> (value) &#123;</span><br><span class="line">    <span class="built_in">return</span> value * 2;</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="keyword">function</span> (value) &#123;</span><br><span class="line">    console.log(<span class="string">"finally: "</span> + value);</span><br><span class="line">&#125;);</span><br><span class="line">-------output-------</span><br><span class="line">finally: 400</span><br></pre></td></tr></table></figure><ul><li>第一种方法中，<code>then</code>的调用几乎是同时开始执行的，且传给每个<code>then</code>的value都是100，这种方法应当避免。方法二才是正确的链式调用。</li><li><p>因此容易出现下面的错误写法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/* 例3.4 */</span><br><span class="line"><span class="keyword">function</span> badAsyncCall(data) &#123;</span><br><span class="line">    var promise = Promise.resolve(data);</span><br><span class="line">    promise.then(<span class="keyword">function</span>(value) &#123;</span><br><span class="line">        //<span class="keyword">do</span> something</span><br><span class="line">        <span class="built_in">return</span> value + 1;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line">badAsyncCall(10).<span class="keyword">then</span>(<span class="keyword">function</span>(value) &#123;</span><br><span class="line">   console.log(value);          //想要得到11，实际输出10</span><br><span class="line">&#125;);</span><br><span class="line">-------output-------</span><br><span class="line">10</span><br></pre></td></tr></table></figure></li><li><p>正确的写法应该是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* 改写例3.4 */</span><br><span class="line"><span class="keyword">function</span> goodAsyncCall(data) &#123;</span><br><span class="line">    var promise = Promise.resolve(data);</span><br><span class="line">    <span class="built_in">return</span> promise.then(<span class="keyword">function</span>(value) &#123;</span><br><span class="line">        //<span class="keyword">do</span> something</span><br><span class="line">        <span class="built_in">return</span> value + 1;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">goodAsyncCall(10).<span class="keyword">then</span>(<span class="keyword">function</span>(value) &#123;</span><br><span class="line">   console.log(value);</span><br><span class="line">&#125;);</span><br><span class="line">-------output-------</span><br><span class="line">11</span><br></pre></td></tr></table></figure></li></ul><h4 id="情景4：在异步回调中抛错，不会被catch到"><a href="#情景4：在异步回调中抛错，不会被catch到" class="headerlink" title="情景4：在异步回调中抛错，不会被catch到"></a>情景4：在异步回调中抛错，不会被catch到</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Errors thrown inside asynchronous <span class="built_in">functions</span> will act like uncaught errors</span><br><span class="line">var promise = new Promise(<span class="keyword">function</span>(resolve, reject) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    throw <span class="string">'Uncaught Exception!'</span>;</span><br><span class="line">  &#125;, 1000);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.catch(<span class="keyword">function</span>(e) &#123;</span><br><span class="line">  console.log(e);       //This is never called</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="情景5：-promise状态变为resove或reject，就凝固了，不会再改变"><a href="#情景5：-promise状态变为resove或reject，就凝固了，不会再改变" class="headerlink" title="情景5： promise状态变为resove或reject，就凝固了，不会再改变"></a>情景5： promise状态变为resove或reject，就凝固了，不会再改变</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">console.log(1);</span><br><span class="line">new Promise(<span class="keyword">function</span> (resolve, reject)&#123;</span><br><span class="line">    reject(); //promise状态变为reject</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span> ()&#123;</span><br><span class="line">        resolve();            //not called</span><br><span class="line">    &#125;, 0);</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="title">function</span></span>()&#123; //跳过这里</span><br><span class="line">    console.log(2);</span><br><span class="line">&#125;, <span class="function"><span class="title">function</span></span>()&#123; //等同步过程执行完后执行这里</span><br><span class="line">    console.log(3);</span><br><span class="line">&#125;);</span><br><span class="line">console.log(4);</span><br><span class="line"></span><br><span class="line">-------output-------</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Promise对象是异步编程的一种解决方案，它表示一个尚未完成且预计在未来完成的异步操作。它有三种状态，分别是&lt;code&gt;pending&lt;/code&gt;-进行中、&lt;code&gt;resolved&lt;/code&gt;-已完成、&lt;code&gt;rejected&lt;/code&gt;-已失败。&lt;/li&gt;
&lt;li&gt;当Promise的状态由&lt;code&gt;pending&lt;/code&gt;转变为&lt;code&gt;resolved&lt;/code&gt;或&lt;code&gt;rejected&lt;/code&gt;时，会执行相应的方法，并且状态一旦改变，就无法再次改变状态，这也是它名字Promise-承诺的由来。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
      <category term="Promise" scheme="https://chongtianhong.github.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>前后端交互指南</title>
    <link href="https://chongtianhong.github.io/2018/02/28/ajax/"/>
    <id>https://chongtianhong.github.io/2018/02/28/ajax/</id>
    <published>2018-02-27T16:45:47.000Z</published>
    <updated>2018-03-03T01:18:19.218Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>前端工程师除了UI重构外，还有一个非常重要的职责就是<strong>在正确的区域渲染出服务端的数据</strong>。要构建一个大的web应用，不只是普普通通的由静态页面构成。</li></ul><h3 id="前后端如何实现交互"><a href="#前后端如何实现交互" class="headerlink" title="前后端如何实现交互"></a>前后端如何实现交互</h3><h4 id="前端请求数据URL由后台来写"><a href="#前端请求数据URL由后台来写" class="headerlink" title="前端请求数据URL由后台来写"></a>前端请求数据URL由后台来写</h4><ul><li>在开发中，URL主要是由<strong>后台</strong>来写好给前端。 </li><li>若后台在<strong>查询数据</strong>，需要<strong>借助查询条件</strong>才能查询到前端需要的数据时，这时后台会要求<strong>前端提供相关的查询参数</strong>（即URL请求的参数）。<a id="more"></a></li></ul><h4 id="接口文档主要由后台设计和修改"><a href="#接口文档主要由后台设计和修改" class="headerlink" title="接口文档主要由后台设计和修改"></a>接口文档主要由后台设计和修改</h4><ul><li><strong>接口文档</strong>主要由<strong>后台设计和修改</strong>，前端开发者起到了辅助的作用。</li><li>后台直接跟数据打交道，最清楚数据库里有什么数据，能返回什么数据。 </li><li>前端只是数据的被动接受者，只是接口文档的使用者。 </li><li>使用过程中，发现返回的数据不对，则需要跟后台商量，由后台修改。 </li><li>切记：前端不能随意更改接口文档，除非取得后台开发人员同意。</li></ul><h4 id="前端与后台交互的数据格式"><a href="#前端与后台交互的数据格式" class="headerlink" title="前端与后台交互的数据格式"></a>前端与后台交互的数据格式</h4><ul><li><strong>前端与后台交互的数据格式</strong>主要是<strong>JSON</strong>，XML现在用的不多。</li><li>JSON 通常用于与服务端交换数据。</li><li>在接收服务器数据时一般是得到字符串，我们可以使用 JSON.parse() 方法将数据转换为 JavaScript 对象。</li></ul><blockquote>JSON.parse()方法用于从一个字符串中解析出json对象。</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JSON.parse(<span class="string">'&#123;"name":"tom"&#125;'</span>);  // &#123;name: <span class="string">"tom"</span>&#125;</span><br><span class="line">JSON.parse(<span class="string">'&#123;"age":10&#125;'</span>);      // &#123;age: 10&#125;</span><br><span class="line">JSON.parse(<span class="string">'&#123;"age":null&#125;'</span>);     // &#123;age: null&#125;</span><br></pre></td></tr></table></figure><blockquote>JSON.stringify()方法用于将一个对象解析成一个JSON字符串</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a = &#123;a:1,b:2&#125;;</span><br><span class="line">JSON.stringify(a);  // <span class="string">"&#123;"</span>a<span class="string">":1,"</span>b<span class="string">":2&#125;"</span></span><br></pre></td></tr></table></figure><h4 id="前端与后台的交互原理"><a href="#前端与后台的交互原理" class="headerlink" title="前端与后台的交互原理"></a>前端与后台的交互原理</h4><ul><li>前后端开发关注点：<strong>接口地址</strong>、<strong>前端请求的参数</strong>、<strong>后端返回的参数</strong>。 </li><li>完成接口开发后，调一下接口，看一下返回的数据是否符合要求。</li></ul><h4 id="前端请求参数的形式"><a href="#前端请求参数的形式" class="headerlink" title="前端请求参数的形式"></a>前端请求参数的形式</h4><ul><li>前端请求参数的形式：<strong>GET</strong>和<strong>POST</strong>两种方式。</li><li>GET：从指定的服务器中<strong>获取</strong>数据（方便，较不安全）。</li><li>POST：<strong>提交</strong>数据给指定的服务器处理（不方便，比较安全）。</li></ul><blockquote>GET 和 POST的对比</blockquote><ul><li>与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。</li><li>然而，在以下情况中，请使用 POST 请求：<ul><li>无法使用缓存文件（更新服务器上的文件或数据库）</li><li>向服务器发送大量数据（POST 没有数据量限制）</li><li>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</li></ul></li></ul><h4 id="前端应该告知后台哪些有效信息，后台才能返回前端想要的数据"><a href="#前端应该告知后台哪些有效信息，后台才能返回前端想要的数据" class="headerlink" title="前端应该告知后台哪些有效信息，后台才能返回前端想要的数据"></a>前端应该告知后台哪些有效信息，后台才能返回前端想要的数据</h4><ul><li>先将要展示的页面内容进行模块划分，将模块的内容提取出来，以及方便前端的一些标志值等，将所有想要的内容和逻辑告知后端。</li><li>后端从数据库里面去查询相应的数据表以获得相应的内容或者图片地址信息。</li><li><strong>URL中的参数</strong>主要是<strong>根据后台需要</strong>，若后台需要一个参数作为查询的辅助条件，前端在URL数据请求时就传递参数。</li><li>请求格式：URL?参数（如果有几个参数则用&amp;连接参数。</li></ul><h4 id="前端如何把页面信息有效传达给后台，以及后台如何获取到这些数据"><a href="#前端如何把页面信息有效传达给后台，以及后台如何获取到这些数据" class="headerlink" title="前端如何把页面信息有效传达给后台，以及后台如何获取到这些数据"></a>前端如何把页面信息有效传达给后台，以及后台如何获取到这些数据</h4><ul><li>所有前端请求的URL后面的参数都是辅助后台数据查询的 ，若不需要参数，那后台就会直接给个URL给前端。</li></ul><h4 id="前端应该如何回拒一些本不属于自己做的一些功能需求或任务"><a href="#前端应该如何回拒一些本不属于自己做的一些功能需求或任务" class="headerlink" title="前端应该如何回拒一些本不属于自己做的一些功能需求或任务"></a>前端应该如何回拒一些本不属于自己做的一些功能需求或任务</h4><ul><li><strong>前端负责把数据展示在页面上</strong>（清晰的认识自己需要做的需求和任务）。</li></ul><h4 id="当前端在调用数据接口时，发现有些数据不是我们想要的，那么前端应该怎么办"><a href="#当前端在调用数据接口时，发现有些数据不是我们想要的，那么前端应该怎么办" class="headerlink" title="当前端在调用数据接口时，发现有些数据不是我们想要的，那么前端应该怎么办"></a>当前端在调用数据接口时，发现有些数据不是我们想要的，那么前端应该怎么办</h4><ul><li>把请求的URL和返回的数据以及在页面的展示的情况给后台看。</li><li>考虑后端开发的难处（后台查询数据、取数据、封装数据方面等蛮难处理的），耐心进行沟通。</li></ul><h4 id="前端有时候需要在请求的时候传入参数"><a href="#前端有时候需要在请求的时候传入参数" class="headerlink" title="前端有时候需要在请求的时候传入参数"></a>前端有时候需要在请求的时候传入参数</h4><ul><li>后台在查询数据库的时候需要<strong>条件查询</strong>。</li></ul><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><ul><li>AJAX = 异步 JavaScript 和 XML。</li><li>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</li><li>XMLHttpRequest 是 AJAX 的基础。<ul><li>所有现代浏览器均支持 XMLHttpRequest 对象。</li><li>XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</li></ul></li><li>通过 AJAX，JavaScript 无需等待服务器的响应，而是：<ul><li>在等待服务器响应时执行其他脚本</li><li>当响应就绪后对响应进行处理</li></ul></li><li>Web的运作原理：一次HTTP请求对应一个页面。<ul><li>如果要让用户留在当前页面中，同时发出新的HTTP请求，就必须用JavaScript发送这个新请求，接收到数据后，再用JavaScript更新页面，这样一来，用户就感觉自己仍然停留在当前页面，但是数据却可以不断地更新。</li></ul></li></ul><blockquote>例子：通过 AJAX 加载一段文本</blockquote><ul><li><p>jQuery 代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"#b01"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        htmlobj=$.ajax(&#123;url:<span class="string">"/jquery/test1.txt"</span>,async:<span class="literal">false</span>&#125;);</span><br><span class="line">        $(<span class="string">"#myDiv"</span>).html(htmlobj.responseText);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>HTML 代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"myDiv"</span>&gt;&lt;h2&gt;Let AJAX change this text&lt;/h2&gt;&lt;/div&gt;</span><br><span class="line">&lt;button id=<span class="string">"b01"</span> <span class="built_in">type</span>=<span class="string">"button"</span>&gt;Change Content&lt;/button&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="AJAX-load-方法"><a href="#AJAX-load-方法" class="headerlink" title="AJAX load() 方法"></a>AJAX load() 方法</h4><ul><li>jQuery load() 方法是简单但强大的 AJAX 方法。</li><li>load() 方法从服务器加载数据，并把返回的数据放入被选元素中。</li><li>语法：<code>$(selector).load(URL,data,callback);</code><ul><li>必需的 URL 参数规定希望加载数据的URL。</li><li>可选的 data 参数规定与请求一同发送的查询字符串键/值对集合。</li><li>可选的 callback 参数是 load() 方法完成后所执行的函数名称。</li></ul></li></ul><blockquote>例子：把文件 “demo_test.txt” 的内容加载到指定的 &lt;div&gt; 元素中</blockquote><ul><li><p>jQuery 代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        $(<span class="string">'#test'</span>).load(<span class="string">'/example/jquery/demo_test.txt'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>HTML 代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3 id=<span class="string">"test"</span>&gt;请点击下面的按钮，通过 jQuery AJAX 改变这段文本。&lt;/h3&gt;</span><br><span class="line">&lt;button id=<span class="string">"btn1"</span> <span class="built_in">type</span>=<span class="string">"button"</span>&gt;获得外部的内容&lt;/button&gt;</span><br></pre></td></tr></table></figure></li></ul><ul><li>也可以把 jQuery 选择器添加到 URL 参数。</li></ul><blockquote>例子：把 “demo_test.txt” 文件中 id=”p1” 的元素的内容，加载到指定的 &lt;div&gt; 元素中</blockquote><ul><li><p>jQuery 代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        $(<span class="string">"#div1"</span>).load(<span class="string">"demo_test.txt #p1"</span>); // demo_test.txt</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>“demo_test.txt” 文件中的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;jQuery and AJAX is FUN!!!&lt;/h2&gt;</span><br><span class="line">&lt;p id=<span class="string">"p1"</span>&gt;This is some text <span class="keyword">in</span> a paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure></li></ul><div class="note danger">可选的 callback 参数规定当 load() 方法完成后所要允许的回调函数。<br>回调函数可以设置不同的参数：<br>- responseTxt : 包含调用成功时的结果内容<br>- statusTXT : 包含调用的状态<br>- xhr : 包含 XMLHttpRequest 对象</div><blockquote>例子：在 load() 方法完成后显示一个提示框。如果 load() 方法已成功，则显示“外部内容加载成功！”，而如果失败，则显示错误消息：</blockquote><ul><li><p>jQuery 代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"#div1"</span>).load(<span class="string">"demo_test.txt"</span>,<span class="keyword">function</span>(responseTxt,statusTxt,xhr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(statusTxt==<span class="string">"success"</span>)</span><br><span class="line">        alert(<span class="string">"外部内容加载成功！"</span>);</span><br><span class="line">        <span class="keyword">if</span>(statusTxt==<span class="string">"error"</span>)</span><br><span class="line">        alert(<span class="string">"Error: "</span>+xhr.status+<span class="string">": "</span>+xhr.statusText);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="AJAX-get-和-post-方法"><a href="#AJAX-get-和-post-方法" class="headerlink" title="AJAX get() 和 post() 方法"></a>AJAX get() 和 post() 方法</h4><ul><li>jQuery get() 和 post() 方法用于通过 HTTP GET 或 POST 请求从服务器请求数据。</li><li>两种在客户端和服务器端进行请求-响应的常用方法是：GET 和 POST。<ul><li>GET - 从指定的资源请求数据</li><li>POST - 向指定的资源提交要处理的数据</li></ul></li><li>GET 基本上用于从服务器获得（取回）数据。注释：GET 方法可能返回缓存数据。</li><li>POST 也可用于从服务器获取数据。不过，POST 方法不会缓存数据，并且常用于连同请求一起发送数据。</li></ul><h5 id="jQuery-get-方法"><a href="#jQuery-get-方法" class="headerlink" title="jQuery $.get() 方法"></a>jQuery $.get() 方法</h5><ul><li>$.get() 方法通过 HTTP GET 请求从服务器上请求数据。</li><li>语法：<code>$.get(url,[data],[callback],[type]);</code><ul><li>必需的 URL 参数规定希望请求的 URL。</li><li>可选的 data 参数是请求时所传递的参数，可以json对象也可以是字符串拼接形式。</li><li>可选的 callback 参数是请求成功后所执行的函数名。</li><li>可选的 type 参数是期待的返回值类型，可以是text/xml/json。</li></ul></li></ul><blockquote>例子：使用 $.get() 方法从服务器上的一个文件中取回数据：</blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">$.get() 的第一个参数是我们希望请求的 URL（<span class="string">"demo_test.asp"</span>）。</span><br><span class="line">第二个参数是回调函数。第一个回调参数存有被请求页面的内容data，第二个回调参数存有请求的状态status。</span><br><span class="line">*/</span><br><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        $.get(<span class="string">"/example/jquery/demo_test.asp"</span>,<span class="keyword">function</span>(data,status)&#123;</span><br><span class="line">            alert(<span class="string">"数据："</span> + data + <span class="string">"\n状态："</span> + status);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="jQuery-post-方法"><a href="#jQuery-post-方法" class="headerlink" title="jQuery $.post() 方法"></a>jQuery $.post() 方法</h5><ul><li>$.post() 方法通过 HTTP POST 请求从服务器上请求数据。</li><li>语法：<code>$.post(url,[data],[callback],[type]);</code><ul><li>必需的 URL 参数规定您希望请求的 URL。</li><li>可选的 data 参数规定连同请求发送的数据。</li><li>可选的 callback 参数是请求成功后所执行的函数名。</li><li>可选的 type 参数是期待的返回值类型，可以是text/xml/json。</li></ul></li></ul><blockquote>例子：使用 $.post() 连同请求一起发送数据：</blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">$.post() 的第一个参数是我们希望请求的 URL (<span class="string">"demo_test_post.asp"</span>)。</span><br><span class="line">然后我们连同请求（name 和 city）一起发送数据。</span><br><span class="line"><span class="string">"demo_test_post.asp"</span> 中的 ASP 脚本读取这些参数，对它们进行处理，然后返回结果。</span><br><span class="line">第三个参数是回调函数。第一个回调参数存有被请求页面的内容，而第二个参数存有请求的状态。</span><br><span class="line">*/</span><br><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $.post(<span class="string">"demo_test_post.asp"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        name:<span class="string">"Donald Duck"</span>,</span><br><span class="line">        city:<span class="string">"Duckburg"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span>(data,status)&#123;</span><br><span class="line">        alert(<span class="string">"Data: "</span> + data + <span class="string">"\nStatus: "</span> + status);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="post-和-get-的完整形式"><a href="#post-和-get-的完整形式" class="headerlink" title="$.post() 和 $.get() 的完整形式"></a>$.post() 和 $.get() 的完整形式</h5><ul><li><p>$.post() 和 $.get() 是简写的 Ajax 函数，等价于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: url,</span><br><span class="line">    <span class="built_in">type</span>: <span class="string">"get"</span>/<span class="string">"post"</span>,</span><br><span class="line">    data: data,</span><br><span class="line">    dataType: callback</span><br><span class="line">    success: success,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>根据响应的不同的 MIME 类型，传递给 success 回调函数的返回数据也有所不同，这些数据可以是 XML root 元素、文本字符串、JavaScript 文件或者 JSON 对象,也可向 success 回调函数传递响应的文本状态，取决于<code>dataType</code>的类型。</p></li></ul><blockquote>实现get方式跨域请求数据：</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">"http://www.xxx.cn/index.php"</span>,</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">"get"</span>,</span><br><span class="line">        dataType: <span class="string">"jsonp"</span>, //指定服务器返回的数据类型</span><br><span class="line">        success: <span class="keyword">function</span> (data) &#123;</span><br><span class="line">            console.log(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote>实现post方式跨域请求：</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">"http://www.xxx.cn/index.php"</span>,</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">"post"</span>,</span><br><span class="line">        dataType: <span class="string">"json"</span>, //指定服务器返回的数据类型</span><br><span class="line">        success: <span class="keyword">function</span> (data) &#123;</span><br><span class="line">            console.log(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote>服务器端：</blockquote><ul><li><code>Access-Control-Allow-Origin:*</code> 表示允许任何域名跨域访问。</li><li>如果需要指定某域名才允许跨域访问，只需把<ul><li><code>Access-Control-Allow-Origin:*</code> 改为 <code>Access-Control-Allow-Origin:允许的域名</code>。</li></ul></li><li>某些header请求头：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 指定允许其他域名访问</span><br><span class="line">header(<span class="string">'Access-Control-Allow-Origin:*'</span>);</span><br><span class="line">// 响应类型</span><br><span class="line">header(<span class="string">'Access-Control-Allow-Methods:POST'</span>);</span><br><span class="line">// 响应头设置</span><br><span class="line">header(<span class="string">'Access-Control-Allow-Headers:x-requested-with,content-type'</span>);</span><br><span class="line"></span><br><span class="line">//设置内容类型为json</span><br><span class="line"></span><br><span class="line">header(<span class="string">'content-type:application:json;charset=utf8'</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;前端工程师除了UI重构外，还有一个非常重要的职责就是&lt;strong&gt;在正确的区域渲染出服务端的数据&lt;/strong&gt;。要构建一个大的web应用，不只是普普通通的由静态页面构成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;前后端如何实现交互&quot;&gt;&lt;a href=&quot;#前后端如何实现交互&quot; class=&quot;headerlink&quot; title=&quot;前后端如何实现交互&quot;&gt;&lt;/a&gt;前后端如何实现交互&lt;/h3&gt;&lt;h4 id=&quot;前端请求数据URL由后台来写&quot;&gt;&lt;a href=&quot;#前端请求数据URL由后台来写&quot; class=&quot;headerlink&quot; title=&quot;前端请求数据URL由后台来写&quot;&gt;&lt;/a&gt;前端请求数据URL由后台来写&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在开发中，URL主要是由&lt;strong&gt;后台&lt;/strong&gt;来写好给前端。 &lt;/li&gt;
&lt;li&gt;若后台在&lt;strong&gt;查询数据&lt;/strong&gt;，需要&lt;strong&gt;借助查询条件&lt;/strong&gt;才能查询到前端需要的数据时，这时后台会要求&lt;strong&gt;前端提供相关的查询参数&lt;/strong&gt;（即URL请求的参数）。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Web" scheme="https://chongtianhong.github.io/tags/Web/"/>
    
      <category term="交互" scheme="https://chongtianhong.github.io/tags/%E4%BA%A4%E4%BA%92/"/>
    
      <category term="AJAX" scheme="https://chongtianhong.github.io/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Pages绑定顶级域名的方法</title>
    <link href="https://chongtianhong.github.io/2018/02/27/domainname/"/>
    <id>https://chongtianhong.github.io/2018/02/27/domainname/</id>
    <published>2018-02-27T02:16:46.000Z</published>
    <updated>2018-02-27T02:56:29.032Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><ul><li>本文将简单写一下我将Hexo + Github Pages绑定顶级域名的方法，本文适用于已经使用<code>Github Pages</code>和<code>Hexo</code>完成个人博客的搭建的读者。</li><li>根据网上的资料和自己的选择，我决定在<a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">阿里云</a>申请域名，使用<a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNSpod</a>解析域名。<a id="more"></a></li></ul><h4 id="注册阿里云域名"><a href="#注册阿里云域名" class="headerlink" title="注册阿里云域名"></a>注册阿里云域名</h4><ul><li>在<a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">阿里云</a>上查找想要申请购买的域名，如果该域名没被注册，则可以申请购买，按照步骤执行，成功购买域名。<ul><li>申请域名时需要创建一个信息模版，按要求创建模版，在申请域名时选择这个模版即可。</li><li>注意：域名持有者信息的<strong>通讯地址</strong>要与身份证的<strong>住址信息</strong>一致，否则实名认证后域名仍无法被解析（serverHold）。</li></ul></li><li>缴费成功后，需要对域名进行<strong>实名认证</strong>，上传自己的身份证等待审核即可。如域名为xxx.com。</li></ul><h4 id="DNSpod下域名相关处理"><a href="#DNSpod下域名相关处理" class="headerlink" title="DNSpod下域名相关处理"></a>DNSpod下域名相关处理</h4><ul><li>在<a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNSpod</a>注册后，点击域名解析，DNSpod界面如下：<br><img src="/images/DNSpod1.png" alt="DNSpod界面1"></li><li><p>添加DNS Service记录</p><ul><li><p>给刚添加的域名设置两个A记录，主机记录都为@，记录值填：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.30.252.153 //第一个@</span><br><span class="line">192.30.252.154 //第二个@</span><br></pre></td></tr></table></figure></li><li><p>再添加一个CNAME记录，主机记录为www，记录值填：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chongtianhong.github.io.</span><br></pre></td></tr></table></figure></li><li><p>如下图所示：</p></li></ul><p><img src="/images/DNSpod2.png" alt="DNSpod界面2"></p></li><li>选择自定义域名服务器，更改成DNSpod提供的域名。<ul><li>DNSpod提供的域名为<code>f1g1ns1.dnspod.net</code>和<code>f1g1ns1.dnspod.net</code>，如下图所示：</li></ul></li></ul><p><img src="/images/DNSpod3.png" alt="DNSpod界面3"></p><ul><li>阿里云域名控制台界面进行域名更改，如下图所示：<br><img src="/images/alinet1.png" alt="阿里云域名控制台界面1"><br><img src="/images/alinet2.png" alt="阿里云域名控制台界面2"></li></ul><h4 id="创建CNAME文件"><a href="#创建CNAME文件" class="headerlink" title="创建CNAME文件"></a>创建CNAME文件</h4><ul><li><p>在自己网站项目repo的根目录添加CNAME，里面的内容为域名不要有http以及www等前缀，只需写入域名本身，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xbhong.top</span><br></pre></td></tr></table></figure><div class="note danger">如果是直接在GitHub网页上添加CNAME文件的话，会遇到一个问题就是在通过<code>hexo g -d</code>之后hexo会把根目录下的CNAME文件删除。</div></li><li><p>解决方案：把CNAME文件添加到<code>/source</code>目录下，这样<code>hexo g -d</code>之后hexo会自动把CNAME复制到<code>/puclic</code>目录下然后将<code>/public</code>路径下的内容进行复制并push到远程<code>master</code>分支的根目录下。</p></li></ul><h4 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h4><ul><li>等域名实名认证和解析生效后，便可在浏览器输入自己的域名www.xxx.com和xxx.com对GitHub Pages博客进行访问了，如下图所示：<br><img src="/images/homepage.png" alt="域名访问页面"></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol><li><a href="https://link.jianshu.com?t=https://www.zhihu.com/question/31377141/" target="_blank" rel="nofollow">github怎么绑定自己的域名？</a></li><li><a href="https://link.jianshu.com?t=http://pytlab.org/2016/01/23/GitHub-Pages%E7%BB%91%E5%AE%9A%E9%A1%B6%E7%BA%A7%E5%9F%9F%E5%90%8D/" target="_blank" rel="nofollow">GitHub Pages绑定顶级域名的方法</a></li><li><a href="https://www.jianshu.com/p/d92ea8542673/" target="_blank" rel="nofollow">github pages 绑定阿里云域名</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;本文将简单写一下我将Hexo + Github Pages绑定顶级域名的方法，本文适用于已经使用&lt;code&gt;Github Pages&lt;/code&gt;和&lt;code&gt;Hexo&lt;/code&gt;完成个人博客的搭建的读者。&lt;/li&gt;
&lt;li&gt;根据网上的资料和自己的选择，我决定在&lt;a href=&quot;https://wanwang.aliyun.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阿里云&lt;/a&gt;申请域名，使用&lt;a href=&quot;https://www.dnspod.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DNSpod&lt;/a&gt;解析域名。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Web" scheme="https://chongtianhong.github.io/tags/Web/"/>
    
      <category term="Hexo" scheme="https://chongtianhong.github.io/tags/Hexo/"/>
    
      <category term="Github" scheme="https://chongtianhong.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="https://chongtianhong.github.io/2018/02/26/hexo/"/>
    <id>https://chongtianhong.github.io/2018/02/26/hexo/</id>
    <published>2018-02-26T00:13:04.000Z</published>
    <updated>2018-03-02T11:10:08.093Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h3><ul><li>Hexo 是一个简单的、轻量的、基于Node.js的一个静态博客框架。</li><li>通过Hexo我们可以快速创建自己的博客，仅需要几条命令就可以完成。 </li><li>Hexo特性： <ul><li>Hexo基于Node.js，支持多进程，几百篇文章也可以秒生成。 </li><li>支持GitHub Flavored Markdown和所有Octopress的插件。 </li><li>Hexo支持EJS、Swig和Stylus。通过插件支持Haml、Jade和Less。<a id="more"></a></li></ul></li></ul><h3 id="Hexo：安装和配置"><a href="#Hexo：安装和配置" class="headerlink" title="Hexo：安装和配置"></a>Hexo：安装和配置</h3><ul><li>在安装Hexo之前需要先安装一些它所依赖的环境配置，本文主要介绍Hexo如何安装、使用，以及配置文件。</li></ul><h4 id="运行环境准备"><a href="#运行环境准备" class="headerlink" title="运行环境准备"></a>运行环境准备</h4><ul><li>本文以Hexo 3.0.0为例，操作系统为Windows 7 x64。</li><li>首先需要安装以下程序：<ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a><br>下载最新版的 Node.js，一路next安装到C盘。</li><li><a href="https://git-scm.com/downloads/" target="_blank" rel="noopener">Git</a><br>根据不同的平台相应选择下载版本，安装建议勾选Git Bash Here，方便以后的操作，然后一路next即可。</li><li><a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener">Notepad++</a>（可选）<br>文本编辑器，用于修改配置文件及写文章。</li></ul></li></ul><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><ol><li>新建一个文件夹，例如blog。</li><li>进入blog文件夹，右键点击<code>Git Bash Here</code>。</li><li><p>安装Hexo。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><ul><li>输入hexo -v，检查hexo是否安装成功。</li></ul></li><li><p>初始化blog文件夹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><ul><li>看到”Start blogging with Hexo！”，则表示初始化完成。</li></ul></li><li><p>安装依赖和插件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>在<code>_config.yml</code>，进行基础配置。</p></li><li><p>新建一篇博客。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post “博客名”</span><br></pre></td></tr></table></figure><ul><li>这时候在文件夹_posts目录下将会看到已经创建的文件。</li></ul></li><li><p>启动服务器进行本地预览。</p><ul><li>clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。</li><li>generate 生成静态文件。</li><li>server 启动本地服务器。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><ul><li>终端结果显示： <code>INFO Hexo is running at <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>. Press Ctrl+C to stop.</code>时就说明已经搭建起本地的hexo博客了。</li><li>在浏览器中打开 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> ， 成功的话即可看到博客页面，至此安装就完成了。</li></ul></li><li><p>安装插件。</p><ul><li>在生成以及部署文章之前，需要安装一个扩展：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ul><li>使用编辑器编好文章，就可以使用命令：<code>hexo d -g</code>，进行生成以及部署文章（下面会具体讲解如何将文章部署到github）。</li></ul></li><li><p>安装主题(以next主题为例)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li><li><p>若要回到命令窗口，则输入命令: <code>Ctrl+C</code> 停止服务器。</p></li></ol><h4 id="将文章部署到Github"><a href="#将文章部署到Github" class="headerlink" title="将文章部署到Github"></a>将文章部署到Github</h4><ol><li>申请Github账号。</li><li>创建Github仓库。<ul><li>new repository：Repository name 必须为<code>Github用户名+Github.io</code>这种格式，它将是我们个人博客的域名，即别人可以输入这个网址来访问我们的博客。</li></ul></li><li><p>配置本地文件。</p><ul><li>在<code>hexo init</code>的文件夹里（即blog）找到<code>_config.yml</code>全局配置文件，通过配置里面的参数，来与我们的Github上的仓库进行关联。 </li><li><p>打开这个文件，找到最下面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line"><span class="built_in">type</span>:</span><br></pre></td></tr></table></figure></li><li><p>修改为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">   <span class="built_in">type</span>: git <span class="comment">#部署类型，使用Github(key-value空格隔开)</span></span><br><span class="line">   repository: git@github.com:chongtianHong/chongtianHong.github.io.git <span class="comment">#部署的仓库的SSH(key-value空格隔开)</span></span><br><span class="line">   branch: master <span class="comment">#部署分支， 一般使用master主分支(key-value空格隔开)</span></span><br><span class="line">   message: update <span class="comment">#默认类型(key-value空格隔开)</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>安装<code>hexo-deployer-git</code>自动部署发布工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>将Hexo与Github page联系起来，设置Git的user name和email（如果是第一次的话）。</p><ul><li><p>在<code>hexo init</code>的文件夹（即blog）里面鼠标右键，点击<code>Git Base Here</code>，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"yourname"</span>  //github用户名</span><br><span class="line">git config --global user.email <span class="string">"your_email@example.com"</span>  //github 注册邮箱</span><br></pre></td></tr></table></figure></li><li><p>输入cd ~/.ssh，检查是否有.ssh的文件夹(若存在则直接跳过第6步)。</p></li></ul></li><li><p>生成新的SSH Key。</p><ul><li><p>输入以下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"450707109@qq.com"</span></span><br></pre></td></tr></table></figure></li><li><p>连续三个回车，SSH key就生成成功了。这时候可打开用户目录（默认存储路径是：<code>C:\Users\Administrator.ssh</code>），里面有一个“.ssh”文件夹，里面有“id_rsa” “id_rsa.pub” 这两个文件。其中“<code>id_rsa</code>”是私钥文件，“<code>id_rsa.pub</code>”是公钥文件。</p></li><li><p>添加密钥到ssh-agent，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span><br></pre></td></tr></table></figure></li><li><p>再输入以下命令，添加生成的SSH key到ssh-agent。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></li></ul></li><li><p>添加SSH Key到Github。</p><ul><li>登录Github，点击头像下的settings，添加ssh。</li><li>新建一个new ssh key，将<code>id_rsa.pub</code>文件里的内容复制上去。</li><li>输入<code>ssh -T git@github.com</code>，测试添加ssh是否成功。如果看到Hi后面是Github用户名，就说明成功了。</li></ul></li><li>发布到Github。<ul><li>输入如下命令，则可以完成hexo项目在Github上的生成及部署。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>hexo配置文件_config.yml 里面的每个冒号后面都要有个空格，否则会报错。</li><li>所有标点符号都是英文的，所以输入时要切换到英文状态。</li><li>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。其中：<ul><li>一份位于站点根目录下，主要包含 Hexo 本身的配置，称为站点配置文件；</li><li>另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项，称为主题配置文件。</li></ul></li><li>在切换主题之后、验证之前，最好使用 hexo clean 来清除 Hexo 的缓存。</li><li>在next/source/css/_custom目录下面专门提供了custom.styl供我们自定义样式，因此也可以在custom.styl里面添加样式代码。</li><li>博客内容按照<code>markdown</code>的语法进行编写。</li><li>所有文件（不管是以md为后缀的，还是以yml结尾的），都必须转换成UTF-8格式，可以在notepad++的格式里转换下，否则在本地查看（localhost:4000）中会出现乱码。</li><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方的安装教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hexo简介&quot;&gt;&lt;a href=&quot;#Hexo简介&quot; class=&quot;headerlink&quot; title=&quot;Hexo简介&quot;&gt;&lt;/a&gt;Hexo简介&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Hexo 是一个简单的、轻量的、基于Node.js的一个静态博客框架。&lt;/li&gt;
&lt;li&gt;通过Hexo我们可以快速创建自己的博客，仅需要几条命令就可以完成。 &lt;/li&gt;
&lt;li&gt;Hexo特性： &lt;ul&gt;
&lt;li&gt;Hexo基于Node.js，支持多进程，几百篇文章也可以秒生成。 &lt;/li&gt;
&lt;li&gt;支持GitHub Flavored Markdown和所有Octopress的插件。 &lt;/li&gt;
&lt;li&gt;Hexo支持EJS、Swig和Stylus。通过插件支持Haml、Jade和Less。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Hexo" scheme="https://chongtianhong.github.io/tags/Hexo/"/>
    
      <category term="Github" scheme="https://chongtianhong.github.io/tags/Github/"/>
    
      <category term="Node.js" scheme="https://chongtianhong.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>jQuery学习笔记（四）</title>
    <link href="https://chongtianhong.github.io/2018/02/25/jquery4/"/>
    <id>https://chongtianhong.github.io/2018/02/25/jquery4/</id>
    <published>2018-02-25T13:52:19.000Z</published>
    <updated>2018-02-27T11:47:49.265Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jQuery动画及jQuery事件"><a href="#jQuery动画及jQuery事件" class="headerlink" title="jQuery动画及jQuery事件"></a>jQuery动画及jQuery事件</h3><h4 id="jQuery动画"><a href="#jQuery动画" class="headerlink" title="jQuery动画"></a>jQuery动画</h4><h5 id="隐藏和显示"><a href="#隐藏和显示" class="headerlink" title="隐藏和显示"></a>隐藏和显示</h5><ul><li><code>show()</code>：显示动画<ul><li>原理：<code>show()</code>从上到下增加元素的高度，从左到右增加元素宽度，从0到1增加透明度，直至内容完全可见。</li><li>语法：<code>$(selector).show(speed,callback);</code></li><li>可选的 speed 参数规定隐藏/显示的速度，可以取以下值：”slow”、”fast” 或毫秒。</li><li>可选的 callback 参数是显示完成后所执行的函数名称。</li></ul></li><li><code>hide()</code>：隐藏动画<ul><li>原理：<code>hide()</code>通过改变元素的高度宽度和不透明度，直到这三个属性值到0。隐藏动画后将display设置为none。</li><li>语法：<code>$(selector).hide(speed,callback);</code></li></ul></li><li>显示和隐藏是一对密不可分的动画形式。<a id="more"></a></li></ul><h5 id="显隐切换"><a href="#显隐切换" class="headerlink" title="显隐切换"></a>显隐切换</h5><ul><li><code>toggle()</code>：切换元素的可见状态：显示被隐藏的元素，并隐藏已显示的元素。<ul><li>原理：匹配元素的宽度、高度以及不透明度，同时进行动画，隐藏动画后将display设置为none。</li><li>语法：<code>$(selector).toggle(speed,callback);</code></li></ul></li></ul><h5 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h5><ul><li><code>slideDown()</code>：滑动显示<ul><li>通过使用滑动效果，显示已隐藏的被选元素。</li><li>语法：<code>$(selector).slideDown(speed,callback);</code></li></ul></li><li><code>slidUp()</code>：滑动隐藏<ul><li>通过使用滑动效果，隐藏被选元素，如果元素已显示出来的话。</li><li>语法：<code>$(selector).slideUp(speed,callback);</code></li></ul></li><li><code>slideToggle()</code>:显隐滑动切换<ul><li>通过使用滑动效果（高度变化）来切换元素的可见状态。</li><li>如果被选元素是可见的，则隐藏这些元素，如果被选元素是隐藏的，则显示这些元素。</li><li>语法：<code>$(selector).slideToggle(speed,callback);</code></li></ul></li></ul><h5 id="渐变：通过改变不透明度"><a href="#渐变：通过改变不透明度" class="headerlink" title="渐变：通过改变不透明度"></a>渐变：通过改变不透明度</h5><ul><li><code>fadeIn()</code>：淡入<ul><li>使用淡入效果来显示被选元素，假如该元素是隐藏的。</li><li>语法：<code>$(selector).fadeIn(speed,callback);</code></li></ul></li><li><code>fadeOut()</code>：淡出<ul><li>使用淡出效果来隐藏被选元素，假如该元素是显示的。</li><li>语法：<code>$(selector).fadeOut(speed,callback);</code></li></ul></li><li><code>fadeTo()</code>：设置淡出透明效果<ul><li>以渐进的方式调整到指定透明度</li><li>语法：<code>$(selector).fadeTo(speed,opacity,callback);</code></li></ul></li><li><code>fadeToggle()</code>：结合fadeIn和fadeOut，实现渐变切换<ul><li>如果元素已淡出，则 <code>fadeToggle()</code> 会向元素添加淡入效果。</li><li>如果元素已淡入，则 <code>fadeToggle()</code> 会向元素添加淡出效果。</li><li>语法：<code>$(selector).fadeToggle(speed,callback);</code></li></ul></li></ul><h5 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h5><ul><li><p><code>animate()</code></p><div class="note danger">注意：<br>在使用animate方法之前，为了影响该元素的top  left bottom  right样式属性，必须先把元素的position样式设置为relative或者absolute。</div><ul><li>该方法执行 CSS 属性集的自定义动画。</li><li>语法：<code>$(selector).animate(styles,speed,easing,callback);</code></li><li>该方法通过CSS样式将元素从一个状态改变为另一个状态。CSS属性值是逐渐改变的，这样就可以创建动画效果。</li><li>只有数字值可创建动画（比如 “margin:30px”）。字符串值无法创建动画（比如 “background-color:red”）。</li><li>注释：使用 “+=” 或 “-=” 来创建相对动画（relative animations）。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".btn1"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"#box"</span>).animate(&#123;height:<span class="string">"300px"</span>&#125;); //改变 <span class="string">"div"</span> 元素的高度</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>stop()</code>：停止元素的动画</p><ul><li>很多时候需要停止匹配正在进行的动画，需要使用<code>stop()</code>。</li><li>jQuery <code>stop()</code> 方法用于在动画或效果完成前对它们进行停止。</li><li>语法：<code>$(selector).stop([stopAll],[goToEnd]);</code></li><li>stopAll，goToEnd都是可选参数，为布尔值；如果直接使用<code>stop()</code>方法，会立即停止当前正在进行的动画。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#stop"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"#panel"</span>).stop(); //停止滑动面板动画</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>判断元素是否处于动画状态</p><ul><li><p>如果不处于动画状态，则为元素添加新的动画，否则不添加。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!$(element).is(<span class="string">":animated"</span>))&#123; //判断元素是否处于动画状态&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个方法在animate动画中经常被用到，需要注意。</p></li></ul></li><li>延迟动画<ul><li>在动画执行过程中，如果想对动画进行延迟操作，则使用<code>delay()</code></li></ul></li><li><p>用animate模拟<code>show()</code>、<code>toggle()</code>、<code>hide()</code>:</p><ul><li>show: 表示由透明到不透明</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).animate(&#123;</span><br><span class="line">        height:<span class="string">'show'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>toggle: 切换</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).animate(&#123;</span><br><span class="line">        height:<span class="string">'toggle'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>hide:表示由显示到隐藏</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).animate(&#123;</span><br><span class="line">        height:<span class="string">'hide'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h5 id="动画方法总结"><a href="#动画方法总结" class="headerlink" title="动画方法总结"></a>动画方法总结</h5><table><thead><tr><th style="text-align:center">方法名</th><th style="text-align:center">说明 </th></tr></thead><tbody><tr><td style="text-align:center">hide()和show()</td><td style="text-align:center">同时修改多个样式属性，即高度、宽度和不透明度</td></tr><tr><td style="text-align:center">fadeIn()和fadeOut()</td><td style="text-align:center">只改变不透明度</td></tr><tr><td style="text-align:center">slideUp()和slideDown()</td><td style="text-align:center">只改变高度</td></tr><tr><td style="text-align:center">fadeTo()</td><td style="text-align:center">只改变不透明度</td></tr><tr><td style="text-align:center">toggle()</td><td style="text-align:center">用来代替show()和hide()方法，所以会同时修改多个属性，即高度、宽度和不透明度</td></tr><tr><td style="text-align:center">slideToggle()</td><td style="text-align:center">用来代替slideUp和slideDown()方法，所以只能改变高度</td></tr><tr><td style="text-align:center">fadeToggle()</td><td style="text-align:center">用来代替fadeIn()和fadeOut方法，只能改变不透明度</td></tr><tr><td style="text-align:center">animate()</td><td style="text-align:center">属于自定义动画，以上各种动画方法都是调用了animate方法。此外，用animate方法还能自定义其他的样式属性，例如：left、marginLeft、scrollTop等</td></tr></tbody></table><h4 id="jQuery事件"><a href="#jQuery事件" class="headerlink" title="jQuery事件"></a>jQuery事件</h4><h5 id="事件对象的属性"><a href="#事件对象的属性" class="headerlink" title="事件对象的属性"></a>事件对象的属性</h5><ul><li><p><code>event.type</code>：描述触发事件的类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).<span class="built_in">bind</span>(<span class="string">'click dblclick mouseover mouseout'</span>,<span class="keyword">function</span>(event)&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).html(<span class="string">"Event: "</span> + event.type); //显示触发了哪种类型的事件</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>event.target</code>：获取到触发事件的 DOM 元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p, button, h1, h2"</span>).click(<span class="keyword">function</span>(event)&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).html(<span class="string">"Triggered by a "</span> + event.target.nodeName + <span class="string">" element."</span>); //显示哪个 DOM 元素触发了事件</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>event.preventDefault</code>：阻止元素发生默认的行为（例如，当点击提交按钮时阻止对表单的提交）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"a"</span>).click(<span class="keyword">function</span>(event)&#123;</span><br><span class="line">    event.preventDefault(); //防止链接打开 URL</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>event.stopPropagation()</code>：阻止事件的冒泡</p></li><li><code>keyCode</code>：只针对于keypress事件，获取键盘键数字(按下回车-&gt;13)</li><li><p><code>event.pageX</code> / <code>event.pageY</code>：获取到光标相对于页面的x坐标和y坐标</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(document).mousemove(<span class="keyword">function</span>(e)&#123;</span><br><span class="line">    $(<span class="string">"span"</span>).text(<span class="string">"X: "</span> + e.pageX + <span class="string">", Y: "</span> + e.pageY); //显示鼠标指针的位置</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>如果没有jQuery，在IE浏览器中用event.x / event.y；在Firefox浏览器中用event.pageX / event.pageY。如果页面上有滚动条还要加上滚动条的宽度和高度</li></ul></li><li><code>event.clientX</code>：光标对于<strong>浏览器窗口</strong>的水平坐标</li><li><code>event.clientY</code>：光标对于<strong>浏览器窗口</strong>的垂直坐标</li><li><code>event.screenX</code>：光标对于<strong>电脑屏幕</strong>的水平坐标</li><li><code>event.screenY</code>：光标对于<strong>电脑屏幕</strong>的水平坐标</li><li><code>event.which</code>：which 属性指示按了键盘/鼠标的哪个键<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"input"</span>).keydown(<span class="keyword">function</span>(event)&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).html(<span class="string">"Key: "</span> + event.which); //显示按了哪个键</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h5 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h5><ul><li>什么是冒泡<ul><li>在页面上可以有多个事件，也可以多个元素影响同一个元素。</li><li>从里到外、嵌套关系、相同事件。</li><li>其中的某一父类没有相同事件时,继续向上查找。</li></ul></li><li>停止事件冒泡<ul><li>停止事件冒泡可以阻止事件中其他对象的事件处理函数被执行。</li><li>在jQuery中提供了<code>stopPropagation()</code>方法。</li></ul></li><li>阻止默认行为<ul><li>网页中元素有自己的默认行为，例如：单击超链接后会跳转、单击提交后表单会提交，有时需要阻止元素的默认行为。</li><li>在jQuery中提供了<code>preventDefault()</code>方法来阻止元素的默认行为。</li></ul></li><li>事件捕获<ul><li>事件捕获和冒泡是相反的过程，事件捕获是从最顶端往下开始触发。</li><li>并非所有的浏览器都支持事件捕获，并且这个缺陷无法通过JavaScript来修复。</li><li>jQuery不支持事件捕获，如需要用事件捕获，要用原生的JavaScript。</li></ul></li></ul><h5 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h5><ul><li><p><code>bind()</code></p><ul><li>为被选元素添加一个或多个事件处理程序，并规定事件发生时运行的函数。</li><li>语法：<code>$(selector).bind(event,data,function)</code></li><li>替代语法：<code>$(selector).bind({event:function, event:function, …});</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).<span class="built_in">bind</span>(<span class="string">'click dblclick mouseover mouseout'</span>,<span class="keyword">function</span>(event)&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).html(<span class="string">"Event: "</span> + event.type); //显示触发了哪种类型的事件</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>one()</code></p><ul><li>为被选元素附加一个或多个事件处理程序，并规定当事件发生时运行的函数。</li><li>当使用 one() 方法时，每个元素只能运行一次事件处理器函数。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).one(<span class="string">"click"</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(this).animate(&#123;fontSize:<span class="string">"+=6px"</span>&#125;); //当点击 p 元素时，增加该元素的文本大小</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h5 id="绑定特定事件类型方法："><a href="#绑定特定事件类型方法：" class="headerlink" title="绑定特定事件类型方法："></a>绑定特定事件类型方法：</h5><table><thead><tr><th style="text-align:center">分类</th><th style="text-align:center">方法名称</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">页面载入</td><td style="text-align:center">ready(fn)</td><td style="text-align:center">当DOM载入就绪可以绑定一个要执行的函数</td></tr><tr><td style="text-align:center">事件绑定</td><td style="text-align:center">bind(type,[data],fn)</td><td style="text-align:center">为每个匹配元素的特定事件绑定一个事件处理函数</td></tr><tr><td style="text-align:center">事件绑定</td><td style="text-align:center">unbind()</td><td style="text-align:center">解除绑定</td></tr><tr><td style="text-align:center">事件绑定</td><td style="text-align:center">on(events,[,selector[,]data],handler)</td><td style="text-align:center">在选择元素上绑定一个或者多个事件处理函数</td></tr><tr><td style="text-align:center">事件绑定</td><td style="text-align:center">off()</td><td style="text-align:center">移除on绑定的事件</td></tr><tr><td style="text-align:center">事件绑定</td><td style="text-align:center">delegate(selector,eventType,handler)</td><td style="text-align:center">为所有选择匹配元素附加一个或多个事件处理函数</td></tr><tr><td style="text-align:center">事件绑定</td><td style="text-align:center">undelegate()</td><td style="text-align:center">移除绑定</td></tr><tr><td style="text-align:center">事件动态</td><td style="text-align:center">live(type,fn)</td><td style="text-align:center">对动态生成的元素进行事件绑定</td></tr><tr><td style="text-align:center">事件动态</td><td style="text-align:center">die(type,fn)</td><td style="text-align:center">移除live()绑定的事件</td></tr><tr><td style="text-align:center">交互事件</td><td style="text-align:center">hover()</td><td style="text-align:center">鼠标移入移出</td></tr><tr><td style="text-align:center">交互事件</td><td style="text-align:center">toggle(fn1,fn2,[fn3],[fn4])</td><td style="text-align:center">每单击后依次调用函数</td></tr><tr><td style="text-align:center">交互事件</td><td style="text-align:center">blur(fn)</td><td style="text-align:center">触发每一个匹配元素的blur事件</td></tr><tr><td style="text-align:center">交互事件</td><td style="text-align:center">change()</td><td style="text-align:center">触发每一个匹配元素的change事件</td></tr><tr><td style="text-align:center">交互事件</td><td style="text-align:center">click()</td><td style="text-align:center">触发每一个匹配元素的click事件</td></tr><tr><td style="text-align:center">交互事件</td><td style="text-align:center">focus()</td><td style="text-align:center">触发每一个匹配元素的focus事件</td></tr><tr><td style="text-align:center">交互事件</td><td style="text-align:center">submit()</td><td style="text-align:center">触发每一个匹配元素的submit事件</td></tr><tr><td style="text-align:center">键盘事件</td><td style="text-align:center">keydown()</td><td style="text-align:center">触发每一个匹配元素的keydown事件</td></tr><tr><td style="text-align:center">键盘事件</td><td style="text-align:center">keypress()</td><td style="text-align:center">触发每一个匹配元素的keypress事件</td></tr><tr><td style="text-align:center">键盘事件</td><td style="text-align:center">keyup()</td><td style="text-align:center">触发每一个匹配元素的keyup事件</td></tr><tr><td style="text-align:center">鼠标事件</td><td style="text-align:center">mousedown(fn)</td><td style="text-align:center">绑定一个处理函数</td></tr><tr><td style="text-align:center">鼠标事件</td><td style="text-align:center">mouseenter(fn)</td><td style="text-align:center">绑定一个处理函数</td></tr><tr><td style="text-align:center">键盘事件</td><td style="text-align:center">mouseleave(fn)</td><td style="text-align:center">绑定一个处理函数</td></tr><tr><td style="text-align:center">键盘事件</td><td style="text-align:center">mouseout(fn)</td><td style="text-align:center">绑定一个处理函数</td></tr><tr><td style="text-align:center">键盘事件</td><td style="text-align:center">mouseover(fn)</td><td style="text-align:center">绑定一个处理函数</td></tr><tr><td style="text-align:center">窗口操作</td><td style="text-align:center">resize(fn)</td><td style="text-align:center">绑定一个处理函数</td></tr><tr><td style="text-align:center">窗口操作</td><td style="text-align:center">scroll(fn)</td><td style="text-align:center">绑定一个处理函数</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;jQuery动画及jQuery事件&quot;&gt;&lt;a href=&quot;#jQuery动画及jQuery事件&quot; class=&quot;headerlink&quot; title=&quot;jQuery动画及jQuery事件&quot;&gt;&lt;/a&gt;jQuery动画及jQuery事件&lt;/h3&gt;&lt;h4 id=&quot;jQuery动画&quot;&gt;&lt;a href=&quot;#jQuery动画&quot; class=&quot;headerlink&quot; title=&quot;jQuery动画&quot;&gt;&lt;/a&gt;jQuery动画&lt;/h4&gt;&lt;h5 id=&quot;隐藏和显示&quot;&gt;&lt;a href=&quot;#隐藏和显示&quot; class=&quot;headerlink&quot; title=&quot;隐藏和显示&quot;&gt;&lt;/a&gt;隐藏和显示&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;show()&lt;/code&gt;：显示动画&lt;ul&gt;
&lt;li&gt;原理：&lt;code&gt;show()&lt;/code&gt;从上到下增加元素的高度，从左到右增加元素宽度，从0到1增加透明度，直至内容完全可见。&lt;/li&gt;
&lt;li&gt;语法：&lt;code&gt;$(selector).show(speed,callback);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可选的 speed 参数规定隐藏/显示的速度，可以取以下值：”slow”、”fast” 或毫秒。&lt;/li&gt;
&lt;li&gt;可选的 callback 参数是显示完成后所执行的函数名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hide()&lt;/code&gt;：隐藏动画&lt;ul&gt;
&lt;li&gt;原理：&lt;code&gt;hide()&lt;/code&gt;通过改变元素的高度宽度和不透明度，直到这三个属性值到0。隐藏动画后将display设置为none。&lt;/li&gt;
&lt;li&gt;语法：&lt;code&gt;$(selector).hide(speed,callback);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;显示和隐藏是一对密不可分的动画形式。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="jQuery" scheme="https://chongtianhong.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery学习笔记（三）</title>
    <link href="https://chongtianhong.github.io/2018/02/24/jquery3/"/>
    <id>https://chongtianhong.github.io/2018/02/24/jquery3/</id>
    <published>2018-02-24T03:55:00.000Z</published>
    <updated>2018-02-27T09:06:57.729Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jQuery中DOM操作"><a href="#jQuery中DOM操作" class="headerlink" title="jQuery中DOM操作"></a>jQuery中DOM操作</h3><ul><li>DOM是一种与浏览器、平台、语言无关的接口，使用该接口可以轻松的访问页面中的所有的标准组件。</li></ul><h4 id="DOM操作的分类："><a href="#DOM操作的分类：" class="headerlink" title="DOM操作的分类："></a>DOM操作的分类：</h4><blockquote>DOM Core</blockquote><ul><li>DOM core并不专属于JavaScript，任何支持DOM的程序都可以使用。</li><li>JavaScript 中的<code>getElementById()</code>、<code>getElementsByTagName()</code>、<code>getAttribute()</code>、<code>setAttribute()</code>等方法都是DOM Core的组成部分。</li></ul><blockquote>HTML-DOM</blockquote><ul><li>HTML -DOM的出现比DOM-Core还要早，它提供一些更简明的标志来描述HTML元素的属性。</li><li>比如：使用HTML-DOM来获取某元素的src属性的方法：<code>element.src</code>。</li></ul><blockquote>CSS-DOM</blockquote><ul><li>针对CSS的操作。在JavaScript中，主要用于获取和设置style对象的各种属性，通过改变style对象的属性，使网页呈现不同的效果。<a id="more"></a></li></ul><h4 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h4><ul><li><p><code>attr()</code>方法设置或返回被选元素的属性值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        alert(<span class="string">"Image width "</span> + $(<span class="string">"img"</span>).attr(<span class="string">"width"</span>)); //返回图像的width属性</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        $(<span class="string">"img"</span>).attr(<span class="string">"width"</span>,<span class="string">"180"</span>); //设置图像的width属性</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h4><ul><li><p><code>html()</code>方法返回或设置被选元素的内容(inner HTML)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//语法：$(selector).html()</span><br><span class="line">//当使用该方法返回一个值时，它会返回第一个匹配元素的内容。</span><br><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">".btn1"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        alert($(<span class="string">"p"</span>).html()); </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//语法：$(selector).html(content)</span><br><span class="line">//当使用该方法设置一个值时，它会覆盖所有匹配元素的内容。</span><br><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">".btn1"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        $(<span class="string">"p"</span>).html(<span class="string">"Hello &lt;b&gt;world!&lt;/b&gt;"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h4><ul><li><p><code>append()</code> 方法在被选元素的结尾（仍然在内部）插入指定内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).append(<span class="string">" &lt;b&gt;Hello world!&lt;/b&gt;"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>appendTo()</code> 方法在被选元素的结尾（仍然在内部）插入指定内容（颠倒<code>append()</code>的操作）。不同之处在于：内容和选择器的位置，以及 <code>append()</code> 能够使用函数来附加内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"&lt;b&gt;Hello World!&lt;/b&gt;"</span>).appendTo(<span class="string">"p"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>prepend()</code> 方法在被选元素的开头（仍位于内部）插入指定内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".btn1"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).prepend(<span class="string">"&lt;b&gt;Hello world!&lt;/b&gt;"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>prependTo()</code> 方法在被选元素的开头（仍位于内部）插入指定内容（颠倒prepend()的操作）。不同之处在于：内容和选择器的位置，以及 <code>prepend()</code> 能够使用函数来附加内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".btn1"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"&lt;b&gt;Hello World!&lt;/b&gt;"</span>).prependTo(<span class="string">"p"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>after()</code> 方法在被选元素后插入指定的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).after(<span class="string">"&lt;p&gt;Hello world!&lt;/p&gt;"</span>); //在每个 p 元素后插入内容</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>insertAfter()</code> 方法在被选元素之后插入 HTML 标记或已有的元素（颠倒<code>after()</code>的操作）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"&lt;span&gt;Hello world!&lt;/span&gt;"</span>).insertAfter(<span class="string">"p"</span>); //在每个 p 元素之后插入 span 元素</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>before()</code> 方法在被选元素前插入指定的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).before(<span class="string">"&lt;p&gt;Hello world!&lt;/p&gt;"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>insertBefore()</code> 方法在被选元素之前插入 HTML 标记或已有的元素（颠倒<code>before()</code>的操作）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"&lt;span&gt;Hello world!&lt;/span&gt;"</span>).insertBefore(<span class="string">"p"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><ul><li>jQuery提供了三种删除节点的方法<code>remove()</code>、<code>detach()</code>、<code>empty()。</code></li><li><p><code>remove()</code>方法</p><ul><li>当某个节点用此方法删除后，该节点所包含的所有文本和子节点将同时被删除，用<code>remove()</code>方法删除后，还是可以继续使用删除后的引用。</li><li>但除了这个元素本身得以保留之外，<code>remove()</code> 不会保留元素的 jQuery 数据。其他的比如绑定的事件、附加的数据等都会被移除。这一点与 detach() 不同。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).remove();//移除所有 &lt;p&gt; 元素</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>detach()</code></p><ul><li>和<code>remove()</code>方法一样，也是从DOM中去掉所有匹配的元素，与<code>remove()</code>不同的是，<code>detach()</code> 会保留所有绑定的事件、附加的数据。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).detach();//移除所有 &lt;p&gt; 元素</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>empty()</code></p><ul><li><code>empty()</code> 方法删除匹配的元素集合中所有的子节点。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".btn1"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).empty(); //移除 p 元素，包括所有文本和子节点。</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="复制节点"><a href="#复制节点" class="headerlink" title="复制节点"></a>复制节点</h4><ul><li><code>clone()</code> 方法生成被选元素的副本，包含子节点、文本和属性。</li><li>在<code>clone()</code>方法中传递一个可选的布尔值，规定是否复制元素的所有事件处理。默认的，副本中不包含事件处理器(false)。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"body"</span>).append($(<span class="string">"p"</span>).<span class="built_in">clone</span>()); //克隆并追加一个 p 元素</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h4><ul><li><p>获取样式和设置样式 <code>attr()</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"img"</span>).attr(<span class="string">"width"</span>,<span class="string">"180"</span>); //设置图像的width属性</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>追加样式 <code>addClass()</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"p:first"</span>).addClass(<span class="string">"intro"</span>); //向第一个 p 元素添加一个类</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>移除样式 <code>removeClass()</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"p:first"</span>).removeClass(<span class="string">"intro"</span>); //从第一个 p 元素删除类</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>切换样式：</p><ul><li><code>toggle()</code>方法只要是控制行为上的重复切换（如果元素是显示的，则隐藏；如果元素原来是隐藏的，则显示）</li><li><code>toggleClass()</code>方法控制样式上的重复切换（如果类名存在，则删除它，如果类名不存在，则添加它）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).toggleClass(<span class="string">"main"</span>);//控制所有 &lt;p&gt; 元素的 <span class="string">"main"</span> 类样式上的重复切换</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>判断是否含有某个样式</p><ul><li><code>hasClass()</code>可以用来判断元素是否含有某个class,如有返回true 该方法等价于is()</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    alert($(<span class="string">"p:first"</span>).hasClass(<span class="string">"intro"</span>));//检查第一个 &lt;p&gt; 元素是否包含 <span class="string">"intro"</span> 类</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="设置和获取HTML、文本和值"><a href="#设置和获取HTML、文本和值" class="headerlink" title="设置和获取HTML、文本和值"></a>设置和获取HTML、文本和值</h4><ul><li><code>html()</code>方法<ul><li>此方法类似JavaScript中innerHTML属性，可以用来读取和设置某个元素中的HTML内容。</li></ul></li><li><p><code>text()</code>方法</p><ul><li>此方法类型JavaScript中innerText属性，用来读取和设置某个元素中的文本内容。</li><li><code>html()</code>和<code>text()</code>的区别主要在于是否包含标签</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".btn1"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).text(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>val()</code>方法</p><ul><li>此方法类似JavaScript中的value属性，用来设置获取元素的值。无论是文本框、下拉列表还是单选框，都可以返回元素的值，如果元素多选，返回一个包含所有选择的值的数组。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">":text"</span>).val(<span class="string">"Hello World"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="遍历节点"><a href="#遍历节点" class="headerlink" title="遍历节点"></a>遍历节点</h4><ul><li><p><code>children()</code>方法</p><ul><li>该方法返回被选元素的所有直接子元素。</li><li>childre()方法只考虑直接子元素而不考虑其他后代元素</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).children(); //返回每个 &lt;div&gt; 元素的所有直接子元素</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>next()</code>方法</p><ul><li>该方法用于取得匹配元素后面紧邻的同胞元素。</li><li>如果提供选择器，则取回匹配该选择器的下一个同胞元素。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).next(<span class="string">".selected"</span>).css(<span class="string">"background"</span>, <span class="string">"yellow"</span>); //查找每个段落的下一个同胞元素，仅选中类名为 <span class="string">"selected"</span> 的段落，对其设置样式</span><br></pre></td></tr></table></figure></li><li><p><code>prev()</code>方法</p><ul><li>用于获得匹配元素集合中每个元素紧邻的前一个同胞元素，通过选择器进行筛选是可选的。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).prev(<span class="string">".selected"</span>); //检索每个段落，找到类名为 <span class="string">"selected"</span> 的前一个同胞元素</span><br></pre></td></tr></table></figure></li><li><p><code>siblings()</code>方法</p><ul><li>用于获得匹配集合中每个元素的同胞，通过选择器进行筛选是可选的。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).siblings(<span class="string">".selected"</span>); //查找每个 p 元素的所有类名为 <span class="string">"selected"</span> 的所有同胞元素</span><br></pre></td></tr></table></figure></li><li><p><code>parent()</code>方法</p><ul><li>获得当前匹配元素集合中每个元素的父级元素，使用选择器进行筛选是可选的。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).parent(<span class="string">".selected"</span>); //查找每个段落的带有 <span class="string">"selected"</span> 类的父元素</span><br></pre></td></tr></table></figure></li><li><p><code>parents()</code>方法</p><ul><li>获得当前匹配元素集合中每个元素的祖先元素，使用选择器进行筛选是可选的。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"b"</span>).parents(); //查找每个 b 元素的所有祖先元素</span><br></pre></td></tr></table></figure></li></ul><h4 id="CSS-DOM操作"><a href="#CSS-DOM操作" class="headerlink" title="CSS DOM操作"></a>CSS DOM操作</h4><ul><li>CSS DOM技术简单的来说就是读取和设置style对象的各种属性。</li><li>用<code>css()方法获取元素的样式属性，可以同时设置多个样式属性。</code></li><li><p>CSS DOM中关于元素定位有几个常用的方法：</p><blockquote><code>offset()</code>方法</blockquote><ul><li>它的作用是获取元素在当前视窗的相对偏移其中返回的对象包含两个属性，即top和left，它只对可见元素有效。</li></ul><blockquote><code>position()</code>方法</blockquote><ul><li>获取相对于最近的一个position()样式属性设置为relative或者absolute的祖父节点的相对偏移，与offset()一样，他返回的对象也包括两个属性，即top和left。</li></ul><blockquote><code>scrollTop()</code>方法和<code>scrollLeft</code>方法</blockquote><ul><li>这两个方法的作用分别是获取元素的滚动条距顶端的距离和距左侧的距离。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;jQuery中DOM操作&quot;&gt;&lt;a href=&quot;#jQuery中DOM操作&quot; class=&quot;headerlink&quot; title=&quot;jQuery中DOM操作&quot;&gt;&lt;/a&gt;jQuery中DOM操作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;DOM是一种与浏览器、平台、语言无关的接口，使用该接口可以轻松的访问页面中的所有的标准组件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;DOM操作的分类：&quot;&gt;&lt;a href=&quot;#DOM操作的分类：&quot; class=&quot;headerlink&quot; title=&quot;DOM操作的分类：&quot;&gt;&lt;/a&gt;DOM操作的分类：&lt;/h4&gt;&lt;blockquote&gt;DOM Core&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;DOM core并不专属于JavaScript，任何支持DOM的程序都可以使用。&lt;/li&gt;
&lt;li&gt;JavaScript 中的&lt;code&gt;getElementById()&lt;/code&gt;、&lt;code&gt;getElementsByTagName()&lt;/code&gt;、&lt;code&gt;getAttribute()&lt;/code&gt;、&lt;code&gt;setAttribute()&lt;/code&gt;等方法都是DOM Core的组成部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;HTML-DOM&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;HTML -DOM的出现比DOM-Core还要早，它提供一些更简明的标志来描述HTML元素的属性。&lt;/li&gt;
&lt;li&gt;比如：使用HTML-DOM来获取某元素的src属性的方法：&lt;code&gt;element.src&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;CSS-DOM&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;针对CSS的操作。在JavaScript中，主要用于获取和设置style对象的各种属性，通过改变style对象的属性，使网页呈现不同的效果。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="jQuery" scheme="https://chongtianhong.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery学习笔记（二）</title>
    <link href="https://chongtianhong.github.io/2018/02/23/jquery2/"/>
    <id>https://chongtianhong.github.io/2018/02/23/jquery2/</id>
    <published>2018-02-22T16:11:16.000Z</published>
    <updated>2018-02-27T03:09:32.026Z</updated>
    
    <content type="html"><![CDATA[<h3 id="this相关问题及jQuery选择器"><a href="#this相关问题及jQuery选择器" class="headerlink" title="this相关问题及jQuery选择器"></a>this相关问题及jQuery选择器</h3><h4 id="this的相关问题"><a href="#this的相关问题" class="headerlink" title="this的相关问题"></a>this的相关问题</h4><blockquote>this指代</blockquote><ul><li>this指代<strong>当前操作的DOM对象</strong>。</li><li>在jQuery中，this可以用于单个对象，也可以用于多个对象。<a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#btn'</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    alert(this.innerHTML);  // 单个对象，this指代当前id为btn的DOM对象</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">'div'</span>).each(<span class="keyword">function</span>(index)&#123;</span><br><span class="line">    alert(this.innerHTML);  // 多个对象，this指代当前循环中索引为index的DOM对象 </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><blockquote>jQuery中的this和$(this)的区别</blockquote><ul><li>jQuery中的this指代的是<strong>DOM对象</strong>，$(this)指代的是<strong>包装当前DOM对象的jQuery对象</strong>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"div"</span>).each(<span class="keyword">function</span>(index)&#123;</span><br><span class="line">     alert($(this));  // [object Object] jQuery对象</span><br><span class="line">     alert(this);    // [object HTMLDivElement] DOM对象</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h4><ul><li>jQuery的最大贡献之一就是<strong>方便的获取DOM元素</strong>，并对DOM元素进行操作。</li></ul><blockquote>获取指定id的元素，对其进行操作：</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#info'</span>);  // 获取id为info的元素</span><br></pre></td></tr></table></figure><blockquote>获取指定class的元素，对其进行操作：</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.info'</span>);  // 获取class为info的元素</span><br></pre></td></tr></table></figure><blockquote>现有一系列具有相同className的元素，而这些元素之间没有办法互相区分彼此：</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Test&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    　　&lt;div class=<span class="string">'info'</span>&gt;0&lt;/div&gt;</span><br><span class="line">    　　&lt;div class=<span class="string">'info'</span>&gt;1&lt;/div&gt;</span><br><span class="line">    　　&lt;div class=<span class="string">'info'</span>&gt;2&lt;/div&gt;</span><br><span class="line">    　　&lt;div class=<span class="string">'info'</span>&gt;3&lt;/div&gt;</span><br><span class="line">    　　&lt;div class=<span class="string">'info'</span>&gt;4&lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li><p>获取这一系列元素中的第一个元素：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.info:first'</span>).val();  // 获取class为info的一系列元素中的第一个元素的值，即0</span><br></pre></td></tr></table></figure></li><li><p>获取这一系列元素中的最后一个元素：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.info:last'</span>).val();  // 获取class为info的一系列元素中的最后一个元素的值，即4</span><br></pre></td></tr></table></figure></li><li><p>获取这一系列元素中的任意一个元素：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.info:eq(2)'</span>).val();  // 获取class为info的一系列元素中索引为2的元素的值，即2（索引从0开始）</span><br></pre></td></tr></table></figure></li><li><p>选择符合某些条件的复数个元素：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.info:gt(1)'</span>);  // 获取class为info的一系列元素中索引大于1的对象，即2,3,4</span><br><span class="line">$(<span class="string">'.info:lt(2)'</span>);  // 获取class为info的一系列元素中索引小于2的对象，即0,1</span><br></pre></td></tr></table></figure></li><li><p>选择系列元素中索引为奇数的元素：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.info:odd'</span>);  // 获取class为info的一系列元素中索引为奇数（1,3）的对象，即1,3</span><br><span class="line">$(<span class="string">'.info:even'</span>);  // 获取class为info的一系列元素中索引为偶数（0,2,4）的对象，即0、2、4</span><br></pre></td></tr></table></figure></li><li><p>获取这一系列元素中的第一个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.info:first'</span>).val();  // 获取class为info的一系列元素中的第一个元素的值，即0</span><br></pre></td></tr></table></figure></li><li><p>获取这一系列元素中的第一个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.info:first'</span>).val();  // 获取class为info的一系列元素中的第一个元素的值，即0</span><br></pre></td></tr></table></figure></li></ul><blockquote>现有一系列链接元素，但是它们并没有唯一id标识，也没有className区分，各个元素之间仅有href是不一致的：</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Test&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        　　&lt;a&gt;0&lt;/a&gt;</span><br><span class="line">        　　&lt;a href=<span class="string">'/info'</span>&gt;1&lt;/a&gt;</span><br><span class="line">        　　&lt;a href=<span class="string">'/information'</span>&gt;2&lt;/a&gt;</span><br><span class="line">        　　&lt;a href=<span class="string">'/test'</span>&gt;3&lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li><p>选择带有href属性的a标签元素：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'a[href]'</span>);  // 选择带有href属性的a标签，即1,2,3</span><br></pre></td></tr></table></figure></li><li><p>选择href属性值为info的a标签元素：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'a[href="info"]'</span>);  // 选择href属性为info的a标签，即1</span><br></pre></td></tr></table></figure></li><li><p>选择href属性值以info开头的a标签元素：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'a[href^="info"]'</span>);  // 选择带有href属性值已info开头的a标签，即1,2</span><br></pre></td></tr></table></figure></li><li><p>选择href属性值已tion结尾的a标签元素：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'a[href$="tion"]'</span>);  // 选择带有href属性值已tion结尾的a标签，即2</span><br></pre></td></tr></table></figure></li><li><p>选择href属性值中有fo字段的a标签元素：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'a[href*="fo"]'</span>);  // 选择带有href属性值中包含fo的a标签，即1,2</span><br></pre></td></tr></table></figure></li><li><p>也可以进行反选，选择href属性值中不包含info的a标签元素：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'a[href!="info"]'</span>);  // 选择带有href属性值中不包含info的a标签，即3</span><br></pre></td></tr></table></figure></li></ul><blockquote>根据DOM元素的内容来选择合适的元素：</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div:contains("info")'</span>); // 选择div标签中内容包含info字段的元素</span><br></pre></td></tr></table></figure><blockquote>根据DOM元素之间的关系来确定元素：</blockquote><ul><li>同级元素：即当前元素处于同一层级。</li><li>父级元素：即当前元素的直属上层元素。</li><li>祖先元素：即当前元素的所有上层元素。</li><li>子级元素：即当前元素的直属子层元素。</li><li><p>后代元素：即当前元素的所有子层元素。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;p&gt;0&lt;/p&gt;  // 当前两个标签为p的元素处于同一层级，属于同级元素</span><br><span class="line">    &lt;p&gt;1&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">'ancestor'</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">'father'</span>&gt;  // 标签为p的元素的父级元素是id为father的元素，祖先元素为id为father和ancestor的元素</span><br><span class="line">          &lt;p&gt;&lt;span&gt;0&lt;/span&gt;&lt;/p&gt;  // id为father的元素的子级元素是标签为p的元素，后代元素为标签为p与标签为span的元素  </span><br><span class="line">          &lt;p&gt;1&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>现在有如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">    &lt;label&gt;Name:&lt;/label&gt;</span><br><span class="line">    &lt;input name=<span class="string">"name"</span> /&gt;</span><br><span class="line">    &lt;fieldset&gt;</span><br><span class="line">        &lt;label&gt;Newsletter:&lt;/label&gt;</span><br><span class="line">        &lt;input name=<span class="string">"firstletter"</span> /&gt;</span><br><span class="line">　　　　 &lt;input name=<span class="string">"secondletter"</span> /&gt;</span><br><span class="line">    &lt;/fieldset&gt;</span><br><span class="line">    &lt;input name=<span class="string">"none"</span> /&gt; </span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></li><li><p>选择标签为form的所有子级input元素：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'form&gt;input'</span>); // 选择标签为from的元素下的所有标签为input的子级元素，即name=“name”，name=“none”的元素</span><br></pre></td></tr></table></figure></li><li><p>选择标签为form的所有的后代input元素：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'form input'</span>); // 选择标签为from的元素下的所有标签为input的后代元素，即name=“name”，name=“none”，name=“firstletter”，name=“secondletter”的元素</span><br></pre></td></tr></table></figure></li><li><p>选择符合条件的同级元素（同级元素中的第一个）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'label+input'</span>); // 选择标签为label的同级元素中，标签为input的元素中的第一个，即name=“name”，name=“firstletter”的元素</span><br></pre></td></tr></table></figure></li><li><p>选择所有符合条件的同级元素：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'label~input'</span>); // 选择标签为label的同级元素中，所有标签为input的元素，即name=“name”，name=“firstletter”，name=“secondletter”，name=“none”的元素</span><br></pre></td></tr></table></figure></li><li><p>选择后代元素中包含选定元素的元素：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div:has(span)'</span>) // 选择所有后代元素中包含span元素的div元素</span><br></pre></td></tr></table></figure></li></ul><h4 id="选择器总结"><a href="#选择器总结" class="headerlink" title="选择器总结"></a>选择器总结</h4><h5 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#info'</span>);  　　　　　 // 选择id为info的元素，id为document中是唯一的，因此可以通过该选择器获取唯一的指定元素</span><br><span class="line">$(<span class="string">'.infoClass'</span>);  　　 // 选择class为infoClass的所有元素</span><br><span class="line">$(<span class="string">'div'</span>);  　　　　  // 选择标签名为div的所有的元素</span><br><span class="line">$(<span class="string">'*'</span>);   　　　　　　// 选择所有标签元素</span><br></pre></td></tr></table></figure><h5 id="基本过滤器"><a href="#基本过滤器" class="headerlink" title="基本过滤器"></a>基本过滤器</h5><ul><li>基本选择器获取的元素集合，通过过滤器的筛选，使选择更加精确。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.infoClass:first'</span>);    // 选择class为infoClass的所有元素集合，并筛选集合中的第一个元素</span><br><span class="line">$(<span class="string">'.infoClass:last'</span>);     // 选择class为infoClass的所有元素集合，并筛选集合中的最后一个元素</span><br><span class="line">$(<span class="string">'.infoClass:odd'</span>);      // 选择class为infoClass的所有元素集合，并筛选集合中索引为奇数的元素，如1,3,5</span><br><span class="line">$(<span class="string">'.infoClass:even'</span>);     // 选择class为infoClass的所有元素集合，并筛选集合中索引为偶数的元素，如0,2,4</span><br><span class="line">$(<span class="string">'.infoClass:eq(2)'</span>);    // 选择class为infoClass的所有元素集合，并筛选集合中索引为2的元素</span><br><span class="line">$(<span class="string">'.infoClass.lt(2)'</span>);    // 选择class为infoClass的所有元素集合，并筛选集合中索引小于2的元素集合</span><br><span class="line">$(<span class="string">'.infoClass.gt(2)'</span>);    // 选择class为infoClass的所有元素集合，并筛选集合中索引大于2的元素集合</span><br></pre></td></tr></table></figure><h5 id="内容过滤器"><a href="#内容过滤器" class="headerlink" title="内容过滤器"></a>内容过滤器</h5><ul><li>jQery准备了内容过滤器用于对选择的元素集合内容进行过滤。</li><li>统一名称：<ul><li>空元素：不包含任何后代元素或文本内容的元素，如<div></div></li><li>非空元素：包含后代元素或者包含文本内容的元素</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div:contains("info")'</span>);     // 选择标签为div的所有元素集合，并筛选集合中文本内容包含info字段的元素</span><br><span class="line">$(<span class="string">'div:empty'</span>);                // 选择标签为div的所有元素集合，并筛选集合中所有空元素</span><br><span class="line">$(<span class="string">'div:parent'</span>);              // 选择标签为div的所有元素集合，并筛选集合中所有非空元素</span><br><span class="line">$(<span class="string">'div:has(p)'</span>);               // 选择标签为div的所有元素集合，并筛选集合中后代元素含有p标签的元素</span><br></pre></td></tr></table></figure><h5 id="可视化过滤器"><a href="#可视化过滤器" class="headerlink" title="可视化过滤器"></a>可视化过滤器</h5><ul><li>对于元素是否可见，jQuery也进行了处理。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div:visible'</span>);            // 选择标签为div的所有元素集合，并筛选集合中可见的元素</span><br><span class="line">$(<span class="string">'div:hidden'</span>);             // 选择标签为div的所有元素集合，并筛选集合中不可见的元素</span><br></pre></td></tr></table></figure><h5 id="属性过滤器"><a href="#属性过滤器" class="headerlink" title="属性过滤器"></a>属性过滤器</h5><ul><li>不同元素之间，拥有不同的属性参数，jQuery允许通过参数进行过滤。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'input[placeholder]'</span>);               // 选择所有标签为input的元素集合，并筛选包含placeholder属性的元素</span><br><span class="line">$(<span class="string">'input[placeholder="info"]'</span>);        // 选择所有标签为input的元素集合，并筛选placeholder属性值为info的元素</span><br><span class="line">$(<span class="string">'input[placeholder^="info"]'</span>);       // 选择所有标签为input的元素集合，并筛选placeholder属性值以info开头的元素</span><br><span class="line">$(<span class="string">'input[placeholder$="tion"]'</span>);       // 选择所有标签为input的元素集合，并筛选placeholder属性值以tion结尾的元素</span><br><span class="line">$(<span class="string">'input[placeholder*="mat"]'</span>);        // 选择所有标签为input的元素集合，并筛选placeholder属性值中包含字段mat的元素</span><br><span class="line">$(<span class="string">'input[id][placeholder*="mat"]'</span>);    // 选择所有标签为input的元素集合，并筛选包含id属性并且placeholder属性值中包含字段mat的元素</span><br></pre></td></tr></table></figure><h5 id="子元素过滤器"><a href="#子元素过滤器" class="headerlink" title="子元素过滤器"></a>子元素过滤器</h5><ul><li>这个比较容易混淆，进行对比总结。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;John&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;Karl&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;Brandon&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;Glen&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;Tane&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;Ralph&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'ul li:first-child'</span>).css(<span class="string">'background-color'</span>, <span class="string">'red'</span>);   // 选择每一个ul标签下的li元素集合中的第一个</span><br><span class="line"></span><br><span class="line">$(<span class="string">'ul li:first'</span>).css(<span class="string">'background-color'</span>, <span class="string">'red'</span>);   // 选择所有ul标签下的li元素集合中的第一个</span><br><span class="line"></span><br><span class="line">$(<span class="string">'ul li:last-child'</span>);   // 选择每一个ul标签下的li元素集合中的最后一个</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p:nth-child(3)"</span>); //选取属于其父元素的第三个子元素的每个&lt;p&gt; 元素</span><br></pre></td></tr></table></figure><h5 id="关系选择器"><a href="#关系选择器" class="headerlink" title="关系选择器"></a>关系选择器</h5><ul><li>同级元素：即当前元素处于同一层级。</li><li>父级元素：即当前元素的直属上层元素。</li><li>祖先元素：即当前元素的所有上层元素。</li><li>子级元素：即当前元素的直属子层元素。</li><li>后代元素：即当前元素的所有子层元素。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'form input'</span>);           // 选择所有标签为form的元素中，后代元素标签为input的元素</span><br><span class="line">$(<span class="string">'form&gt;input'</span>);           // 选择所有标签为form的元素中，子级元素标签为input的元素</span><br><span class="line">$(<span class="string">'label+input'</span>);          // 选择所有标签为label的同级元素中，标签为input的元素集合中的第一个</span><br><span class="line">$(<span class="string">'label~input'</span>);          // 选择所有标签为label的同级元素中，标签为input的元素集合</span><br></pre></td></tr></table></figure><h5 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h5><ul><li>方便表单元素的选择。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">':input'</span>);                // 选择所有表单输入元素，包括input，textarea，select</span><br><span class="line">$(<span class="string">':text'</span>);                 // 选择所有的<span class="built_in">type</span>为text的input元素</span><br><span class="line">$(<span class="string">':password'</span>);             // 选择所有的<span class="built_in">type</span>为password的input元素</span><br><span class="line">$(<span class="string">':radio'</span>);                // 选择所有的<span class="built_in">type</span>为radio的input元素 </span><br><span class="line">$(<span class="string">':checkbox'</span>);             // 选择所有的<span class="built_in">type</span>为checkbox的input元素 </span><br><span class="line">$(<span class="string">':submit'</span>);               // 选择所有的<span class="built_in">type</span>为submit的input元素 </span><br><span class="line">$(<span class="string">':image'</span>);                // 选择所有的<span class="built_in">type</span>为image的input元素 </span><br><span class="line">$(<span class="string">':reset'</span>);                // 选择所有的<span class="built_in">type</span>为reset的input元素 </span><br><span class="line">$(<span class="string">':button'</span>);               // 选择所有的<span class="built_in">type</span>为button的input元素 </span><br><span class="line">$(<span class="string">':file'</span>);                 // 选择所有的<span class="built_in">type</span>为file的input元素 </span><br><span class="line">$(<span class="string">':hidden'</span>);               // 选择所有类型为hidden的input元素或表单的隐藏域</span><br></pre></td></tr></table></figure><ul><li>表单元素过滤器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">':enabled'</span>);                  // 选择所有的可操作的表单元素 </span><br><span class="line">$(<span class="string">':disabled'</span>);                 // 选择所有的不可操作的表单元素 </span><br><span class="line">$(<span class="string">':checked'</span>);                  // 选择所有的被checked的表单元素 </span><br><span class="line">$(<span class="string">'select option:selected'</span>);    // 选择所有的select 的子元素中被selected的元素</span><br></pre></td></tr></table></figure><h5 id="对比总结"><a href="#对比总结" class="headerlink" title="对比总结"></a>对比总结</h5><ul><li>为了方便记忆，将功能相关的选择器进行总结：</li></ul><ol><li><p>$(‘#id’)与$(‘.calss’)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#id'</span>);  　　　　　 // 根据id选择元素</span><br><span class="line">$(<span class="string">'.class'</span>);  　　   // 根据class选择元素</span><br></pre></td></tr></table></figure></li><li><p>$(‘div:first’)与$(‘div:last’)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div:first'</span>);     // 选择div元素集合中的第一个  </span><br><span class="line">$(<span class="string">'div:last'</span>);      // 选择div元素集合中的最后一个</span><br></pre></td></tr></table></figure></li><li><p>$(‘div:odd’)与$(‘div:even’)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div:odd'</span>);       // 选择div元素集合中的奇数个元素  </span><br><span class="line">$(<span class="string">'div:even'</span>);      // 选择div元素集合中的偶数个元素</span><br></pre></td></tr></table></figure></li><li><p>$(‘div:gt(i)’)与$(‘div:lt(i)’)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div:gt(i)'</span>);       // 选择div元素集合中索引大于i的元素  </span><br><span class="line">$(<span class="string">'div:lt(i)'</span>);       // 选择div元素集合中索引小于i的元素</span><br></pre></td></tr></table></figure></li><li><p>$(‘div:empty’)与$(‘div:parent’)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div:empty'</span>);        // 选择div元素集合中空元素</span><br><span class="line">$(<span class="string">'div:parent'</span>);       // 选择div元素集合中非空元素</span><br></pre></td></tr></table></figure></li><li><p>$(‘div:visible’)与$(‘div:hidden’)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div:visible'</span>);      // 选择div元素集合中可见元素</span><br><span class="line">$(<span class="string">'div:hidden'</span>);       // 选择div元素集合中隐藏元素</span><br></pre></td></tr></table></figure></li><li><p>$(‘ul li:first’)与$(‘ul li:first-child’)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'ul li:first'</span>);             // 选择所有ul后代元素li元素集合中的第一个</span><br><span class="line">$(<span class="string">'ul li:first-child'</span>);       // 选择每个ul后代元素li元素集合中的第一个</span><br></pre></td></tr></table></figure></li><li><p>$(‘:disable’)与$(‘:enable’)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">':disable'</span>);             // 选择所有可以操作的表单元素</span><br><span class="line">$(<span class="string">':enable'</span>);              // 选择所有不可以操作的表单元素</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;this相关问题及jQuery选择器&quot;&gt;&lt;a href=&quot;#this相关问题及jQuery选择器&quot; class=&quot;headerlink&quot; title=&quot;this相关问题及jQuery选择器&quot;&gt;&lt;/a&gt;this相关问题及jQuery选择器&lt;/h3&gt;&lt;h4 id=&quot;this的相关问题&quot;&gt;&lt;a href=&quot;#this的相关问题&quot; class=&quot;headerlink&quot; title=&quot;this的相关问题&quot;&gt;&lt;/a&gt;this的相关问题&lt;/h4&gt;&lt;blockquote&gt;this指代&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;this指代&lt;strong&gt;当前操作的DOM对象&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在jQuery中，this可以用于单个对象，也可以用于多个对象。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="jQuery" scheme="https://chongtianhong.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery学习笔记（一）</title>
    <link href="https://chongtianhong.github.io/2018/02/22/jquery/"/>
    <id>https://chongtianhong.github.io/2018/02/22/jquery/</id>
    <published>2018-02-21T16:05:22.000Z</published>
    <updated>2018-02-22T16:14:53.923Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jQuery概述"><a href="#jQuery概述" class="headerlink" title="jQuery概述"></a>jQuery概述</h3><h4 id="jQuery概念"><a href="#jQuery概念" class="headerlink" title="jQuery概念"></a>jQuery概念</h4><ul><li><p>JavaScript：基于JS语言的API和语法组织逻辑，通过内置window和document对象，来<strong>操作内存中的DOM元素</strong>，同时能用来<strong>动态操作样式css</strong>、<strong>数据访问</strong>、<strong>控制响应事件</strong>等。</p><a id="more"></a><ul><li>不使用JQuery（使用JavaScript）时获取DOM文本的操作如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(<span class="string">'info'</span>).value = <span class="string">'Hello World!'</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>JQuery是基于JavaScript的，与JS作用一样，在<strong>使代码更加简练</strong>的同时<strong>提高了代码的效率</strong>。</p><ul><li>使用JQuery时获取DOM文本操作如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#info'</span>).val(<span class="string">'Hello World!'</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>可以看出，使用JQuery的优势之一是可以使代码更加简练，使开发人员更加专注于逻辑本身。</p></li></ul><h4 id="jQuery是什么"><a href="#jQuery是什么" class="headerlink" title="jQuery是什么"></a>jQuery是什么</h4><ul><li><strong>jQuery</strong>是一个快速简洁的JavaScript代码仓库，称为<strong>JavaScript框架</strong>。</li><li>jQuery可以<strong>简化查询DOM对象</strong>、<strong>处理事件</strong>、<strong>制作动画</strong>、<strong>处理Ajax交互过程</strong>。</li><li>jQuery的优势：<ul><li>轻量级、体积小，使用灵巧(只需引入一个js文件)</li><li>强大的选择器</li><li>出色的DOM操作的封装</li><li>出色的浏览器兼容性</li><li>可靠的事件处理机制</li><li>完善的Ajax</li><li>链式操作、隐式迭代</li><li>方便的选择页面元素(模仿CSS选择器更精确、灵活)</li><li>动态更改页面样式/页面内容(操作DOM，动态添加、移除样式)</li><li>控制响应事件(动态添加响应事件)</li><li>提供基本网页特效(提供已封装的网页特效方法)</li><li>快速实现通信(ajax)</li><li>易扩展、插件丰富</li></ul></li></ul><h4 id="jQuery包的引入"><a href="#jQuery包的引入" class="headerlink" title="jQuery包的引入"></a>jQuery包的引入</h4><ul><li>jQuery可以使用 HTML 的<code>&lt;script&gt;</code>标签引入。<ul><li>引入本地的JQuery</li><li>引入Google在线提供的库文件（稳定可靠高速）</li><li>使用Google提供的API导入</li></ul></li></ul><h4 id="讲解-function"><a href="#讲解-function" class="headerlink" title="讲解$(function(){})"></a>讲解$(function(){})</h4><ul><li>在JQuery库中，<strong>$是JQuery的别名</strong>，$()等效于就jQuery()。</li><li>$(function(){});相当于页面初始化函数，当页面加载完毕，会执行jQuery()。</li><li>希望在做所有事情之前，<strong>jQuery操作DOM文档</strong>。<strong>必须确保在DOM载入完毕后开始执行</strong>，应该用ready事件做处理HTML文档的开始。</li><li><code>$(document).ready(function(){});</code><ul><li>类似于js的window.onload事件函数，但是ready事件要先于onload事件执行</li><li>window.onload = function(){};</li></ul></li><li>jQuery的ready事件不等于JS的onload事件：<ul><li>执行时机不同：load需要等外部图片和视频等全部加载才执行。ready是DOM绘制完毕后执行，先与外部文件。</li><li>用法不同：load只可写一次，ready可以多次。</li></ul></li></ul><h4 id="window-onload与-document-ready-对比"><a href="#window-onload与-document-ready-对比" class="headerlink" title="window.onload与$(document).ready()对比"></a>window.onload与$(document).ready()对比</h4><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">window.onload</th><th style="text-align:center">$(document).ready()</th></tr></thead><tbody><tr><td style="text-align:center">执行时机</td><td style="text-align:center">必须等网页中所有内容加载完后(包括图片)才执行</td><td style="text-align:center">网页中的DOM结构绘制完后就执行,可能DOM元素相关的东西并没有加载完</td></tr><tr><td style="text-align:center">编写个数</td><td style="text-align:center">不能同时执行多个</td><td style="text-align:center">能同时执行多个</td></tr><tr><td style="text-align:center">简化写法</td><td style="text-align:center">无</td><td style="text-align:center">$(function(){ });</td></tr></tbody></table><h4 id="jQuery有哪些功能-API"><a href="#jQuery有哪些功能-API" class="headerlink" title="jQuery有哪些功能(API)"></a>jQuery有哪些功能(API)</h4><ul><li>选择器</li><li>过滤器</li><li>事件</li><li>效果</li><li>ajax</li></ul><h4 id="jQuery基本选择器"><a href="#jQuery基本选择器" class="headerlink" title="jQuery基本选择器"></a>jQuery基本选择器</h4><ul><li>jQuery基本选择器可分为<strong>ID选择器</strong>，<strong>标签选择器</strong>，<strong>类选择器</strong>，<strong>通配选择器</strong>和<strong>组选择器</strong>5种。<ul><li><code>ID选择器</code>：document.getElementById(id)与$(“#id”)对比<br>id唯一，返回单个元素。</li><li><code>标签选择器</code>：document.getElementsByTagName(tagName)与$(“tagname”)对比<br>多个标签，返回数组。</li><li><code>类选择器</code>:$(“.className”)<br>多个classname（改变背景图片）。</li><li><code>通配选择器</code>：document.getElementsByTagName(“*“)与$(“*“)对比<br>指范围内的所有标签元素。</li><li><code>组选择器</code>：$(“seletor1,seletor2,seletor3”)<br>无数量限制，用逗号分割。</li></ul></li></ul><h3 id="初步了解jQuery"><a href="#初步了解jQuery" class="headerlink" title="初步了解jQuery"></a>初步了解jQuery</h3><h4 id="jQuery的优势"><a href="#jQuery的优势" class="headerlink" title="jQuery的优势"></a>jQuery的优势</h4><ul><li>使用jQuery可以<strong>方便DOM的选取和操作</strong>、<strong>响应用户操作</strong>、<strong>简化AJax操作</strong>。<ul><li>方便的选取DOM元素，操作DOM元素。（HTML元素选取、HTML元素操作、获取DOM元素、动态修改页面样式、动态改变DOM内容）</li><li>响应用户操作。（HTML事件函数、JavaScript特效和动画、响应用户的交互操作、为页面添加动态效果）</li><li>简化AJAX操作。（方便地为网站提供AJAX交互、统一Ajax操作）</li></ul></li></ul><h4 id="jQuery与DOM之间的关系"><a href="#jQuery与DOM之间的关系" class="headerlink" title="jQuery与DOM之间的关系"></a>jQuery与DOM之间的关系</h4><ul><li><p><strong>jQuery对象</strong>就是用jQuery包装DOM之后产生的对象。jQuery对象是<strong>jQuery独有</strong>的，可以<strong>使用jQuery的各种方法</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#test"</span>).html();</span><br><span class="line">//获取ID为<span class="built_in">test</span>的元素内的html代码。</span><br><span class="line">//其中html()是jQuery里的方法 。</span><br></pre></td></tr></table></figure></li><li><p>以上代码的作用等同于用DOM实现代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(<span class="string">"id"</span>).innerHTML;</span><br></pre></td></tr></table></figure></li><li><p>虽然<strong>jQuery对象是包装DOM对象后产生的</strong>，但是<strong>jQuery无法使用DOM对象的任何方法</strong>，同理<strong>DOM对象也不能使用jQuery里的方法</strong>。</p></li><li>用#id作为选择器获取得的是<strong>jQuery对象</strong>，document.getElementById(“id”)得到的<strong>DOM对象</strong>，这两者并<strong>不等价</strong>。</li></ul><h4 id="jQuery与DOM之间的相互转换"><a href="#jQuery与DOM之间的相互转换" class="headerlink" title="jQuery与DOM之间的相互转换"></a>jQuery与DOM之间的相互转换</h4><ul><li><p>DOM对象才能使用DOM中的方法，<strong>jQuery对象</strong>是<strong>不可以用DOM中的方法</strong>。</p><blockquote>JQuery对象 -&gt; DOM对象</blockquote></li><li><p>将一个JQuery对象转换成DOM对象有<strong>两种转换方法</strong>：[index]和.get(index);</p><ol><li><p>jQuery对象是一个数据对象，可以通过[index]的方法，来得到相应的DOM对象。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var v1 = $(<span class="string">"#test"</span>) ; //jQuery对象</span><br><span class="line">var v2 = <span class="variable">$v1</span>[0]; //DOM对象</span><br></pre></td></tr></table></figure></li><li><p>通过.get(index)方法，得到相应的DOM对象。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var v1 = $(<span class="string">"#test"</span>); //jQuery对象</span><br><span class="line">var v2 = v1.get(0); //DOM对象</span><br></pre></td></tr></table></figure></li></ol></li></ul><blockquote>DOM对象 -&gt; JQuery对象</blockquote><ul><li>对于已经是一个DOM对象，只需要用$()把DOM对象包装起来，就可以获得一个jQuery对象。<ul><li>如$(document.getElementById(“test”))。</li></ul></li><li>DOM对象转换为JQuery对象之后就可以使用JQuery的方法了。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var v1=document.getElementById(<span class="string">"test"</span>); //DOM对象</span><br><span class="line">var v2=$(v1); //jQuery对象</span><br></pre></td></tr></table></figure></li></ul><h4 id="jQuery中“-”的作用"><a href="#jQuery中“-”的作用" class="headerlink" title="jQuery中“$”的作用"></a>jQuery中“$”的作用</h4><ul><li><p>$其实就是jQuery的别称。是jQuery提供的一个函数，用来将DOM元素、选择器包装成jQuery对象。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var v1 = $(<span class="string">'#id'</span>);</span><br><span class="line">var v2 = jQuery(<span class="string">'#id'</span>);//两者是等同的</span><br></pre></td></tr></table></figure></li><li><p>“$”其实是一个符号，$()代替了jQuery(),也可以使用其他的字符来代替”$”。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var jq = jQuery.noConflict();//使用jq来代替<span class="string">"$"</span>。</span><br><span class="line">var v1 = jq(<span class="string">'#id'</span>); // 等同于var v1 = $(<span class="string">'#id'</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;jQuery概述&quot;&gt;&lt;a href=&quot;#jQuery概述&quot; class=&quot;headerlink&quot; title=&quot;jQuery概述&quot;&gt;&lt;/a&gt;jQuery概述&lt;/h3&gt;&lt;h4 id=&quot;jQuery概念&quot;&gt;&lt;a href=&quot;#jQuery概念&quot; class=&quot;headerlink&quot; title=&quot;jQuery概念&quot;&gt;&lt;/a&gt;jQuery概念&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JavaScript：基于JS语言的API和语法组织逻辑，通过内置window和document对象，来&lt;strong&gt;操作内存中的DOM元素&lt;/strong&gt;，同时能用来&lt;strong&gt;动态操作样式css&lt;/strong&gt;、&lt;strong&gt;数据访问&lt;/strong&gt;、&lt;strong&gt;控制响应事件&lt;/strong&gt;等。&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="jQuery" scheme="https://chongtianhong.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>HTTP知识点总结</title>
    <link href="https://chongtianhong.github.io/2018/02/21/http/"/>
    <id>https://chongtianhong.github.io/2018/02/21/http/</id>
    <published>2018-02-21T15:45:24.000Z</published>
    <updated>2018-02-22T06:34:48.230Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTTP简介"><a href="#HTTP简介" class="headerlink" title="HTTP简介"></a>HTTP简介</h3><ul><li>超文本传输协议（Hyper Text Transfer Protocol, HTTP）是用于从万维网（WWW:World Wide Web）<strong>服务器传输超文本到本地浏览器</strong>的<strong>应用层传送协议</strong>。它被设计用于<strong>Web浏览器</strong>和<strong>Web服务器</strong>之间的<strong>通信</strong>，但它也可以用于其他目的。 </li><li>HTTP是一个<strong>基于TCP/IP通信协议</strong>来传递数据（HTML 文件, 图片文件, 查询结果等）。一个完整的web文档是由不同的子文档重新组建而成的，例如文本、布局描述、图片、视频、脚本等。</li><li>HTTP是一个属于<strong>应用层的面向对象的协议</strong>，由于其简捷、快速的方式，适用于分布式超媒体信息系统。<a id="more"></a></li><li>HTTP遵循经典的<strong>客户端-服务端模型</strong>。浏览器作为<strong>HTTP客户端</strong>通过URL向<strong>HTTP服务端即WEB服务器</strong>发送所有请求。<strong>Web服务器</strong>根据接收到的请求后，向<strong>客户端</strong>发送响应信息。（请求通常是由像浏览器这样的接受方发起的。）</li><li>客户端和服务端通过交换各自的消息（与数据流正好相反）来进行交互。通常由像浏览器这样的<strong>客户端发出的消息叫做requests</strong>，那么<strong>被服务端回应的消息就叫做 responses</strong>。<br><img src="/images/csModel.jpg" width="600" alt="http请求-响应模型" style="border:none"></li><li>HTTP是<strong>无状态</strong>协议，意味着<strong>服务器不会在两个请求之间保留任何数据（状态）</strong>。</li><li>它是<strong>应用层</strong>的协议，虽然理论上它可以通过任何可靠的传输协议来发送，但是它还是通过<strong>TCP</strong>，或者是TLS－加密的TCP连接来发送。（由于UDP不可靠，不使用UDP）</li><li>要渲染出一个网页，浏览器首先要发送第一个请求来获取这个页面的HTML文档，再解析它并根据文档中的资源信息发送其他的请求来获取脚本信息，或者CSS来进行页面布局渲染，还有一些其它的页面资源（如图片和视频等）。然后，它把这些资源结合到一起，展现出来一个完整的文档，也就是网页。打开一个网页后，浏览器还可以根据脚本内容来获取更多的资源来更新网页。</li></ul><h3 id="HTTP-的基本性质"><a href="#HTTP-的基本性质" class="headerlink" title="HTTP 的基本性质"></a>HTTP 的基本性质</h3><h4 id="1-简单快速："><a href="#1-简单快速：" class="headerlink" title="1. 简单快速："></a>1. 简单快速：</h4><ul><li>客户向服务器<strong>请求服务时，只需传送请求方法和路径</strong>。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于<strong>HTTP协议简单</strong>，使得<strong>HTTP服务器的程序规模小</strong>，因而<strong>通信速度很快</strong>。</li></ul><h4 id="2-可扩展："><a href="#2-可扩展：" class="headerlink" title="2. 可扩展："></a>2. 可扩展：</h4><ul><li>在 HTTP/1.0 中出现的<strong>HTTP headers让协议扩展变得非常容易</strong>。只要服务端和客户端就新 headers 达成语义一致，新功能就可以被轻松加入进来。</li></ul><h4 id="3-灵活："><a href="#3-灵活：" class="headerlink" title="3. 灵活："></a>3. 灵活：</h4><ul><li>HTTP允许<strong>传输任意类型的数据对象</strong>。正在传输的类型由Content-Type加以标记。</li></ul><h4 id="4-无状态，有会话："><a href="#4-无状态，有会话：" class="headerlink" title="4. 无状态，有会话："></a>4. 无状态，有会话：</h4><ul><li>HTTP协议本质是无状态协议，使用Cookies可以创建有状态的会话。<ul><li>无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li><li>使用<strong>HTTP的头部扩展</strong>，HTTP Cookies就可以解决HTTP无状态的问题。<strong>把Cookies添加到头部</strong>中，创建一个会话让每次请求都能共享相同的上下文信息，达成相同的状态。</li></ul></li></ul><h4 id="5-无连接："><a href="#5-无连接：" class="headerlink" title="5. 无连接："></a>5. 无连接：</h4><ul><li>无连接的含义是<strong>限制每次连接只处理一个请求</strong>。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</li></ul><h3 id="HTTP-URL"><a href="#HTTP-URL" class="headerlink" title="HTTP URL"></a>HTTP URL</h3><ul><li>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。</li><li>统一资源定位符（Uniform Resource Locator, URL）是互联网上用来标识某一处资源的地址。URL是一种特殊类型的URI，包含了用于查找某个资源的足够的信息。</li><li>以下面这个URL为例，介绍下普通URL的各部分组成：<br><code><a href="http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name" target="_blank" rel="noopener">http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</a></code></li><li>从上面的URL可以看出，一个完整的URL包括以下几部分：<br>1.<code><strong>协议</strong>部分</code>：该URL的协议部分为“http:”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在”HTTP”后面的“//”为分隔符。<br>2.<code><strong>域名</strong>部分</code>：该URL的域名部分为“www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用。<br>3.<code><strong>端口</strong>部分</code>：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口<br>4.<code><strong>虚拟目录</strong>部分</code>：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/”。<br>5.<code><strong>文件名</strong>部</code>分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名。<br>6.<code><strong>参数</strong>部分</code>：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。<br>7.<code><strong>锚</strong>部分</code>：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分。</li></ul><h3 id="URI和URL的区别"><a href="#URI和URL的区别" class="headerlink" title="URI和URL的区别"></a>URI和URL的区别</h3><h4 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h4><blockquote>统一资源标识符（URI）用来唯一的标识一个资源。</blockquote><ul><li>Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个来URI来定位的。</li><li>URI一般由三部组成：<br>①访问资源的命名机制<br>②存放资源的主机名<br>③资源自身的名称，由路径表示，着重强调于资源</li></ul><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><blockquote>统一资源定位器（URL）是一种具体的URI，可以用来标识一个资源，而且指明了如何定位这个资源。</blockquote><ul><li>URL是Internet上用来描述信息资源的字符串，主要用在各种WWW客户程序和服务器程序上，特别是著名的Mosaic。</li><li>采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。URL一般由三部组成：<br>①协议(或称为服务方式)<br>②存有该资源的主机IP地址(有时也包括端口号)<br>③主机资源的具体地址。如目录和文件名等</li></ul><h4 id="URN"><a href="#URN" class="headerlink" title="URN"></a>URN</h4><blockquote>统一资源命名（uniform resource name，URN）通过名字来标识资源，比如mailto:java-net@java.sun.com。</blockquote><ul><li>URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。URL和URN都是一种URI。</li><li>每个 URL 都是 URI，但不一定每个 URI 都是 URL。因为 URI 还包括一个子类，即统一资源名称 (URN)，它命名资源但不指定如何定位资源。上面的 mailto、news 和 isbn URI 都是 URN 的示例。</li></ul><h3 id="HTTP-报文"><a href="#HTTP-报文" class="headerlink" title="HTTP 报文"></a>HTTP 报文</h3><ul><li>有两种HTTP报文的类型，<strong>请求报文</strong>与<strong>响应报文</strong>，每种都有其特定的格式。</li></ul><h4 id="HTTP-请求消息Request"><a href="#HTTP-请求消息Request" class="headerlink" title="HTTP 请求消息Request"></a>HTTP 请求消息Request</h4><ul><li>客户端发送一个HTTP请求到服务器的请求消息包括以下格式：<br><code>请求行（request line）</code>、<code>请求头部（header）</code>、<code>空行</code>和<code>请求数据</code>四个部分组成。<br><img src="/images/request.png" width="400" alt="Http请求消息结构" style="border:none"></li><li>请求行以一个方法符号开头，以空格分开，后面跟着请求的URI和协议的版本。</li></ul><blockquote>Get请求例子，使用Charles抓取的request：</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /562f25980001b1b106000338.jpg HTTP/1.1</span><br><span class="line">Host    img.mukewang.com</span><br><span class="line">User-Agent    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36</span><br><span class="line">Accept    image/webp,image/*,*/*;q=0.8</span><br><span class="line">Referer    http://www.imooc.com/</span><br><span class="line">Accept-Encoding    gzip, deflate, sdch</span><br><span class="line">Accept-Language    zh-CN,zh;q=0.8</span><br><span class="line"></span><br><span class="line">//请求数据为空</span><br></pre></td></tr></table></figure><ul><li>第一部分：请求行，用来说明请求类型，要访问的资源以及所使用的HTTP版本。<ul><li>GET说明请求类型为GET，[/562f25980001b1b106000338.jpg]为要访问的资源，该行的最后一部分说明使用的是HTTP1.1版本。</li></ul></li><li>第二部分：请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息。<ul><li>从第二行起为请求头部，HOST将指出请求的目的地。User-Agent，服务器端和客户端脚本都能访问它，它是浏览器类型检测逻辑的重要基础。该信息由你的浏览器来定义，并且在每个请求中自动发送等等。</li></ul></li><li>第三部分：空行，请求头部后面的空行是必须的。<ul><li>即使第四部分的请求数据为空，也必须有空行。</li></ul></li><li>第四部分：请求数据也叫主体，可以添加任意的其他数据。<ul><li>这个例子的请求数据为空。</li></ul></li></ul><blockquote>POST请求例子，使用Charles抓取的request：</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP1.1</span><br><span class="line">Host:www.wrox.com</span><br><span class="line">User-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)</span><br><span class="line">Content-Type:application/x-www-form-urlencoded</span><br><span class="line">Content-Length:40</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line"></span><br><span class="line">name=Professional%20Ajax&amp;publisher=Wiley</span><br></pre></td></tr></table></figure><ul><li>第一部分：请求行，第一行明了是post请求，以及http1.1版本。</li><li>第二部分：请求头部，第二行至第六行。</li><li>第三部分：空行，第七行的空行。</li><li>第四部分：请求数据，第八行。</li></ul><h4 id="HTTP-响应消息Response"><a href="#HTTP-响应消息Response" class="headerlink" title="HTTP 响应消息Response"></a>HTTP 响应消息Response</h4><ul><li>一般情况下，服务器接收并处理客户端发过来的请求后会返回一个HTTP的响应消息。</li><li>HTTP响应也由四个部分组成，分别是：<code>状态行</code>、<code>消息报头</code>、<code>空行</code>和<code>响应正文</code>。<br><img src="/images/respond.jpg" width="600" alt="http响应消息格式" style="border:none"></li></ul><blockquote>响应消息例子：</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Fri, 22 May 2009 06:07:21 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">      &lt;head&gt;&lt;/head&gt;</span><br><span class="line">      &lt;body&gt;</span><br><span class="line">            &lt;!--body goes here--&gt;</span><br><span class="line">      &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>第一部分：状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。<ul><li>第一行为状态行，（HTTP/1.1）表明HTTP版本为1.1版本，状态码为200，状态消息为（ok）</li></ul></li><li>第二部分：消息报头，用来说明客户端要使用的一些附加信息。<ul><li>第二行和第三行为消息报头</li><li>Date:生成响应的日期和时间；Content-Type：指定了MIME类型的HTML(text/html)，编码类型是UTF-8</li></ul></li><li>第三部分：空行，消息报头后面的空行是必须的。</li><li>第四部分：响应正文，服务器返回给客户端的文本信息。<ul><li>空行后面的html部分为响应正文。</li></ul></li></ul><h3 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h3><ul><li>状态代码由三位数字组成，第一个数字定义了响应的类别，共分五种类别:<br><code>1xx：指示信息–表示请求已接收，继续处理</code><br><code>2xx：成功–表示请求已被成功接收、理解、接受</code><br><code>3xx：重定向–要完成请求必须进行更进一步的操作</code><br><code>4xx：客户端错误–请求有语法错误或请求无法实现</code><br><code>5xx：服务器端错误–服务器未能实现合法的请求</code></li><li>常见状态码：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">200 OK                        //客户端请求成功</span><br><span class="line">400 Bad Request               //客户端请求有语法错误，不能被服务器所理解</span><br><span class="line">401 Unauthorized              //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 </span><br><span class="line">403 Forbidden                 //服务器收到请求，但是拒绝提供服务</span><br><span class="line">404 Not Found                 //请求资源不存在，eg：输入了错误的URL</span><br><span class="line">500 Internal Server Error     //服务器发生不可预期的错误</span><br><span class="line">503 Server Unavailable        //服务器当前不能处理客户端的请求，一段时间后可能恢复正常</span><br></pre></td></tr></table></figure></li></ul><h3 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h3><ul><li>根据HTTP标准，HTTP请求可以使用多种请求方法。</li><li>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。</li><li>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET       //请求指定的页面信息，并返回实体主体。</span><br><span class="line">HEAD      //类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</span><br><span class="line">POST      //向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</span><br><span class="line">PUT       //从客户端向服务器传送的数据取代指定的文档的内容。</span><br><span class="line">DELETE    //请求服务器删除指定的页面。</span><br><span class="line">CONNECT   //HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</span><br><span class="line">OPTIONS   //允许客户端查看服务器的性能。</span><br><span class="line">TRACE     //回显服务器收到的请求，主要用于测试或诊断。</span><br></pre></td></tr></table></figure></li></ul><h3 id="HTTP工作原理"><a href="#HTTP工作原理" class="headerlink" title="HTTP工作原理"></a>HTTP工作原理</h3><ul><li>HTTP协议定义<strong>Web客户端如何从Web服务器请求Web页面</strong>，以及<strong>服务器如何把Web页面传送给客户端</strong>。HTTP协议采用了请求/响应模型。</li><li><strong>客户端</strong>向服务器发送一个<strong>请求报文</strong>，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。</li><li><strong>服务器</strong>以一个<strong>状态行作为响应</strong>，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。</li><li><p>以下是 HTTP 请求/响应的步骤：</p><blockquote><strong>1、客户端连接到Web服务器</strong></blockquote><ul><li>一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认为80）建立一个TCP套接字连接。例如，<a href="http://www.oakcms.cn。" target="_blank" rel="noopener">http://www.oakcms.cn。</a></li></ul><blockquote><strong>2、发送HTTP请求</strong></blockquote><ul><li>通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据4部分组成。</li></ul><blockquote><strong>3、服务器接受请求并返回HTTP响应</strong></blockquote><ul><li>Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据4部分组成。</li></ul><blockquote><strong>4、释放连接TCP连接</strong></blockquote><ul><li>若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;</li></ul><blockquote><strong>5、客户端浏览器解析HTML内容</strong></blockquote><ul><li>客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。</li></ul></li><li>例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：<br>1、浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;<br>2、解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;<br>3、浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;<br>4、服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;<br>5、释放 TCP连接;<br>6、浏览器将该 html 文本并显示内容。</li></ul><h3 id="GET和POST请求的区别"><a href="#GET和POST请求的区别" class="headerlink" title="GET和POST请求的区别"></a>GET和POST请求的区别</h3><ul><li>Http协议定义了很多与服务器交互的方法，最基本的有4种，分别是GET，POST，PUT，DELETE。一个URL地址用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查，改，增，删4个操作。最常见的就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。</li></ul><blockquote>GET请求</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /books/?sex=man&amp;name=Professional HTTP/1.1</span><br><span class="line">Host: www.wrox.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</span><br><span class="line">Gecko/20050225 Firefox/1.0.1</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">//最后一行是空行</span><br></pre></td></tr></table></figure><blockquote>POST请求</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: www.wrox.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</span><br><span class="line">Gecko/20050225 Firefox/1.0.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 40</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line"></span><br><span class="line">name=Professional%20Ajax&amp;publisher=Wiley</span><br></pre></td></tr></table></figure><ul><li><strong>GET请求</strong>和<strong>POST请求</strong>的区别：</li></ul><ol><li>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditPosts.aspx?name=test1&amp;id=123456，即数据会在地址栏中显示出来，而POST提交是把提交的数据放在HTTP包的Body中，地址栏不会改变。</li><li>GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制.<ul><li>首先声明：HTTP协议没有对传输的数据大小进行限制，HTTP协议规范也没有对URL长度进行限制。而在实际开发中存在的限制主要有：</li><li>GET：<strong>特定浏览器和服务器对URL长度有限制</strong>，例如 IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持。因此对于GET提交时，传输数据就会受到URL长度的限制。</li><li>POST：由于不是通过URL传值，理论上数据不受限。但实际各个WEB服务器会规定对post提交数据大小进行限制，Apache、IIS6都有各自的配置。</li></ul></li><li>安全性：<strong>POST的安全性</strong>要比GET的安全性<strong>高</strong>。<ul><li>比如一个登录页面，通过GET提交数据时，用户名和密码将明文出现在URL上，因为(1)登录页面有可能被浏览器缓存；(2)如果可以访问这台机器的其他人查看浏览器的历史纪录，别人就可以拿到账号和密码。除此之外，使用GET提交数据还可能会造成Cross-site request forgery攻击。</li></ul></li><li>GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;HTTP简介&quot;&gt;&lt;a href=&quot;#HTTP简介&quot; class=&quot;headerlink&quot; title=&quot;HTTP简介&quot;&gt;&lt;/a&gt;HTTP简介&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;超文本传输协议（Hyper Text Transfer Protocol, HTTP）是用于从万维网（WWW:World Wide Web）&lt;strong&gt;服务器传输超文本到本地浏览器&lt;/strong&gt;的&lt;strong&gt;应用层传送协议&lt;/strong&gt;。它被设计用于&lt;strong&gt;Web浏览器&lt;/strong&gt;和&lt;strong&gt;Web服务器&lt;/strong&gt;之间的&lt;strong&gt;通信&lt;/strong&gt;，但它也可以用于其他目的。 &lt;/li&gt;
&lt;li&gt;HTTP是一个&lt;strong&gt;基于TCP/IP通信协议&lt;/strong&gt;来传递数据（HTML 文件, 图片文件, 查询结果等）。一个完整的web文档是由不同的子文档重新组建而成的，例如文本、布局描述、图片、视频、脚本等。&lt;/li&gt;
&lt;li&gt;HTTP是一个属于&lt;strong&gt;应用层的面向对象的协议&lt;/strong&gt;，由于其简捷、快速的方式，适用于分布式超媒体信息系统。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Web" scheme="https://chongtianhong.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>RegExp 笔记</title>
    <link href="https://chongtianhong.github.io/2018/02/20/regExp/"/>
    <id>https://chongtianhong.github.io/2018/02/20/regExp/</id>
    <published>2018-02-20T05:37:40.000Z</published>
    <updated>2018-02-21T15:56:27.767Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则表达式的概念"><a href="#正则表达式的概念" class="headerlink" title="正则表达式的概念"></a>正则表达式的概念</h3><ul><li>正则表达式(regular expression)描述了一种<strong>字符串匹配</strong>的模式。这种模式，我们可以理解成是一种“规则”。根据这种规则再去匹配符合条件的结果，而<strong>匹配的过程就是检索，查找、提取的过程</strong>。</li><li>正则表达式<strong>只能对字符串进行操作</strong>。</li><li>基于不同平台或者是语言的 regular expression 并不相同，以下说的都是<strong>基于JavaScript语言</strong>的正则表达式，在JS中表现为RegExp对象。<a id="more"></a></li></ul><h3 id="RegExp-对象"><a href="#RegExp-对象" class="headerlink" title="RegExp 对象"></a>RegExp 对象</h3><h4 id="RegExp-对象-1"><a href="#RegExp-对象-1" class="headerlink" title="RegExp 对象"></a>RegExp 对象</h4><ul><li>RegExp是JavaScript中内置的正则对象，通过以下方法均可以创建一个正则对象的实例。</li></ul><blockquote>构造函数</blockquote><ul><li><code>var pattern = new RegExp(‘regexp’,’modifier’);</code></li><li>regexp ： 匹配的模式，也就是上文指的正则规则，实际上我们编写正则表达式的过程，都是对“规则”的定义过程。</li><li>modifier : 正则实例的修饰符。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var pattern = new RegExp(<span class="string">'world'</span>,<span class="string">'i'</span>);</span><br><span class="line">var reg = new RegExp(<span class="string">'name'</span>,<span class="string">'gi'</span>);</span><br></pre></td></tr></table></figure></li></ul><blockquote>字面量</blockquote><ul><li><code>var pattern = /regexp/modifier;</code></li><li>regexp ： 匹配的模式，也就是上文指的正则规则，实际上我们编写正则表达式的过程，都是对“规则”的定义过程。</li><li>modifier : 正则实例的修饰符。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var pattern = /world/i;</span><br><span class="line">var reg = /name/gi;</span><br></pre></td></tr></table></figure></li></ul><div class="note danger"><strong>说明</strong>：<br>字面量与构造函数的区别：<br><strong>字面量</strong>更类似于定义一个变量，采用赋值的方式。这种方式创建正则实例是<strong>推荐使用</strong>的方式。<br>注意：字面量方式下正则实例创建的格式，即用一对斜杠（//）来包裹定义的规则，规则不能用定界符括起来，随后在附加上修饰符。</div><h4 id="修饰符说明"><a href="#修饰符说明" class="headerlink" title="修饰符说明"></a>修饰符说明</h4><ul><li>“修饰符” 其含义类似于正则实例的附加属性。用于说明正则规则适用匹配的范围。<ul><li>i : 表示<strong>区分大小写字母</strong>匹配。</li><li>m ：表示<strong>多行</strong>匹配。</li><li>g : 表示<strong>全局</strong>匹配。<ul><li>在<strong>非全局</strong>的情况下，正则会根据指定的“规则”从左至右对字符串进行匹配，一旦<strong>规则匹配完</strong>，便会<strong>停止匹配操作</strong>，返回结果。</li><li>在<strong>全局</strong>的的情况下，正则会根据指定的“规则”从左至右对字符串进行匹配，一旦<strong>规则匹配完</strong>，便会在当前字符串匹配位置<strong>重新使用“规则”继续向下匹配</strong>，一直到字符串匹配完成。这也是下文中，我们会提到<strong>lastIndex属性存在的必要性</strong>。</li></ul></li></ul></li></ul><h4 id="RegExp对象方法"><a href="#RegExp对象方法" class="headerlink" title="RegExp对象方法"></a>RegExp对象方法</h4><ul><li>RegExp对象具有<strong>内置</strong>方法，这些方法可以根据指定的规则来<strong>对字符串进行匹配，查找</strong>等。</li><li>可以支持正则表达式的方法，不仅仅只有RegExp对象才有，实际上<strong>String对象</strong>也具有同样功能的方法。</li></ul><blockquote>test()</blockquote><ul><li><p>test 方法用于测试正则规则在指定的字符串中是否具有符合的匹配结果，如果匹配到则返回true，否则返回false。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var pattern = /a/;</span><br><span class="line">console.log(pattern.test(<span class="string">'edcba'</span>)) // =&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>当test方法在全局模式下被多次执行的时候，每次执行的返回值会因为匹配结果的不同而不同。</p></li><li>如果多次重复执行test方法，则会根据<strong>lastIndex属性的值为锚点</strong>依次向后匹配，在匹配到字符串的末尾后，会从头到尾再重新循环匹配。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var pattern = /a/g;</span><br><span class="line">console.log(pattern.test(<span class="string">'edcba'</span>)) // =&gt; <span class="literal">true</span> 第一次执行。</span><br><span class="line">console.log(pattern.test(<span class="string">'edcba'</span>)) // =&gt; <span class="literal">false</span> 第二次执行。</span><br><span class="line">console.log(pattern.test(<span class="string">'edcba'</span>)) // =&gt; <span class="literal">true</span> 第三次执行。从头到尾重新循环执行。</span><br></pre></td></tr></table></figure></li></ul><blockquote>exec()</blockquote><ul><li>在<strong>非全局</strong>的匹配模式下，此函数的作用和match()函数是一样的，只能够在字符串中匹配一次，一旦匹配到符合规则的结果，便会停止执行。<ul><li>在非全局匹配模式下，IE浏览器还会具有<strong>lastIndex属性</strong>，不过这时是<strong>只读</strong>的。</li></ul></li><li><p>在<strong>全局</strong>模式下，当匹配到符合规则的结果也会停止执行。<strong>lastIndex属性</strong>可以设置。</p><ul><li>不过此时，此函数一般会<strong>和lastIndex属性匹配使用</strong>，此函数会在lastIndex属性指定的字符处开始检索字符串，当exec()找到与表达式相匹配的字符串时，在<strong>匹配后</strong>，它将lastIndex 属性设置为<strong>匹配字符串的最后一个字符的下一个位置</strong>。</li><li>可以通过<strong>反复调用exec()函数遍历字符串中的所有匹配</strong>，当exec()函数再也找不到匹配的文本时，它将返回null，并把lastIndex 属性重置为0。</li><li>如果在一个字符串中完成了一次模式匹配之后要开始检索新的字符串，就必须手动地把lastIndex属性重置为0。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var pattern = /a/;</span><br><span class="line">console.log(pattern.test(<span class="string">'edcba'</span>)) // =&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>exec方法在匹配到的情况下，返回值是一个数组（但是此<strong>数组的内容</strong>和<strong>正则对象是否是全局匹配</strong>有着很大关系），同时此数组还包括两个对象属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var result = /a/.<span class="built_in">exec</span>(<span class="string">'abcdaefga'</span>);</span><br><span class="line">result[0] // -&gt; 当前匹配到的结果。</span><br><span class="line">result.input // -&gt; 进行匹配操作的字符串。</span><br><span class="line">result.index // -&gt; 当前匹配结果首字母在字符串中的索引</span><br></pre></td></tr></table></figure></li><li><p>如果正则表达式<strong>没有匹配到结果</strong>，那么<strong>返回的值就是 null</strong>。</p></li><li><p>如果存在分组匹配的情况下:<br>  result[1] -&gt; 表示第一个分组匹配到的结果。<br>  result[2] -&gt; 表示第二个分组匹配到的结果。<br>  …<br>  result[n] -&gt; 表示第n个分组匹配到的结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">'2012 google'</span>;</span><br><span class="line">var pattern = /(\d&#123;4&#125;)\s(\w+)/;//第一个分组(\d&#123;4&#125;)，第二个分组(\w+)</span><br><span class="line">var result = pattern.exec(str);</span><br><span class="line">console.log(result[0]);//2012 google</span><br><span class="line">console.log(result[1]);//2012</span><br><span class="line">console.log(result[2]);//google</span><br></pre></td></tr></table></figure></li><li><p>如果想使用exec方法对字符串中的某个结果进行<strong>全面匹配</strong>（反复调用exec方法遍历字符串中的所有匹配），那么正则表达式<strong>必须要开启全局模式</strong>。</p></li><li><p>在<strong>非全局的模式</strong>下，exec方法<strong>一旦匹配到结果</strong>，<strong>便会停止执行</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var pattern = /a/g;</span><br><span class="line"><span class="keyword">while</span>(result = pattern.exec(<span class="string">'abababab'</span>))&#123;</span><br><span class="line">console.log(result+<span class="string">' index:'</span>+ result.index +<span class="string">' input:'</span>+ result.input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str=<span class="string">"I love antzone ,this is animate"</span>; </span><br><span class="line">var reg=/an/;</span><br><span class="line">console.log(reg.exec(str));//[<span class="string">"an"</span>,index:7, input:<span class="string">"I love antzone ,this is animate"</span>]</span><br></pre></td></tr></table></figure></li><li><p>在<strong>全局模式下</strong>可以<strong>使用lastIndex属性设置</strong>在字符串中<strong>查找指定字符时开始的位置</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var str=<span class="string">"the name 123 and 456"</span>; </span><br><span class="line">var reg=/\d/g;</span><br><span class="line">reg.lastIndex=15;</span><br><span class="line">console.log(reg.exec(str));//[<span class="string">"4"</span>,index:17, input:<span class="string">"the name 123 and 456"</span>]</span><br></pre></td></tr></table></figure></li></ul><blockquote>compile()</blockquote><ul><li>compile可以重新指定正则实例的规则与修饰符。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var pattern = /res/i;</span><br><span class="line">pattern.compile(<span class="string">'rp'</span>,<span class="string">'g'</span>) //-&gt; /rp/g</span><br></pre></td></tr></table></figure></li></ul><h4 id="RegExp对象的属性"><a href="#RegExp对象的属性" class="headerlink" title="RegExp对象的属性"></a>RegExp对象的属性</h4><blockquote>input</blockquote><ul><li>返回当前要匹配的字符串。</li><li><strong>静态属性</strong>，调用格式：RegExp.attribute。</li><li>静态属性是RegExp这个内置对象的固有属性。访问这些静态属性，不需要进行声明实例化，而是直接调用。　　　　　　<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var desc = <span class="string">'Hello,everyone.My name is gtshen'</span>;</span><br><span class="line">reg = /na(.?)/g;</span><br><span class="line">reg.test(desc);</span><br><span class="line">console.log(<span class="string">'input: '</span>+RegExp.input) // -&gt; <span class="string">'Hello,everyone.My name is gtshen'</span></span><br></pre></td></tr></table></figure></li></ul><blockquote>lastMatch</blockquote><ul><li>最后一次匹配到的子串结果，需要开启修饰符-g。</li><li><strong>静态属性</strong>，调用格式：RegExp.attribute。　　　　　　<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var desc = <span class="string">'Hello,everyone.My name is gtshen'</span>;</span><br><span class="line">reg = /na(.?)/g;</span><br><span class="line">reg.test(desc);</span><br><span class="line">console.log(<span class="string">'lastMatch:'</span>+RegExp.lastMatch) // -&gt; nam</span><br></pre></td></tr></table></figure></li></ul><blockquote>leftContext</blockquote><ul><li>以当前匹配到的子串为上下文，返回之前的子串。</li><li><strong>静态属性</strong>，调用格式：RegExp.attribute。　　　　　　<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var desc = <span class="string">'Hello,everyone.My name is gtshen'</span>;</span><br><span class="line">reg = /na(.?)/g;</span><br><span class="line">reg.test(desc);</span><br><span class="line">console.log(<span class="string">'leftContext:'</span>+RegExp.leftContext) // -&gt; <span class="string">'Hello,everyone.My '</span>;</span><br></pre></td></tr></table></figure></li></ul><blockquote>rightContext</blockquote><ul><li>以当前匹配到的子串为上下文，返回之后的子串。</li><li><strong>静态属性</strong>，调用格式：RegExp.attribute。　　　　　　<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var desc = <span class="string">'Hello,everyone.My name is gtshen'</span>;</span><br><span class="line">reg = /na(.?)/g;</span><br><span class="line">reg.test(desc);</span><br><span class="line">console.log(<span class="string">'rightContext:'</span>+RegExp.rightContext) // -&gt; <span class="string">'e is gtshen'</span>;</span><br></pre></td></tr></table></figure></li></ul><blockquote>lastIndex</blockquote><ul><li>返回当前匹配结果下一次匹配的<strong>起始位置</strong>。也可以手动设置lastIndex的值，用于设置<strong>指定的起始位置</strong>。</li><li><strong>实例属性</strong>：指必须<strong>经过声明或实例化后</strong>的<strong>正则表达式对象</strong>方能调用的属性。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var pattern = /\w?/g;</span><br><span class="line">var desc = <span class="string">'hello,hi,oh'</span>;</span><br><span class="line">pattern.test(desc) </span><br><span class="line">console.log(pattern.lastIndex) //-&gt; 1;</span><br><span class="line">pattern.lastIndex = 2;</span><br><span class="line">pattern.test(desc) </span><br><span class="line">console.log(pattern.lastIndex) // -&gt; 3;</span><br></pre></td></tr></table></figure></li></ul><h3 id="支持正则的String方法"><a href="#支持正则的String方法" class="headerlink" title="支持正则的String方法"></a>支持正则的String方法</h3><ul><li>除了RegExp对象具有支持正则表达式的方法外，字符串String对象也具有可以支持正则表达式作为参数进行匹配筛选的的方法。</li></ul><blockquote>replace()</blockquote><ul><li>该方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</li><li>格式:str.replace(regexp/substr,replacement)。</li><li>返回一个新的字符串，是用 replacement 替换了 regexp 的第一次匹配或所有匹配之后得到的。</li><li>replace方法只会<strong>返回原字符被操作后的副本</strong>，并不会对原字符串进行改动。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">'i see you See you'</span>;</span><br><span class="line">var pattern = /you/;</span><br><span class="line">str.replace(pattern,<span class="string">'*'</span>); // -&gt; i see * See you</span><br></pre></td></tr></table></figure></li></ul><blockquote>match()</blockquote><ul><li>在字符串内检索指定的值，找到一个或多个正则表达式的匹配。</li><li>格式：str.match(pattern)。</li><li>match 在功能上与正则对象自带的方法exec很类似。</li><li>match 根据匹配规则pattern匹配指定的字符串str，如果匹配成功则返回一个数组格式的结果用于存放匹配文本有关的信息，如果没有匹配到则返回null。</li><li><p>返回匹配结果的数组，<strong>数组内容依赖于regexp是否具有全局标志g</strong>。</p><ul><li>如果match的匹配规则是一个正则，并且<strong>具有全局g属性</strong>，那么match返回的匹配结果，便是一个包含<strong>所有匹配结果</strong>的纯数组。</li><li>如果match的匹配规则是一个正则，并且<strong>不具有全局g属性</strong>，那么match返回的匹配结果，便是一个包含<strong>该匹配结果（只有一个元素）</strong>的数组，同时此数组还包括两个对象属性。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">'abcdabcda'</span>;</span><br><span class="line">var result = str.match(/a/g);</span><br><span class="line">result //--&gt; [a,a,a]</span><br><span class="line">result.input //--&gt; undefined</span><br><span class="line">result.index //--&gt; undefined</span><br></pre></td></tr></table></figure></li></ul><blockquote>split()</blockquote><ul><li>split() 方法用于把一个字符串分割成字符串数组。</li><li>格式：str.split(pattern,length)<ul><li>pattern参数，可以是正则表达式，也可以是单纯的字符或字符串。</li><li>length参数，用于设置拆分数组后数组最大的长度（即数组元素的个数）。缺省该项，表示将字符全部拆分后作为数组的元素。</li></ul></li><li>根据规则pattern将字符串拆分为数组，拆分后的数组并不包含作为拆分依据的那个参数。</li><li>默认情况下是空字符进行拆分，也就是每个任意的字符作为一个数组元素。　　　　　　<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">'hellow word!'</span>;</span><br><span class="line">str.spilit(<span class="string">''</span>); // --&gt; <span class="string">''</span>空字符（并非空格字符）[<span class="string">"h"</span>, <span class="string">"e"</span>, <span class="string">"l"</span>, <span class="string">"l"</span>, <span class="string">"o"</span>, <span class="string">"w"</span>, <span class="string">" "</span>, <span class="string">"w"</span>, <span class="string">"o"</span>, <span class="string">"r"</span>, <span class="string">"l"</span>, <span class="string">"d"</span>, <span class="string">"!"</span>]</span><br><span class="line">str.split(<span class="string">''</span>,5) // --&gt; [<span class="string">"h"</span>, <span class="string">"e"</span>, <span class="string">"l"</span>, <span class="string">"l"</span>, <span class="string">"o"</span>]</span><br><span class="line">str.split(/\o/g) // --&gt; [<span class="string">"hell"</span>, <span class="string">"w w"</span>, <span class="string">"rld!"</span>]</span><br><span class="line"><span class="string">'a b   c'</span>.split(/\s+/); // --&gt; [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>] 可以识别连续的空格</span><br><span class="line"><span class="string">'a,b, c  d'</span>.split(/[\s\,]+/); // [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br></pre></td></tr></table></figure></li></ul><blockquote>search()</blockquote><ul><li>str.search(pattern)</li><li>返回第一个与pattern相匹配的子串的起始位置。如果没有找到任何匹配的子串，返回-1。</li><li>其功能类似于indexOf,只是indexOf并不支持正则匹配。</li><li>注意：该方法忽略全局修饰符g，也不支持lastIndex，也就是意味着它不能被多次调用，一旦检索到结果，便会停止检索。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">'hellow world!'</span>;</span><br><span class="line">str.search(<span class="string">'o'</span>) // --&gt; 4</span><br><span class="line">str.search(<span class="string">'x'</span>) // --&gt; -1</span><br></pre></td></tr></table></figure></li></ul><h3 id="JS的正则基础语法"><a href="#JS的正则基础语法" class="headerlink" title="JS的正则基础语法"></a>JS的正则基础语法</h3><ul><li>正则表达式是由两种字符模式组成，分别是<strong>普通字符</strong>和<strong>元字符</strong>。通过这两种字符模式的结合使用，可以编写出符合我们要求的正则规则。</li><li>普通字符：即由<strong>显性的没有特殊含义的打印字符</strong>和<strong>没有指定为元字符的非打印字符</strong>组成。<ul><li>显性的打印字符，它是实际可见的，例如0-9，a-z。</li><li>非打印的字符，例如ASCII码值在0-31的为控制字符，它们无法显示和打印，但实际存在。</li></ul></li><li>元字符：元字符更接近计算机语言中的变量含义，它可以代表某种特殊的含义，并且会根据使用场合不同，其具体的含义也不尽相同。</li><li>元字符，根据其特性与含义，下面将以几个小类来说明。</li></ul><h4 id="转义运算符"><a href="#转义运算符" class="headerlink" title="转义运算符"></a>转义运算符</h4><ul><li>功能：对元字符进行转义，使其转换为普通字符。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var pattern = /\[/;</span><br><span class="line">var str = <span class="string">'[]'</span>;</span><br><span class="line">console.log(pattern.test(str)) // -&gt; <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="量词（贪婪匹配）"><a href="#量词（贪婪匹配）" class="headerlink" title="量词（贪婪匹配）"></a>量词（贪婪匹配）</h4><ul><li>?：表示匹配0次或1次</li><li>+：表示匹配1次或多次</li><li>*：表示匹配0次或多次</li><li>{n}：表示匹配n次</li><li>{n,m}：表示匹配n到m次</li><li>{n,}：表示至少匹配n次</li></ul><h4 id="边界"><a href="#边界" class="headerlink" title="边界"></a>边界</h4><ul><li>\b：匹配单词边界，用于匹配一个整体的单词时使用。</li><li>\B：匹配非单词边界。</li><li>^：强制首匹配，以指定规则开始的字符，避免前导的其它字符。</li><li>$：强制尾匹配，以指定规则结束的字符，避免后导的其它字符。</li></ul><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><ul><li>“类”是具有相同特征的集合，是一个泛指。</li><li>字符类:<ul><li>[abc]：只根据区间内的内容进行匹配。</li></ul></li><li>范围类:<ul><li>[a-zA-Z0-9]：匹配大小写字符a-z以及数组0-9的范围。</li></ul></li><li>反向类:<ul><li>[^a-z]：取反匹配。匹配不在这个区间范围内的内容。</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">'google'</span>;</span><br><span class="line">var pattern = /[gle]/;</span><br><span class="line">console.log(pattern.test(str))//<span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="贪婪模式与非贪婪模式"><a href="#贪婪模式与非贪婪模式" class="headerlink" title="贪婪模式与非贪婪模式"></a>贪婪模式与非贪婪模式</h4><ul><li>贪婪模式会按照匹配规则尽可能多的去匹配，一直到匹配失败。</li><li>非贪婪模式则会根据最小匹配规则去匹配。</li><li>以匹配规则为例来说，贪婪是指匹配所有符合规则的结果，按照最大可能的结果去匹配，而非贪婪则只要有匹配结果便会停止匹配。</li><li>从量词上看：* + ?都是贪婪匹配，因为它们都会按照匹配规则尽可能的去匹配。<ul><li>例如，*匹配零个或多个，但实际匹配上，会以多个的情况为优先匹配。</li></ul></li><li>取消贪婪模式也很简单，在原有的基础上附加上一个?号，这时就改为非贪婪模式，一旦条件满足，就不再往下匹配。　 　　 </li><li>非贪婪匹配：<ul><li>+? 只匹配一次</li><li>?? 匹配 0次</li><li>*? 匹配0次</li><li>{n}? 按照n次匹配</li><li>{n,}? 按照n次匹配</li><li>{n,m}? 按照n次匹配</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">'aaa'</span>,</span><br><span class="line">pattern1 = /a*/,</span><br><span class="line">pattern2 = /a*?/;</span><br><span class="line">pattern1.exec(str); // -&gt; aaa </span><br><span class="line">pattern2.exec(str); // -&gt; <span class="string">''</span></span><br></pre></td></tr></table></figure><h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><ul><li>分组就是把要匹配的结果作为一个组一个整体来看待。因此只要是属于该分组的信息，都要放在()符号内。</li></ul><blockquote>() 捕获性分组</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">'123abc'</span>;</span><br><span class="line">var pattern = /(\d&#123;4&#125;)(\w+)/;</span><br><span class="line">pattern.test(str); </span><br><span class="line">console.log(RegExp.<span class="variable">$1</span>) //-&gt; 123</span><br><span class="line">console.log(RegExp.<span class="variable">$2</span>) //-&gt; abc</span><br></pre></td></tr></table></figure><blockquote>(?:) 非捕获性分组</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">'123abc'</span>;</span><br><span class="line">var pattern = /(\d&#123;3&#125;)(?:\w+)/;</span><br><span class="line">pattern.test(str); </span><br><span class="line">console.log(RegExp.<span class="variable">$1</span>) //-&gt; 123</span><br><span class="line">console.log(RegExp.<span class="variable">$2</span>) //-&gt; <span class="string">''</span>;</span><br></pre></td></tr></table></figure><blockquote>((…)) 嵌套分组</blockquote><ul><li>嵌套分组从外向内获取。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">'abc'</span>;</span><br><span class="line">var pattern = /(a?(b?(c?)))/;</span><br><span class="line">pattern.test(str); </span><br><span class="line">console.log(RegExp.<span class="variable">$1</span>) //-&gt; abc</span><br><span class="line">console.log(RegExp.<span class="variable">$2</span>) //-&gt; bc</span><br><span class="line">console.log(RegExp.<span class="variable">$3</span>) //-&gt; c</span><br></pre></td></tr></table></figure><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul><li>相同优先级的从左到右进行运算，不同优先级的运算先高后低。各种操作符的优先级从高到低如下：</li></ul><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">描述 </th></tr></thead><tbody><tr><td style="text-align:center">\</td><td style="text-align:center">转义符 </td></tr><tr><td style="text-align:center">(), (?:), (?=), []</td><td style="text-align:center">分组和类 </td></tr><tr><td style="text-align:center">*, +, ?, {n}, {n,}, {n,m}</td><td style="text-align:center">量词 </td></tr><tr><td style="text-align:center">^, $, \anymetacharacter</td><td style="text-align:center">边界以及字符顺序</td></tr><tr><td style="text-align:center">\</td><td style="text-align:center">“或”操作</td></tr></tbody></table><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><blockquote>修饰符m对位置元字符的影响</blockquote><ul><li><p>修饰符m表示多行匹配，而^$表示匹配的开始于结束位置，这两种情况一起使用，或分别使用的区别：</p><ul><li>^$m：不仅匹配字符串的起始于结束位置，还会匹配每一行的起始于结束位置。</li><li>^$：只匹配字符串的起始于结束位置。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">'hellow World\nWorld\naWorld'</span>,</span><br><span class="line">pattern1 = /World$/g;</span><br><span class="line">pattern2 = /^World$/gm;</span><br><span class="line">pattern1.exec(str);    // -&gt; index:20 </span><br><span class="line">pattern2.exec(str); // -&gt; index:13</span><br></pre></td></tr></table></figure></li></ul></li><li><p>由此可以看出，对于正则来说，字符串如果存在多行，那么每一行都会存在^$匹配操作。</p></li></ul><blockquote>\Number 指定重复分组</blockquote><ul><li>在分组匹配捕获时，也可以在正则规则中指定\n(注:n:1-9)的形式来代指某个分组的值。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">'abcabc'</span>,</span><br><span class="line">pattern = /(.)b(.)\1b\2/;</span><br><span class="line">pattern.test(str); // -&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>一个子表达式是一个整体，可重复后面引用</li><li>/(\d)(\d)\2\1/gi; 第二位和第三位相同，第一位和第四位相同</li><li>/(\d)\1(\d)\2(\d)\3(\d)4/; aabbccdd形式的数字</li><li>/(\d){5}-(\d)\2\2(\d)\3\3(\d)\4\4/gi; 12345-111222333</li></ul><blockquote>换行匹配</blockquote><ul><li>在正则中字符串的换行是用\n进行表示的。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">'1.baidu\n2.google\n3.bing'</span>;</span><br><span class="line">var pattern1 = /\d/g;    //此种方式也可以做到，但是建议使用标准的换行模式。</span><br><span class="line">var pattern2 = /^\d/gm;</span><br><span class="line">console.log(str.replace(pattern1,<span class="string">'#'</span>));</span><br><span class="line">console.log(str.replace(pattern2,<span class="string">'#'</span>));</span><br></pre></td></tr></table></figure><blockquote>字符匹配符号</blockquote><ul><li>[a-z]表示可以匹配a-z中任意一个字符</li><li>[^a-z]表示可以匹配不是a-z中的任意一个字符</li><li>[abcd]表示可以匹配到abcd中的任意一个字符</li><li>\d 表示可以匹配0-9的任意一个数字，相当于[0-9]</li><li>\D 表示可以匹配不是0-9中的任意一个数字，相当于[^0-9]</li><li>\w 匹配任意英文字符、数字和下划线，相当于[a-zA-Z0-9_]</li><li>\W 相当于[^a-zA-Z0-9_]是\w刚好相反。</li><li>\s 匹配任何空白字符（空格、制表符等）</li><li>\S 匹配任何非空白字符，和\s刚好相反</li><li>. 匹配除\n之外的所有字符</li><li>需要用到转义符号的字符有 ： . * + () $ / \ ? [] ^ {}</li></ul><blockquote>定位符</blockquote><ul><li>用于规定匹配的字符串出现的位置</li><li>^符号 匹配目标字符串的开始位置</li><li>$符号 匹配目标字符串的结束位置</li></ul><h3 id="常用正则表达式收集"><a href="#常用正则表达式收集" class="headerlink" title="常用正则表达式收集"></a>常用正则表达式收集</h3><ol><li>匹配任意字符<ul><li>正则： <code>/[^]/</code> </li></ul></li><li>匹配ASCII码范围<ul><li>规则：\x00表示十进制0 ，\xff表示十进制255,0-255正好是ASCII码表可表示的范围。</li><li>正则： <code>/[\x00-\xff]/g </code></li><li>说明：同理， /[^\x00-\xff]/g  则表示匹配汉字或者是全角字符。</li></ul></li><li>匹配汉字<ul><li>规则：\u4e00 : 在Unicode码中汉字的开始编码，\u9fa5 : 在Unicode码中汉字的结束编码。</li><li>正则： <code>/^[\u4e00-\u9fa5]+$/ </code></li></ul></li><li>手机号码检测<ul><li>规则：[3|4|5|7|8] : 手机号11位，但是第二位数字只有这几种固定的网段。</li><li>正则： <code>/^1[3|4|5|7|8]\d{9}$/ </code></li></ul></li><li>邮政编码<ul><li>规则：邮政编码必须为数字，长度为6位且第一位不能为0，示例：224000</li><li>正则： <code>/[1-9]\d{5}/ </code></li></ul></li><li>电子邮件<ul><li>规则：邮箱的基本格式为“名称@域名”，只允许英文字母、数字、下划线、英文句号、以及中划线组成。</li><li>正则： <code>/^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(.[a-zA-Z0-9_-]+)+$/ </code></li></ul></li><li>匹配前后空格<ul><li>正则： <code>/^\s+|\s+$/g </code></li></ul></li><li>QQ号匹配<ul><li>规则：首位不能为0，位数5-12位。</li><li>正则： <code>/^[1-9]\d{4,11}$/; </code></li></ul></li><li>匹配网址url的正则表达式<ul><li>正则： <code>[a-zA-z]+://[^\s]* </code></li></ul></li><li>匹配国内电话号码<ul><li>正则： <code>\d{3}-\d{8}|\d{4}-\d{7} </code></li></ul></li><li>匹配国内身份证号码<ul><li>规则：简单的身份证匹配，根据位数以及结尾是否有字母。</li><li>正则： <code>/^\d{15}(\d{2}[A-Za-z0-9])?$/ </code></li></ul></li><li>匹配IP地址<ul><li>正则： <code>/^(\d+).(\d+).(\d+).(\d+)$/g </code></li></ul></li><li>验证是否含有^%&amp;’,;=?$\”等字符<ul><li>正则： <code>/[^%&amp;’,;=?$\x22]+/ </code></li></ul></li><li>匹配空行的正则表达式<ul><li>正则： <code>\n[\s| ]*\r </code></li></ul></li><li>数学正则<ul><li>整数 :  <code>/^[-+]?\d+$/ </code></li><li>浮点数 :  <code>/^[-+]?\d+(.\d+)?$/ </code></li><li>Chinese :  <code>/^[\u0391-\uFFE5]+$/ </code></li><li>实数： <code>^[-+]?\d+(.\d+)?$ </code></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;正则表达式的概念&quot;&gt;&lt;a href=&quot;#正则表达式的概念&quot; class=&quot;headerlink&quot; title=&quot;正则表达式的概念&quot;&gt;&lt;/a&gt;正则表达式的概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;正则表达式(regular expression)描述了一种&lt;strong&gt;字符串匹配&lt;/strong&gt;的模式。这种模式，我们可以理解成是一种“规则”。根据这种规则再去匹配符合条件的结果，而&lt;strong&gt;匹配的过程就是检索，查找、提取的过程&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;正则表达式&lt;strong&gt;只能对字符串进行操作&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;基于不同平台或者是语言的 regular expression 并不相同，以下说的都是&lt;strong&gt;基于JavaScript语言&lt;/strong&gt;的正则表达式，在JS中表现为RegExp对象。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数组方法大全</title>
    <link href="https://chongtianhong.github.io/2018/02/19/array/"/>
    <id>https://chongtianhong.github.io/2018/02/19/array/</id>
    <published>2018-02-19T12:52:39.000Z</published>
    <updated>2018-03-03T13:28:14.665Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h4><ul><li>JavaScript中创建数组有两种方式，第一种是使用<strong>Array构造函数</strong>，另一种是使用<strong>数组字面量表示法</strong>。</li><li>有三种方法可以用来判断变量是否为数组(Array)，分别是<code>instance of</code>、<code>constructor</code>和<code>isArray</code>。</li><li>数组的方法有<strong>数组原型方法</strong>，也有从object对象继承来的方法，常见的数组原型方法主要有：<ul><li>join()</li><li>push()和pop()</li><li>shift() 和 unshift()</li><li>sort()</li><li>reverse()</li><li>concat()</li><li>slice()</li><li>splice()</li><li>indexOf()和 lastIndexOf() （ES5新增）</li><li>forEach() （ES5新增）<a id="more"></a></li></ul></li></ul><h4 id="数组创建"><a href="#数组创建" class="headerlink" title="数组创建"></a>数组创建</h4><ul><li><p>JavaScript中创建数组有两种方式，第一种是使用<strong>Array构造函数</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr1 = new Array(); //创建一个空数组</span><br><span class="line">var arr2 = new Array(20); // 创建一个长度为20的数组</span><br><span class="line">var arr3 = new Array(<span class="string">"lily"</span>,<span class="string">"lucy"</span>,<span class="string">"Tom"</span>); // 创建一个包含3个字符串的数组</span><br></pre></td></tr></table></figure></li><li><p>创建数组的第二种基本方式是使用<strong>数组字面量表示法</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr4 = []; //创建一个空数组</span><br><span class="line">var arr5 = [20]; // 创建一个包含一个元素的数组</span><br><span class="line">var arr6 = [<span class="string">"lily"</span>,<span class="string">"lucy"</span>,<span class="string">"Tom"</span>]; // 创建一个包含3个字符串的数组</span><br></pre></td></tr></table></figure></li></ul><h4 id="数组判断"><a href="#数组判断" class="headerlink" title="数组判断"></a>数组判断</h4><ul><li>有三种方法可以用来判断变量是否为数组(Array)：</li></ul><blockquote>instance of</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a=new Array();</span><br><span class="line">a instanceof Array; //<span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote>constructor</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a=new Array();</span><br><span class="line">a.constructor==Array; //<span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote>isArray</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//对支持isArray的浏览器</span><br><span class="line">var a=new Array();</span><br><span class="line">Array.isArray(a); //<span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="常见的数组方法"><a href="#常见的数组方法" class="headerlink" title="常见的数组方法"></a>常见的数组方法</h4><h5 id="数组元素的添加"><a href="#数组元素的添加" class="headerlink" title="数组元素的添加"></a>数组元素的添加</h5><blockquote>push 方法</blockquote><ul><li>将一个或多个新元素添加到原数组末尾，并返回数组的长度。</li><li>该方法会<strong>改变原始数组</strong>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3];</span><br><span class="line">var b = arr.push([4,5]); //arr：[1,2,3,4,5]  b：5</span><br></pre></td></tr></table></figure></li></ul><blockquote>unshift 方法</blockquote><ul><li>将一个或多个新元素添加到数组开头，并返回数组的长度。</li><li>该方法会<strong>改变原始数组</strong>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3];</span><br><span class="line">var b = arr.unshift(-2,-1); //arr：[-2,-1,1,2,3]  b：5</span><br></pre></td></tr></table></figure></li></ul><blockquote>splice 方法</blockquote><ul><li>将一个或多个新元素插入到数组的指定位置，插入位置的元素自动后移，返回””。</li><li>该方法会<strong>改变原始数组</strong>。</li><li>该方法能删除指定的元素，也可以用来插入指定的元素。</li><li>函数原型: splice(insertIndex,0,element1,…..,elementX)。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</span><br><span class="line">var result = fruits.splice(2,0,<span class="string">"Lemon"</span>,<span class="string">"Kiwi"</span>);//在数组的第二个位置插入元素</span><br><span class="line">//result : <span class="string">""</span></span><br><span class="line">//fruits: [Banana, Orange, Lemon, Kiwi, Apple, Mango]</span><br></pre></td></tr></table></figure></li></ul><h5 id="数组元素的删除"><a href="#数组元素的删除" class="headerlink" title="数组元素的删除"></a>数组元素的删除</h5><blockquote>pop 方法</blockquote><ul><li>删除原数组最后一个元素，并返回删除元素的值；如果数组为空则返回undefined。</li><li>该方法会<strong>改变原始数组</strong>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3];</span><br><span class="line">var b = arr.pop(); //arr：[1,2]  b：3</span><br></pre></td></tr></table></figure></li></ul><blockquote>shift 方法</blockquote><ul><li>删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3];</span><br><span class="line">var b = arr.shift(); //arr：[2,3]  b：1</span><br></pre></td></tr></table></figure></li></ul><blockquote>splice 方法</blockquote><ul><li>splice 方法向/从数组中删除项目，然后返回被删除的项目。</li><li>该方法会<strong>改变原始数组</strong>。</li><li>该方法也可以用来插入指定的元素。</li><li>函数原型: splice(insertIndex,deleteCount,element1,…..,elementX)。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//删除并插入</span><br><span class="line">var arr = [1,2,3,4,5];</span><br><span class="line">var b = arr.splice(2,2,7,8,9); //arr：[1,2,7,8,9,5]  b：[3,4]</span><br><span class="line">//同<span class="built_in">shift</span></span><br><span class="line">var b = arr.splice(0,1); </span><br><span class="line">//同unshift</span><br><span class="line">arr.splice(0,0,-2,-1); </span><br><span class="line">//同pop</span><br><span class="line">var b = arr.splice(a.length-1,1); </span><br><span class="line">//同push</span><br><span class="line">arr.splice(arr.length,0,6,7);</span><br></pre></td></tr></table></figure></li></ul><h5 id="数组元素的截取"><a href="#数组元素的截取" class="headerlink" title="数组元素的截取"></a>数组元素的截取</h5><blockquote>slice 方法</blockquote><ul><li>函数原型: slice(start,end)。</li><li>返回从原数组中指定start下标到end下标（不包括）之间的项组成的<strong>新数组</strong>。</li><li>该方法并<strong>不会修改原数组</strong>，而是返回一个子数组。</li><li>在只有一个参数的情况下， slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。</li><li>如果有两个参数，该方法返回起始和结束位置之间的项——但不包括结束位置的项。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3,4,5];</span><br><span class="line">var b = arr.slice(2,5); //arr：[1,2,3,4,5]  b：[3,4,5]</span><br></pre></td></tr></table></figure></li></ul><h5 id="数组元素的合并"><a href="#数组元素的合并" class="headerlink" title="数组元素的合并"></a>数组元素的合并</h5><blockquote>concat 方法</blockquote><ul><li>将多个数组（也可以是字符串，或者是数组和字符串的混合）连接为一个数组，返回连接好的<strong>新数组</strong>。</li><li>在没有给 concat()方法传递参数的情况下，它只是复制当前数组并返回副本。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,3,5,7];</span><br><span class="line">var arrCopy = arr.concat(9,[11,13]);</span><br><span class="line">console.log(arrCopy); //[1, 3, 5, 7, 9, 11, 13]</span><br><span class="line">console.log(arr); // [1, 3, 5, 7](原数组未被修改)</span><br></pre></td></tr></table></figure></li></ul><h5 id="数组的拷贝"><a href="#数组的拷贝" class="headerlink" title="数组的拷贝"></a>数组的拷贝</h5><ul><li>可以实现数组拷贝的方法有slice方法和concat方法。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//slice(start,end):start设置为0，省略end则表示从头截取到尾，即对数组进行了一份拷贝</span><br><span class="line">//返回数组的拷贝数组，注意是一个新的数组，不是指向</span><br><span class="line">arrayObj.slice(0);</span><br><span class="line">//在没有给 concat()方法传递参数的情况下，它只是复制当前数组并返回副本</span><br><span class="line">//返回数组的拷贝数组，注意是一个新的数组，不是指向</span><br><span class="line">arrayObj.concat();</span><br></pre></td></tr></table></figure></li></ul><h5 id="数组的排序"><a href="#数组的排序" class="headerlink" title="数组的排序"></a>数组的排序</h5><blockquote>reverse 方法</blockquote><ul><li>该方法用来反转数组中的元素（前后颠倒）。</li><li>此方法会<strong>修改原数组</strong>，并不会创建新数组。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3].reverse();  </span><br><span class="line">//[3, 2, 1]</span><br></pre></td></tr></table></figure></li></ul><blockquote>sort 方法</blockquote><ul><li>该方法将数组中的元素排序并返回排序后的数组。</li><li>此方法会<strong>修改原数组</strong>，并不会创建新数组。</li><li>当sort()方法不带参数时，数组按照字母表顺序排序，如果数组包含undefined元素，会排到数组尾部。</li><li>也可以给sort()方法传入一个比较函数作为参数，让数组以指定的比较函数进行排序。<ul><li>比较函数返回值小于0，则第一个参数在前</li><li>比较函数返回值大于0，则第二个参数在前</li><li>两个参数值相等，则返回0<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[6, 2, 5, 1].sort(<span class="keyword">function</span>(a, b)&#123;  </span><br><span class="line">    <span class="built_in">return</span> a - b;  //数组从小到大排序</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h5><blockquote>join 方法</blockquote><ul><li>该方法用来拼接字符串。返回一个<strong>字符串</strong>。</li><li>函数原型: join(separator)。</li><li>将数组的元素组起一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符，该方法只接收一个参数：即分隔符。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3];</span><br><span class="line">console.log(arr.join()); // 1,2,3</span><br><span class="line">console.log(arr.join(<span class="string">"-"</span>)); // 1-2-3</span><br><span class="line">console.log(arr); // [1, 2, 3]（原数组不变）</span><br></pre></td></tr></table></figure></li></ul><blockquote>indexOf方法</blockquote><ul><li>该方法用于判断数组中是否有相匹配的值，第二个参数（可选的）表示从数组的某个开始位置<strong>往后检索</strong>。 </li><li>若第二个参数缺省，则从数组的开头（位置 0）开始向后查找。 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 2].indexOf(2);         //1  </span><br><span class="line">[1, 2, 3, 4, 2].indexOf(2, 2);      //4</span><br></pre></td></tr></table></figure></li></ul><blockquote>lastIndexOf 方法</blockquote><ul><li>该方法用于判断数组中是否有相匹配的值，第二个参数（可选的）表示从数组的某个开始位置<strong>往前检索</strong>。</li><li>若第二个参数缺省，从数组的末尾开始向前查找。 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,3,5,7,7,5,3,1];</span><br><span class="line">console.log(arr.lastIndexOf(5)); //5</span><br><span class="line">console.log(arr.lastIndexOf(5,4)); //2</span><br></pre></td></tr></table></figure></li></ul><blockquote>forEach 方法</blockquote><ul><li>该方法用于对数组进行遍历循环，对数组中的每一项运行给定函数。</li><li>这个方法没有返回值。</li><li>参数是function类型，默认有传参，参数分别为：遍历的数组内容val；第对应的数组索引index，数组本身arr。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3].forEach(<span class="keyword">function</span>(val, index, arr)&#123;  </span><br><span class="line">    console.log(val);  </span><br><span class="line">&#125;);</span><br><span class="line">//1 2 3</span><br></pre></td></tr></table></figure></li></ul><blockquote>toString 方法</blockquote><ul><li>该方法用于将每个元素转化为字符串并且输出用逗号隔开。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4].toString();  </span><br><span class="line">//1,2,3,4  </span><br><span class="line">//等价于[1, 2, 3, 4].join();</span><br></pre></td></tr></table></figure></li></ul><h4 id="知识拓展"><a href="#知识拓展" class="headerlink" title="知识拓展"></a>知识拓展</h4><blockquote>arguments类数组对象调用数组方法</blockquote><ul><li>因为arguments是一个类数组对象，虽然它也有下标，但它并非真正的数组，所以不能和数组一样进行排序添加之类的操作。</li><li>这种情况下，借用array.prototype对象上的方法，可以对arguments完成push，shift等操作。</li><li><code>[].slice.call(arguments)</code>就可以把arguments转换成真正的数组。<ul><li>通过call显式绑定来实现arguments对象变相有slice这个方法。</li></ul></li><li>等价于<code>Array.slice.call(arguments)</code>。</li></ul><blockquote>基本类型和引用类型的区别</blockquote><ul><li>JS变量中包含两种不同数据类型的值：<strong>基本（原始）类型值</strong>和<strong>引用（对象）类型值</strong>。</li><li><strong>基本的数据类型</strong>有：undefined，boolean，number，string，null。基本类型的访问是<strong>按值访问</strong>的，其值保存在栈内存中，就是说我们可以操作保存在变量中的实际的值。</li><li>基本类型变量的复制：从一个变量向一个变量复制时，会在栈中创建一个新值，然后把值复制到为新变量分配的位置上。</li><li><p>基本类型有以下几个特点：</p><ul><li><p>基本类型的值是不可变的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//任何方法都无法改变一个基本类型的值</span><br><span class="line">//比如一个字符串：</span><br><span class="line">var name = <span class="string">'jozo'</span>;</span><br><span class="line">name.toUpperCase(); // 输出 <span class="string">'JOZO'</span></span><br><span class="line">console.log(name); // 输出  <span class="string">'jozo'</span></span><br><span class="line">//可以发现原始的name并未发生改变，调用了toUpperCase()方法后返回的是一个新的字符串。</span><br><span class="line"></span><br><span class="line">//不能给基本类型添加属性和方法</span><br><span class="line">var person = <span class="string">'jozo'</span>;</span><br><span class="line">person.age = 22;</span><br><span class="line">person.method = <span class="function"><span class="title">function</span></span>()&#123;//...&#125;;</span><br><span class="line">console.log(person.age); // undefined</span><br><span class="line">console.log(person.method); // undefined</span><br><span class="line">//该例子说明基本类型是不可变的；</span><br></pre></td></tr></table></figure></li><li><p>基本类型的比较是<strong>值的比较</strong>。只有在它们的值相等的时候它们才相等。</p></li><li>基本类型的变量是存放在栈区的（栈区指内存里的栈内存）。</li></ul></li><li><p>引用数据类型：引用数据类型值指保存在<strong>堆内存</strong>中的对象。也就是，变量中保存的实际上的只是一个指针，这个指针指向内存中的另一个位置，该位置保存着对象。访问方式是按引用访问。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = new Object();</span><br></pre></td></tr></table></figure><p><img src="/images/object.png"></p><ul><li><p>当操作时，需要先从栈中读取内存地址，然后再延指针找到保存在堆内存中的值再操作。</p></li><li><p><strong>引用类型</strong>又称为对象类型，如对象、数组等。引用类型有以下几个特点：</p></li><li><p>引用类型的值是可变的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//可以为引用类型添加属性和方法，也可以删除其属性和方法，如：</span><br><span class="line">var person = &#123;&#125;;//创建个空对象 --引用类型</span><br><span class="line">person.name = <span class="string">'jozo'</span>;</span><br><span class="line">person.age = 22;</span><br><span class="line">person.sayName = <span class="function"><span class="title">function</span></span>()&#123;console.log(person.name);&#125; </span><br><span class="line">person.sayName();// <span class="string">'jozo'</span></span><br><span class="line">delete person.name; //删除person对象的name属性</span><br><span class="line">person.sayName(); // undefined</span><br><span class="line">//说明引用类型可以拥有属性和方法，并且是可以动态改变的。</span><br></pre></td></tr></table></figure></li><li><p>引用类型的值是同时保存在栈内存和堆内存中的对象。JS中引用类型的值是<strong>按引用访问</strong>的。</p></li><li>引用类型的比较是<strong>引用的比较</strong>，即<strong>比较</strong>两个对象的堆内存中的<strong>地址</strong>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var person1 = &#123;&#125;;</span><br><span class="line">var person2 = &#123;&#125;;</span><br><span class="line">console.log(person1 == person2); // <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>基本类型</strong>在赋值操作后，两个变量是<strong>相互不受影响</strong>的。在从一个变量向另一个变量赋值基本类型时，会在该变量上创建一个新值，然后再把该值复制到为新变量分配的位置上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a = 10;</span><br><span class="line">var b = a;</span><br><span class="line">a++ ;</span><br><span class="line">console.log(a); // 11</span><br><span class="line">console.log(b); // 10 , b值只是a值的一个副本，与a完全独立</span><br></pre></td></tr></table></figure></li><li><p><strong>引用类型</strong>的赋值其实是对象保存在栈区地址<strong>指针的赋值</strong>，因此两个变量指向同一个对象，任何的操作都会<strong>相互影响</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var a = &#123;&#125;; // a保存了一个空对象的实例</span><br><span class="line">var b = a;  // a和b都指向了这个空对象</span><br><span class="line">a.name = <span class="string">'jozo'</span>;</span><br><span class="line">console.log(a.name); // <span class="string">'jozo'</span></span><br><span class="line">console.log(b.name); // <span class="string">'jozo'</span></span><br><span class="line">b.age = 22;</span><br><span class="line">console.log(b.age);// 22</span><br><span class="line">console.log(a.age);// 22</span><br><span class="line">console.log(a == b);// <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="/images/object2.png"></p></li></ul><blockquote>数组的引用与值传递</blockquote><ul><li>数组属于<strong>引用类型</strong>。<strong>数组的赋值（引用）</strong>其实是对象保存在栈区地址<strong>指针的赋值</strong>，因此两个数组指向同一个对象，任何的操作都会相互影响。</li><li>在<strong>不影响原值</strong>的前提下<strong>复制一个数组</strong>的过程称为<strong>数组值传递</strong>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/*数组的引用与值传递*/</span><br><span class="line">var a=[1,2,3];</span><br><span class="line">var b=[];</span><br><span class="line">//数组引用</span><br><span class="line">b=a;</span><br><span class="line">//数组值传递</span><br><span class="line">b=a.concat();//方式一</span><br><span class="line">b=a.slice(0);//方式二</span><br><span class="line">//方式三，采用遍历。</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基本内容&quot;&gt;&lt;a href=&quot;#基本内容&quot; class=&quot;headerlink&quot; title=&quot;基本内容&quot;&gt;&lt;/a&gt;基本内容&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;JavaScript中创建数组有两种方式，第一种是使用&lt;strong&gt;Array构造函数&lt;/strong&gt;，另一种是使用&lt;strong&gt;数组字面量表示法&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;有三种方法可以用来判断变量是否为数组(Array)，分别是&lt;code&gt;instance of&lt;/code&gt;、&lt;code&gt;constructor&lt;/code&gt;和&lt;code&gt;isArray&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;数组的方法有&lt;strong&gt;数组原型方法&lt;/strong&gt;，也有从object对象继承来的方法，常见的数组原型方法主要有：&lt;ul&gt;
&lt;li&gt;join()&lt;/li&gt;
&lt;li&gt;push()和pop()&lt;/li&gt;
&lt;li&gt;shift() 和 unshift()&lt;/li&gt;
&lt;li&gt;sort()&lt;/li&gt;
&lt;li&gt;reverse()&lt;/li&gt;
&lt;li&gt;concat()&lt;/li&gt;
&lt;li&gt;slice()&lt;/li&gt;
&lt;li&gt;splice()&lt;/li&gt;
&lt;li&gt;indexOf()和 lastIndexOf() （ES5新增）&lt;/li&gt;
&lt;li&gt;forEach() （ES5新增）
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Cookie与Session的区别与应用</title>
    <link href="https://chongtianhong.github.io/2018/02/18/cookie/"/>
    <id>https://chongtianhong.github.io/2018/02/18/cookie/</id>
    <published>2018-02-18T05:44:34.000Z</published>
    <updated>2018-02-18T15:49:40.243Z</updated>
    
    <content type="html"><![CDATA[<ul><li>浏览器的缓存机制提供了可以<strong>将用户数据存储在客户端上</strong>的方式，可以利用<strong>cookie,session等</strong>与<strong>服务端</strong>进行<strong>数据交互</strong>。</li><li>Cookie和Session都是<strong>用来跟踪浏览器用户身份</strong>的<strong>会话方式</strong>。<a id="more"></a></li></ul><h4 id="Cookie的概念"><a href="#Cookie的概念" class="headerlink" title="Cookie的概念"></a>Cookie的概念</h4><ul><li>Cookie是浏览器（User Agent）访问一些网站后，这些<strong>网站存放在客户端的一组数据</strong>，用于<strong>使网站等跟踪用户</strong>，<strong>实现用户自定义功能</strong>。</li><li>Cookie的<strong>Domain和Path属性</strong>标识了这个Cookie是<strong>哪一个网站发送给浏览器</strong>的。</li><li>Cookie的<strong>Expires属性</strong>标识了Cookie的<strong>有效时间</strong>，当Cookie的<strong>有效时间过了</strong>之后，这些<strong>数据就被自动删除</strong>了。<ul><li>如果<strong>不设置过期时间</strong>，则表示这个<strong>Cookie生命周期为浏览器会话期间</strong>，只要<strong>关闭浏览器窗口，Cookie就消失</strong>了。这种Cookie被称为<strong>会话Cookie</strong>。<strong>会话Cookie</strong>一般不保存在硬盘上而是<strong>保存在内存里</strong>。</li><li>如果<strong>设置了过期时间</strong>，浏览器就会把<strong>Cookie保存到硬盘</strong>上，<strong>关闭后再次打开浏览器</strong>，这些<strong>Cookie依然有效直到超过设定的过期时间</strong>。</li></ul></li><li><strong>存储在硬盘上的Cookie</strong>可以<strong>在不同的浏览器进程间共享</strong>，比如两个IE窗口。</li><li>对于<strong>保存在内存的Cookie</strong>，不同的浏览器有不同的处理方式。</li></ul><h4 id="Session的概念"><a href="#Session的概念" class="headerlink" title="Session的概念"></a>Session的概念</h4><ul><li><strong>Session</strong>是<strong>存放在服务器端</strong>、用来存放用户数据的（类似于HashTable结构）。</li><li>当浏览器<strong>第一次发送请求</strong>时，服务器<strong>自动生成</strong>了一个<strong>HashTable</strong>和一个<strong>Session ID</strong>用来唯一标识这个HashTable，并将其<strong>通过响应发送到浏览器</strong>。</li><li>当浏览器<strong>第二次发送请求</strong>，会<strong>将前一次服务器响应中的Session ID放在请求中</strong>一并<strong>发送到服务器</strong>上，服务器<strong>从请求中提取出Session ID</strong>，并和保存的所有Session ID进行对比，<strong>找到这个用户对应的HashTable</strong>。</li><li>一般情况下，服务器会在一定时间内（默认20分钟）保存这个HashTable，<strong>过了时间限制，就会销毁这个HashTable</strong>。<ul><li>在销毁之前，程序员可以将用户的一些数据以Key和Value的形式暂时存放在这个HashTable中。</li><li>也有使用数据库将这个HashTable序列化后保存起来的，这样的好处是没了时间的限制，坏处是随着时间的增加，这个数据库会急速膨胀，特别是访问量增加的时候。</li><li>一般还是采取前一种方式，以减轻服务器压力。</li></ul></li></ul><h4 id="Cookie和Session的区别"><a href="#Cookie和Session的区别" class="headerlink" title="Cookie和Session的区别"></a>Cookie和Session的区别</h4><ol><li><strong>保持状态</strong>：<ul><li><strong>Cookie</strong>保存在<strong>浏览器端</strong>，服务端可以知道其中的信息。</li><li><strong>Session</strong>保存在<strong>服务器端</strong>，客户端不知道其中的信息。</li></ul></li><li><strong>使用方式</strong>：<ul><li><strong>Cookie机制</strong>：<ul><li>如果不在浏览器中设置过期时间，<strong>Cookie被保存在内存中，生命周期随浏览器的关闭而结束</strong>，这种Cookie简称<strong>会话Cookie</strong>。</li><li>如果在浏览器中设置了Cookie的过期时间，<strong>Cookie被保存在硬盘中，关闭浏览器后，Cookie数据仍然存在，直到过期时间结束才消失</strong>。</li><li>Cookie是<strong>服务器发给客户端的特殊信息</strong>，Cookie是<strong>以文本的方式保存在客户端</strong>，每次请求时都带上它。</li></ul></li><li><strong>Session机制</strong>：<ul><li>当服务器收到请求<strong>需要创建Session对象</strong>时，首先会<strong>检查客户端请求中是否包含sessionid</strong>。<ul><li>如果<strong>有sessionid</strong>，服务器将<strong>根据该id返回对应Session对象</strong>。</li><li>如果客户端请求中<strong>没有sessionid</strong>，服务器会<strong>创建新的Session对象</strong>，并<strong>把sessionid</strong>在本次响应中<strong>返回给客户端</strong>。</li></ul></li><li>通常<strong>使用Cookie方式存储sessionid</strong>到<strong>客户端</strong>，在交互中浏览器按照规则将sessionid发送给服务器。</li><li>如果<strong>用户禁用Cookie</strong>，则要<strong>使用URL重写</strong>，可以通过response.encodeURL(url) 进行实现。API对encodeURL的解释为：<ul><li>当浏览器支持Cookie时，url不做任何处理。</li><li>当浏览器不支持Cookie的时候，将会重写url将SessionID拼接到访问地址后。</li></ul></li></ul></li></ul></li><li><strong>存储内容</strong>：<ul><li><strong>Cookie</strong>只能保存<strong>字符串类型</strong>，以文本的方式。</li><li><strong>Session</strong>中保存的是<strong>对象</strong>（通过与Hashtable类似的数据结构来保存），能支持任何类型的<strong>对象</strong>(Session中可含有多个对象)。</li></ul></li><li><strong>存储的大小</strong>：<ul><li>Cookie：单个Cookie保存的数据不能超过4kb.</li><li>Session大小没有限制。</li></ul></li><li><strong>安全性</strong>：<ul><li>针对Cookie所存在的攻击：Cookie欺骗，Cookie截获。</li><li><strong>Session的安全性大于Cookie</strong>。原因如下：<br>（1）sessionID<strong>存储在Cookie中</strong>，若要攻破Session首先要攻破Cookie；<br>（2）sessionID是要有人登录，或者启动session_start才会有，所以<strong>攻破Cookie也不一定能得到sessionID</strong>；<br>（3）第二次启动session_start后，前一次的sessionID就失效了，Session过期后，sessionID也随之失效。<br>（4）sessionID是<strong>加密</strong>的。<br>（5）综上所述，攻击者必须在<strong>短时间内</strong>攻破<strong>加密的</strong>sessionID，这很难。</li></ul></li><li><strong>路径区分</strong>：<ul><li>Session不能区分路径，同一个用户在访问一个网站期间，所有的Session在任何一个地方都可以访问到。</li><li>Cookie中如果设置了路径参数，那么同一个网站中不同路径下的Cookie互相是访问不到的。</li></ul></li><li><strong>应用场景</strong>：<ul><li><strong>Cookie</strong>：<br>（1）判断用户是否登陆过网站，以便下次登录时能够实现自动登录（或者记住密码）。如果我们删除Cookie，则每次登录必须重新填写登录的相关信息。<br>（2）保存上次登录的时间等信息。<br>（3）保存上次查看的页面。<br>（4）浏览计数。</li><li><strong>Session</strong>：Session用于保存每个用户的专用信息，变量的值保存在服务器端，通过SessionID来区分不同的客户。<br>（1）网上商城中的购物车。<br>（2）保存用户登录信息。<br>（3）将某些数据放入session中，供同一用户的不同页面使用。<br>（4）防止用户非法登录。</li></ul></li><li><strong>缺点</strong>：<ul><li><strong>Cookie</strong>：<br>（1）大小受限。<br>（2）用户可以操作（禁用）Cookie，使功能受限。<br>（3）安全性较低。<br>（4）有些状态不可能保存在客户端。<br>（5）每次访问都要传送Cookie给服务器，浪费带宽。<br>（6）Cookie数据有路径（path）的概念，可以限制Cookie只属于某个路径下。</li><li><strong>Session</strong>：<br>（1）Session保存的东西越多，就越占用服务器内存，对于用户在线人数较多的网站，服务器的内存压力会比较大。<br>（2）依赖于Cookie（sessionID保存在Cookie），如果禁用Cookie，则要使用URL重写，不安全。<br>（3）创建Session变量有很大的随意性，可随时调用，不需要开发者做精确地处理，所以，过度使用Session变量将会导致代码不可读而且不好维护。</li></ul></li></ol><h4 id="Session和Cookie的应用"><a href="#Session和Cookie的应用" class="headerlink" title="Session和Cookie的应用"></a>Session和Cookie的应用</h4><blockquote>利用Cookie实现自动登录</blockquote><ul><li>当用户在某个网站注册后，就会收到一个惟一用户ID的Cookie。</li><li>客户后来重新连接时，这个用户ID会自动返回，服务器对它进行检查，确定它是否为注册用户且选择了自动登录，从而使用户无需给出明确的用户名和密码，就可以访问服务器上的资源。</li></ul><blockquote>实现跨窗口的会话跟踪</blockquote><ul><li>通常session、cookie是<strong>不能跨窗口使用</strong>的，当我们新开了一个浏览器窗口进入相同页面时，系统会赋予我们一个新的sessionid，这样我们就<strong>达不到信息共享的目的</strong>。</li><li><strong>解决方案</strong>：我们可以先把sessionid保存在persistent cookie中，然后在新窗口中读出来，就可以得到上一个窗口SessionID，这样通过session cookie和persistent cookie的结合就能实现跨窗口的会话跟踪（session tracking）。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;浏览器的缓存机制提供了可以&lt;strong&gt;将用户数据存储在客户端上&lt;/strong&gt;的方式，可以利用&lt;strong&gt;cookie,session等&lt;/strong&gt;与&lt;strong&gt;服务端&lt;/strong&gt;进行&lt;strong&gt;数据交互&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;Cookie和Session都是&lt;strong&gt;用来跟踪浏览器用户身份&lt;/strong&gt;的&lt;strong&gt;会话方式&lt;/strong&gt;。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Web" scheme="https://chongtianhong.github.io/tags/Web/"/>
    
      <category term="Cookie" scheme="https://chongtianhong.github.io/tags/Cookie/"/>
    
      <category term="Session" scheme="https://chongtianhong.github.io/tags/Session/"/>
    
  </entry>
  
  <entry>
    <title>web前端性能优化</title>
    <link href="https://chongtianhong.github.io/2018/02/17/web/"/>
    <id>https://chongtianhong.github.io/2018/02/17/web/</id>
    <published>2018-02-16T16:11:15.000Z</published>
    <updated>2018-02-18T13:49:54.548Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h4><ul><li><strong>前端性能优化</strong>是指从用户访问资源到资源完整的展现在用户面前的过程中，通过技术手段和优化策略，缩短每个步骤的处理时间从而<strong>提升整个资源的访问和呈现速度</strong>。<ul><li>在构建web站点的过程中，任何一个细节都有可能影响网站的访问速度，如果不了解性能优化知识，很多不利网站访问速度的因素会形成累加，从而严重影响网站的性能，导致网站访问速度变慢，用户体验低下，最终导致用户流失。</li></ul></li><li><strong>性能黄金法则</strong>：只有10%~20%的最终用户响应时间是用在<strong>从Web服务器获取HTML文档并传送到浏览器的</strong>，其余的80%~90%时间花在<strong>下载页面中的所有组件</strong>上。<a id="more"></a></li><li>网站一般可划分为前端和后台。我们可以理解成<strong>后台是用来实现网站的功能的</strong>，比如：实现用户注册，用户能够为文章发表评论等等，而<strong>前端属于功能的表现</strong>，并且影响用户访问体验的绝大部分来自前端页面。</li><li>网站前端的用户体验决定了用户是否想要去使用网站的功能，而网站的功能决定了用户是否会一票否决前端体验。<ul><li>网站的加载速度严重影响了用户体验，也决定了这个网站的生死存亡。</li></ul></li></ul><blockquote>从<strong>浏览器发起请求到页面能正常浏览</strong>经过以下9个阶段（process）：</blockquote><ol><li>预处理</li><li>域名（DNS）解析</li><li>发起TCP的3次握手</li><li>建立TCP连接</li><li>发起HTTP请求</li><li>等待服务器响应</li><li>接受HTML代码</li><li>解析HTML代码，并请求HTML代码中的资源（如js、css、图片等）</li><li>浏览器对页面进行渲染呈现给用户</li></ol><blockquote>TCP的3次握手：</blockquote><ul><li>HTTP请求<strong>应用层协议</strong>是建立在TCP<strong>传输层协议</strong>之上的。在浏览器发送HTTP请求之前，会先通过三次握手建立TCP连接，提供可靠传输。</li></ul><h4 id="性能优化的具体方法"><a href="#性能优化的具体方法" class="headerlink" title="性能优化的具体方法"></a>性能优化的具体方法</h4><ul><li>可从<strong>内容层面</strong>、<strong>网络传输阶段</strong>、<strong>渲染阶段</strong>、<strong>脚本执行阶段</strong>四个方面对前端性能进行优化。</li></ul><h5 id="内容层面"><a href="#内容层面" class="headerlink" title="内容层面"></a>内容层面</h5><h6 id="1-DNS解析优化"><a href="#1-DNS解析优化" class="headerlink" title="1. DNS解析优化"></a>1. DNS解析优化</h6><ul><li>DNS也是开销，通常浏览器查找一个给定域名的IP地址要花费20~120毫秒，在完成域名解析之前，浏览器不能从服务器加载到任何东西。</li></ul><blockquote>1）减少DNS查询次数</blockquote><ul><li>DNS查询也消耗响应时间，如果我们的网页内容来自各个不同的domain (比如嵌入了开放广告，引用了外部图片或脚本)，那么客户端首次解析这些domain也需要消耗一定的时间。DNS查询结果缓存在本地系统和浏览器中一段时间，所以<strong>DNS查询</strong>一般是<strong>对首次访问响应速度有所影响</strong>。</li><li>同一个页面的<strong>请求资源应尽量少的使用不同的主机名</strong>，这可以<strong>减少网站并行下载的数量</strong>，但很多网站为了加速下载资源其实是特意用了多个主机名，这里需要做一个权衡。</li></ul><blockquote>2）DNS缓存</blockquote><ul><li>为了增加访问效率，<strong>计算机</strong>有<strong>DNS缓存机制</strong>，当访问过某个网站并得到其IP后，会将其域名和IP缓存下来，下一次访问的时候，就不需要再请求域名服务器获取IP，直接使用缓存中的IP，提高了响应的速度。</li><li>缓存是有有效时间的，当过了有效时间后，再次请求网站时，还需要先请求域名解析。</li></ul><blockquote>3）HTTP keep-alive</blockquote><ul><li>HTTP协议采用“请求-应答”模式：当使用<strong>普通模式</strong>，即非KeepAlive模式时，每个请求/应答客户和服务器都要<strong>新建一个连接</strong>，<strong>完成之后立即断开连接</strong>（HTTP协议为<strong>无连接</strong>的协议）。</li><li>使用<strong>keep-alive模式</strong>可以改善这种状态，即在一次TCP连接中可以持续发送多份数据而不会断开连接。通过使用keep-alive机制，可以减少TCP连接建立次数，也意味着可以减少TIME_WAIT状态连接，以此提高性能和提高httpd服务器的吞吐率(更少的tcp连接意味着更少的系统内核调用,socket的accept()和close()调用)。</li><li>但是，<strong>长时间的TCP连接容易导致系统资源无效占用</strong>。配置不当的keep-alive，有时比重复利用连接带来的损失还更大。所以，正确地设置keep-alive timeout时间非常重要。</li></ul><blockquote>4）适当的主机域名</blockquote><ul><li>当客户端DNS缓存（浏览器和操作系统）缓存为空时，DNS查找的数量与要加载的Web页面中唯一主机名的数量相同，包括页面URL、脚本、样式表、图片、Flash对象等的主机名。<strong>减少主机名的数量</strong>就可以<strong>减少DNS查找的数量</strong>。</li></ul><ul><li><strong>减少唯一主机名的数量</strong>会潜在<strong>减少页面中并行下载的数量</strong>，这样减少主机名和并行下载的方案会<strong>产生矛盾</strong>，这里需要做一个权衡。建议将组件放到至少两个但不多于4个主机名下，减少DNS查找的同时也允许高度并行下载。</li></ul><h6 id="2-避免重定向（-还是需要的）"><a href="#2-避免重定向（-还是需要的）" class="headerlink" title="2. 避免重定向（/还是需要的）"></a>2. 避免重定向（/还是需要的）</h6><ul><li>重定向用于将用户从一个URL<strong>重新路由</strong>到另一个URL。</li><li>当页面发生了<strong>重定向</strong>，就会<strong>延迟整个HTML文档的传输</strong>。在HTML文档到达之前，页面中不会呈现任何东西，也没有任何组件会被下载。</li><li>一种<strong>最耗费资源、经常发生而很容易被忽视的重定向</strong>是URL的最后缺少<code>/</code>。</li><li>在定义链接地址的href属性的时候，尽量使用<strong>最完整的、直接的地址</strong>：<ul><li>使用www.cnblogs.com 而不是cnblogs.com</li><li>使用cn.bing.com 而不是bing.com</li><li>使用www.google.com.hk 而不是google.com</li><li>使用www.mysite.com/products/ 而不是 www.mysite.com/products</li></ul></li><li>在使用Response.Redirect的时候，设置第二个参数为false。</li><li>如果涉及到<strong>从测试环境到生产环境的迁移</strong>，建议<strong>通过DNS中的CNAME的机制来定义别名</strong>，而不是强制地重定向来实现。</li></ul><h6 id="3-拆分域名"><a href="#3-拆分域名" class="headerlink" title="3. 拆分域名"></a>3. 拆分域名</h6><ul><li>可利用<strong>多个域名来存储网站资源</strong>。<ul><li>同一时间针对同一域名下的请求有一定数量限制，超过限制数目的请求会被阻塞。大多数浏览器的并发数量都控制在6以内。有些资源的请求时间很长，因而会阻塞其他资源的请求。因此，对于一些静态资源，如果放到不同的域名下面就能实现与其他资源的并发请求。</li></ul></li><li><strong>过多的域名会使DNS解析负担加重</strong>，因此一般控制在2-4个。</li></ul><blockquote>放到同个域名下的内容分类：</blockquote><ul><li>页面类：html、htm等</li><li>样式类：js、css等</li><li>图片类：jpg、png、gif等</li><li>动态类：php、asp等</li></ul><h6 id="4-避免404错误"><a href="#4-避免404错误" class="headerlink" title="4. 避免404错误"></a>4. 避免404错误</h6><ul><li>特别要避免给404指定一个停摆页面，否则所有404错误都将会加载一次页面。</li></ul><h5 id="网络传输阶段"><a href="#网络传输阶段" class="headerlink" title="网络传输阶段"></a>网络传输阶段</h5><h6 id="1-减少传输过程中实体的大小"><a href="#1-减少传输过程中实体的大小" class="headerlink" title="1. 减少传输过程中实体的大小"></a>1. 减少传输过程中实体的大小</h6><blockquote>1）合理设置 HTTP缓存</blockquote><ul><li>页面的初次访问者会进行很多HTTP请求，但是<strong>通过使用一个长久的Expires头</strong>，可以使这些组件被缓存，下次访问的时候，就可以减少不必要的HTPP请求，从而<strong>提高加载速度</strong>。</li><li>根据<strong>资源的变化频率</strong>为文件头指定Expires，使内容具有缓存性。</li><li>原则：能<strong>缓存越多越好</strong>，能<strong>缓存越久越好</strong>。</li><li><strong>Web服务器</strong>通过<strong>Expires header</strong>告诉<strong>客户端</strong>可以使用一个组件的当前副本，直到指定的时间为止。</li></ul><blockquote>2）cookie优化</blockquote><ul><li>减少Cookie大小<ul><li>因为Cookie是<strong>本地的磁盘文件</strong>，Cookie包含在每次请求和响应中，每次浏览器都会去读取相应的Cookie，<strong>太大的cookie会严重影响数据传输</strong>，因此哪些数据需要写入cookie需要慎重考虑，尽量减少cookie中传输的数据量。</li></ul></li><li>页面内容使用无cookie域名<ul><li>对于<strong>大多数网站的静态资源的访问</strong>，如CSS、script等，<strong>发送cookie没有意义</strong>，可以考虑<strong>采用不同的domain来单独存放这些静态文件</strong>，避免请求静态资源时发送cookie，<strong>减少cookie传输次数</strong>。</li><li>这样做不仅可以减少cookie大小从而提高响应速度，而且另一个好处是<strong>有些proxy拒绝缓存带有cookie的内容</strong>，如果能将这些静态资源cookie去除，那就可以得到这些proxy的缓存支持。</li></ul></li></ul><blockquote>3）文件压缩（Accept-Encoding：g-zip）</blockquote><ul><li>在<strong>服务器端</strong>对文件进行<strong>压缩</strong>，在<strong>浏览器端</strong>对文件<strong>解压缩</strong>，可有效减少通信传输的数据量。</li><li>如果可以的话，尽可能的<strong>将外部的脚本、样式进行合并</strong>，多个合为一个。</li><li><strong>文本文件的压缩效率可达到80%以上</strong>，因此HTML、CSS、javascript文件<strong>启用GZip压缩</strong>可达到较好的效果。</li><li>但是<strong>压缩对服务器和浏览器产生一定的压力</strong>，在通信带宽良好，而服务器资源不足的情况下要权衡考虑。</li></ul><h6 id="2-减少HTTP请求的次数（改善响应时间最简单的途径）"><a href="#2-减少HTTP请求的次数（改善响应时间最简单的途径）" class="headerlink" title="2. 减少HTTP请求的次数（改善响应时间最简单的途径）"></a>2. 减少HTTP请求的次数（改善响应时间最简单的途径）</h6><blockquote>1）合并CSS和JS文件</blockquote><ul><li>将多个样式表或者脚本文件合并到一个文件中，可以<strong>减少HTTP请求的数量</strong>从而缩短效应时间。</li></ul><blockquote>2）合并图片（css sprites）</blockquote><ul><li><strong>合并后的图片</strong>会比分离的图片总和要<strong>小</strong>，因为它降低了图片自身的开销，譬如颜色表、格式信息等。</li></ul><blockquote>3）图片较多的页面也可以使用 <strong>懒加载（lazyLoad）</strong>等技术进行优化。</blockquote><ul><li>这条策略实际上并不一定能减少 HTTP请求数，但是却能在某些条件下或者页面刚加载时减少HTTP请求数。</li><li>对于图片而言，在页面刚加载的时候可以只加载第一屏，当用户继续往后滚屏的时候才加载后续的图片。这样一来，假如用户只对第一屏的内容感兴趣时，那剩余的图片请求就都节省了。</li></ul><h6 id="3-异步加载（并发-requirejs）"><a href="#3-异步加载（并发-requirejs）" class="headerlink" title="3. 异步加载（并发,requirejs）"></a>3. 异步加载（并发,requirejs）</h6><ul><li>异步加载又叫<strong>非阻塞加载</strong>，浏览器在下载JS的同时，还会继续进行后续页面的处理。</li><li>JS的加载分为两个部分：下载和执行。<strong>异步加载只是解决了下载的问题</strong>，但是代码在下载完成后就会立即执行，在<strong>执行过程中浏览器处于阻塞状态，响应不了任何需求</strong>。</li></ul><h6 id="4-预加载、JS延迟加载、按需加载"><a href="#4-预加载、JS延迟加载、按需加载" class="headerlink" title="4. 预加载、JS延迟加载、按需加载"></a>4. 预加载、JS延迟加载、按需加载</h6><blockquote> 预加载</blockquote><ul><li>预加载是一种<strong>浏览器机制</strong>，使用<strong>浏览器空闲时间</strong>来预先下载/加载用户接下来很可能会浏览的页面/资源，当用户访问某个预加载的链接时，如果从缓存命中,页面就得以快速呈现。</li></ul><blockquote>JS延迟加载</blockquote><ul><li>有些JS代码在某些情况在需要使用，并不是页面初始化的时候就要用到。延迟加载就是为了解决这个问题。将JS切分成许多模块，<strong>页面初始化时只加载需要立即执行的JS</strong>，然后其它JS的加载延迟到第一次需要用到的时候再加载。类似图片的延迟加载。<ul><li>解决思路：可以利用异步加载将JS缓存起来，但不立即执行，需要的时候再执行。</li></ul></li><li>JS延迟加载机制(LazyLoad)：简单来说，就是在<strong>浏览器滚动到某个位置时触发相关的函数</strong>，实现页面元素的加载或者某些动作的执行。</li></ul><blockquote>按需加载</blockquote><ul><li>按需加载是前端性能优化中的一项重要措施，<strong>按需加载指的是当用户触发了动作时才加载对应的功能</strong>。触发的动作，是要看具体的业务场景而言，包括但不限于以下几个情况：鼠标点击、输入文字、拉动滚动条，鼠标移动、窗口大小更改等。加载的文件，可以是JS、图片、CSS、HTML等。</li></ul><h6 id="5-使用CDN-Content-Delivery-Network-内容分发网络"><a href="#5-使用CDN-Content-Delivery-Network-内容分发网络" class="headerlink" title="5. 使用CDN(Content Delivery Network, 内容分发网络)"></a>5. 使用CDN(Content Delivery Network, 内容分发网络)</h6><ul><li>使用CDN加速，使用户<strong>从离自己最近的服务器下载文件</strong>。<ul><li>如果<strong>应用程序web服务器</strong>离用户更近，那么一个HTTP请求的响应时间将缩短。另一方面，如果<strong>组件web服务器</strong>离用户更近，则多个HTTP请求的响应时间将缩短。</li></ul></li><li>CDN缓存的一般是<strong>静态资源</strong>，如图片、文件、CSS、script脚本、静态网页等，这些文件访问频度很高，将其缓存在CDN可<strong>极大改善网页的打开速度</strong>。</li></ul><h6 id="6-反向代理"><a href="#6-反向代理" class="headerlink" title="6. 反向代理"></a>6. 反向代理</h6><ul><li>反向代理方式是指<strong>代理原始服务器来接受来自Internet的链接请求</strong>，然后<strong>将请求转发给内部网络上的原始服务器</strong>，并<strong>将从原始服务器上得到的结果转发给Internet上请求数据的客户端</strong>。</li><li>反向代理就是位于<strong>Internet</strong>和<strong>原始服务器</strong>之间的服务器，对于客户端来说就表现为一台服务器，<strong>客户端所发送的请求都是直接发送给反向代理服务器</strong>，然后<strong>由反向代理服务器统一调配</strong>。</li><li>和传统的代理服务器一样，反向代理服务器也有<strong>保护网站安全</strong>的作用，来自互联网的请求必须经过反向代理服务器，相当于在原始服务器之间增加一道屏障。</li><li>除了安全功能，反向代理服务器也可以<strong>通过配置缓存功能加速web请求</strong>，当用户第一次访问静态内容的时候，静态内容就被缓存在反向代理服务器上，下一次用户请求静态资源时，直接从反向代理服务器返回静态内容，加速web请求访问速度，减轻原始服务器的压力。</li><li>此外，反向代理也可以<strong>实现负载均衡</strong>的功能，而通过负载均衡构建的应用集群可以提高系统总体处理能力，进而<strong>改善网站高并发情况下的性能</strong>。</li></ul><h6 id="7-AJax-优化"><a href="#7-AJax-优化" class="headerlink" title="7. AJax 优化"></a>7. AJax 优化</h6><ul><li>缓存 Ajax<ul><li><strong>POS</strong>T的请求，是<strong>不可以在客户端缓存</strong>的，每次请求都需要发送给服务器进行处理，每次都会返回状态码200（可以在服务器端对数据进行缓存，以便提高处理速度）。</li><li><strong>GET</strong>的请求，是<strong>可以（而且默认）在客户端进行缓存</strong>的，除非指定了不同的地址，否则<strong>同一个地址的AJAX请求，不会重复在服务器执行</strong>，而是返回304。</li></ul></li><li>在进行Ajax请求的时候，可以选择<strong>尽量使用get方法</strong>，这样可以使用客户端的缓存，提高请求速度。<ul><li>仅取决于cookie数量。</li></ul></li></ul><h5 id="渲染阶段"><a href="#渲染阶段" class="headerlink" title="渲染阶段"></a>渲染阶段</h5><h6 id="1-将CSS和JS放到外部文件中引用，CSS放在页面最上部，JavaScript放在页面最下面"><a href="#1-将CSS和JS放到外部文件中引用，CSS放在页面最上部，JavaScript放在页面最下面" class="headerlink" title="1.将CSS和JS放到外部文件中引用，CSS放在页面最上部，JavaScript放在页面最下面"></a>1.将CSS和JS放到外部文件中引用，CSS放在页面最上部，JavaScript放在页面最下面</h6><blockquote>CSS样式表放在页面最上部</blockquote><ul><li>浏览器会在<strong>下载完成全部CSS之后</strong>才对整个页面进行渲染，因此最好的做法是<strong>将CSS放在页面最上面</strong>，让浏览器尽快下载CSS。如果将CSS放在其他地方比如BODY中，则浏览器有可能还未下载和解析到CSS就已经开始渲染页面了，这就导致页面由无CSS状态跳转到CSS状态，用户体验比较糟糕，所以可以考虑将CSS放在HEAD中。</li><li><strong>将样式表放在头部</strong>对于实际页面加载的时间并不能造成太大影响，但是这<strong>会减少页面首屏出现的时间，使页面内容逐步呈现，改善用户体验，防止“白屏”</strong>。</li><li>样式表中的内容是<strong>绘制网页的关键信息</strong>，如果将样式表放在底部，浏览器会拒绝渲染已经下载的网页，因为<strong>大多数浏览器在实现时都努力避免重绘</strong>。</li></ul><blockquote>JS脚本放在页面最底部</blockquote><ul><li><strong>JS的下载和执行会阻塞DOM树的构建（中断了DOM树的更新）</strong>，即每次出现都会让页面等待脚本的解析和执行（不论JavaScript是内嵌的还是外链的），<strong>JavaScript代码执行完成后，才继续渲染页面</strong>。</li><li>浏览器在加载JavaScript后立即执行，有可能会阻塞整个页面，造成页面显示缓慢，因此<strong>JavaScript最好放在页面最下面</strong>。</li><li>但如果页面解析时就需要用到JavaScript，这时不合适将脚本放到底部。</li></ul><blockquote>下载脚本时<strong>并行下载</strong>是<strong>被禁用</strong>的</blockquote><ul><li>即使使用了不同的主机名，也不会启用其他的下载。因为脚本可能修改页面内容，因此<strong>浏览器会等待脚本执行完成</strong>。</li><li>另一方面是为了<strong>保证脚本能够按照正确的顺序执行</strong>，因为后面的脚本可能与前面的脚本存在依赖关系，不按照顺序执行可能会产生错误。</li></ul><h6 id="2-减少重绘（Repaint）和回流（Reflow）"><a href="#2-减少重绘（Repaint）和回流（Reflow）" class="headerlink" title="2. 减少重绘（Repaint）和回流（Reflow）"></a>2. 减少重绘（Repaint）和回流（Reflow）</h6><ul><li>Repaint（重绘）就是在<strong>一个元素的外观被改变，但没有改变布局(宽高)</strong>的情况下发生，如改变visibility、outline、背景色等等。</li><li>Reflow（回流）就是<strong>DOM的变化影响到了元素的几何属性（宽和高）</strong>，浏览器会重新计算元素的几何属性，会使渲染树中受到影响的部分失效，浏览器会验证DOM树上的所有其它结点的visibility属性，这也是<strong>Reflow低效</strong>的原因。如：改变窗囗大小、改变文字大小、内容的改变、浏览器窗口变化，style属性的改变等等。如果Reflow的过于频繁，CPU使用率就会大大增加。</li><li>每次对DOM元素的<strong>样式操作</strong>都会<strong>引发重绘</strong>，如果<strong>涉及布局</strong>还会<strong>引发回流</strong>。</li><li><strong>回流</strong>必然会引起<strong>重绘</strong>，而<strong>重绘可以单独出现</strong>。</li><li><strong>display：none</strong> 指的是元素完全不陈列出来，不占据空间，涉及到了DOM结构，故产生reflow与repaint。</li><li><strong>visibility：hidden</strong> 指的是元素不可见但存在，保留空间，不影响结构，故只产生repaint。</li></ul><blockquote>减少性能影响的办法</blockquote><ul><li><strong>避免逐项更改样式</strong>。若通过设置style属性改变结点样式，每设置一次都会导致一次reflow，所以最好通过设置class的方式，一次性更改style属性。</li><li><strong>避免循环操作DOM</strong>。创建一个documentFragment或div，在它上面应用所有DOM操作，最后再把它添加到window.document。<ul><li>也可以在一个display:none的元素上进行操作，最终把它显示出来。因为display:none上的DOM操作不会引发回流和重绘。</li></ul></li><li><strong>避免多次读取offsetLeft等属性</strong>。无法避免则将它们缓存到变量。</li><li><strong>将具有复杂动画的元素设置绝对定位或固定定位</strong>，使它脱离文档流，否则会引起父元素及后续元素大量的回流。<ul><li>如果功能需求上不能设置position为fixed或absolute，那么就要权衡速度的平滑性（使用CSS3的transition）。</li></ul></li></ul><h6 id="3-合理使用Viewport等meta头部"><a href="#3-合理使用Viewport等meta头部" class="headerlink" title="3. 合理使用Viewport等meta头部"></a>3. 合理使用Viewport等meta头部</h6><h6 id="4-减少DOM节点"><a href="#4-减少DOM节点" class="headerlink" title="4. 减少DOM节点"></a>4. 减少DOM节点</h6><ul><li>网页中元素过多对网页的加载和脚本的执行都是沉重的负担，500个元素和5000个元素在加载速度上会有很大差别。</li></ul><h6 id="5-BigPipe"><a href="#5-BigPipe" class="headerlink" title="5. BigPipe"></a>5. BigPipe</h6><ul><li>BigPipe目标：前后端分离，提高页面渲染速度。</li></ul><h6 id="6-CSS性能优化"><a href="#6-CSS性能优化" class="headerlink" title="6. CSS性能优化"></a>6. CSS性能优化</h6><ul><li><strong>慎重使用高性能属性</strong>：浮动、定位。</li><li><strong>避免使用CSS表达式</strong><ul><li>CSS表达式是动态设置CSS属性的一种强大并且危险的方式，它受到了IE5以及之后版本、IE8之前版本的支持。应该避免使用CSS表达式。</li></ul></li><li><strong>CSS的精简</strong><ul><li>移除CSS中的空白和注释。</li><li>移除空的css规则：｛｝；</li></ul></li><li><strong>合并相同的类；移除不使用的类</strong></li><li><strong>尽量减少页面重排、重绘</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/*重排*/</span><br><span class="line">/*按照css的书写顺序：*/</span><br><span class="line">位置：position、top、left、z-index、<span class="built_in">float</span>、display   </span><br><span class="line">大小：width、height、margin、padding   </span><br><span class="line">文字系列： font、line-height、color、letter-spacing   </span><br><span class="line">背景边框：background、 border   </span><br><span class="line">其它：animation、transition   </span><br><span class="line">/*重绘:*/</span><br><span class="line">border、outline、background、box-shadow</span><br><span class="line">能使用background-color,尽量不要使用background;</span><br></pre></td></tr></table></figure><ul><li><strong>标准化各种浏览器前缀</strong>：带浏览器前缀的在前，标准属性在后。</li><li><strong>不使用@import前缀</strong>，它会影响css的加载速度。</li><li><strong>充分利用css继承属性，减少代码量</strong><ul><li>常见的可以继承的属性比如： color，font-size，font-family等。</li><li>不可继承的比如： position，display，float等。</li></ul></li><li><strong>使用CSS缩写，减少代码量</strong><ul><li>颜色#ffffff使用缩写#fff</li><li>属性值为0时，不加单位（使用0代替0px等）。</li></ul></li><li><strong>避免使用 CSS Filter（CSS滤镜）</strong></li><li><strong>减少查询层级</strong>：如.header .logo 优于 .header .top .logo。</li><li><strong>减少查询范围</strong>：如.header&gt;li 优于 .header li。</li></ul><h5 id="脚本执行阶段"><a href="#脚本执行阶段" class="headerlink" title="脚本执行阶段"></a>脚本执行阶段</h5><h6 id="1-缓存节点，尽量减少节点的查找"><a href="#1-缓存节点，尽量减少节点的查找" class="headerlink" title="1. 缓存节点，尽量减少节点的查找"></a>1. 缓存节点，尽量减少节点的查找</h6><ul><li>减少对DOM元素的查询和修改，查询时可将其<strong>赋值给局部变量</strong>。<ul><li>如a.b.c.d这种查找方式非常<strong>耗性能</strong>，尽可能把它定义在变量里。</li></ul></li></ul><h6 id="2-减少节点的操作（innerHTML）"><a href="#2-减少节点的操作（innerHTML）" class="headerlink" title="2. 减少节点的操作（innerHTML）"></a>2. 减少节点的操作（innerHTML）</h6><ul><li><strong>修改和访问DOM元素</strong>会<strong>造成页面的Repaint和Reflow</strong>，更<strong>不允许循环对DOM操作</strong>。所以应合理的使用JavaScript变量储存内容，考虑大量DOM元素中循环的性能开销，在循环结束时一次性写入。</li></ul><h6 id="3-避免无谓的循环，break、continue、return的适当使用"><a href="#3-避免无谓的循环，break、continue、return的适当使用" class="headerlink" title="3. 避免无谓的循环，break、continue、return的适当使用"></a>3. 避免无谓的循环，break、continue、return的适当使用</h6><h6 id="4-事件委托（事件代理）"><a href="#4-事件委托（事件代理）" class="headerlink" title="4. 事件委托（事件代理）"></a>4. 事件委托（事件代理）</h6><ul><li>在JavaScript中，添加到页面上的<strong>事件处理程序数量</strong>将直接关系到<strong>页面的整体运行性能</strong>，因为需要不断的与DOM节点进行交互，<strong>访问DOM的次数越多，引起浏览器重绘与重排的次数也就越多</strong>，就会<strong>延长整个页面的交互就绪时间</strong>，<strong>性能优化的主要思想之一就是减少DOM操作</strong>。</li><li>如果使用<strong>事件委托</strong>，就会将所有的操作放到js程序里面，与DOM的操作就只需要交互一次，这样就能<strong>大大的减少与DOM的交互次数，提高性能</strong>。</li></ul><h6 id="5-不使用EVAL"><a href="#5-不使用EVAL" class="headerlink" title="5. 不使用EVAL"></a>5. 不使用EVAL</h6><ul><li>eval函数会运行编译器，影响性能。</li></ul><h6 id="6-最小化JavaScript代码"><a href="#6-最小化JavaScript代码" class="headerlink" title="6. 最小化JavaScript代码"></a>6. 最小化JavaScript代码</h6><ul><li>删除重复的脚本文件。</li><li>精简JavaScript代码。</li></ul><h6 id="7-使用JSON格式来进行数据交换"><a href="#7-使用JSON格式来进行数据交换" class="headerlink" title="7. 使用JSON格式来进行数据交换"></a>7. 使用JSON格式来进行数据交换</h6><ul><li>JSON转JS对象：<code>JSON.parse(str); //str为变量，即json字符串</code></li><li>JS对象转JSON：<code>JSON.stringify(obj);//obj为js对象，转为JSON字符串</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基本内容&quot;&gt;&lt;a href=&quot;#基本内容&quot; class=&quot;headerlink&quot; title=&quot;基本内容&quot;&gt;&lt;/a&gt;基本内容&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;前端性能优化&lt;/strong&gt;是指从用户访问资源到资源完整的展现在用户面前的过程中，通过技术手段和优化策略，缩短每个步骤的处理时间从而&lt;strong&gt;提升整个资源的访问和呈现速度&lt;/strong&gt;。&lt;ul&gt;
&lt;li&gt;在构建web站点的过程中，任何一个细节都有可能影响网站的访问速度，如果不了解性能优化知识，很多不利网站访问速度的因素会形成累加，从而严重影响网站的性能，导致网站访问速度变慢，用户体验低下，最终导致用户流失。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能黄金法则&lt;/strong&gt;：只有10%~20%的最终用户响应时间是用在&lt;strong&gt;从Web服务器获取HTML文档并传送到浏览器的&lt;/strong&gt;，其余的80%~90%时间花在&lt;strong&gt;下载页面中的所有组件&lt;/strong&gt;上。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Web" scheme="https://chongtianhong.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>前端工程与搜索引擎优化（SEO）</title>
    <link href="https://chongtianhong.github.io/2018/02/16/seo/"/>
    <id>https://chongtianhong.github.io/2018/02/16/seo/</id>
    <published>2018-02-16T03:20:22.000Z</published>
    <updated>2018-02-18T13:45:28.047Z</updated>
    
    <content type="html"><![CDATA[<h4 id="搜索引擎工作原理"><a href="#搜索引擎工作原理" class="headerlink" title="搜索引擎工作原理"></a>搜索引擎工作原理</h4><blockquote>当我们在输入框中输入关键词，点击搜索或查询时，然后得到结果。深究其背后的故事，搜索引擎做了很多事情。</blockquote><ul><li>搜索引擎网站，比如百度，其后台有一个非常庞大的数据库，里面存储了海量的关键词，而每个关键词又对应着很多网址，这些网址都是由<strong>百度程序（爬虫）</strong>从互联网上下载收集而来的。<strong>网络爬虫</strong>每天在互联网上爬行，从一个链接到另一个链接，下载其中的内容，进行分析提炼，找到其中的关键词，如果爬虫认为该关键词<strong>在数据库中没有</strong>而<strong>对用户是有用的便存入数据库</strong>。反之，如果爬虫认为是<strong>垃圾信息或重复信息</strong>，就<strong>舍弃不要</strong>，继续爬行，寻找最新的、有用的信息保存起来提供用户搜索。当用户搜索时，就能检索出<strong>与关键字相关的网址</strong>显示给访客。<a id="more"></a></li><li>由于一个关键字会对应多个网站，因此就出现了排序的问题，而<strong>与关键词越吻合</strong>的网址就会<strong>越靠前</strong>。</li><li>在爬虫抓取网页内容，提炼关键词的过程中，存在一个<strong>爬虫是否能读懂</strong>的问题。如果网站是Flash和JS生成的，则爬虫无法读懂网页，即使关键字再贴切也没法将网页存入数据库。相应的，如果网站内容是它的语言，那么爬虫便能看懂，它的语言即<strong>搜索引擎优化</strong>（Search Engine Optimization，简称SEO）。</li></ul><h4 id="SEO简介"><a href="#SEO简介" class="headerlink" title="SEO简介"></a>SEO简介</h4><ul><li>搜索引擎优化（Search Engine Optimization，简称SEO）是一种利用搜索引擎的搜索规则来<strong>提高目的网站</strong>在有关搜索引擎内的<strong>排名</strong>的方式。</li><li>SEO存在的意义：为了提升网页在搜索引擎自然搜索结果中的收录数量以及排序位置而做的优化行为。</li><li>SEO可以分为<strong>白帽SEO</strong>和<strong>黑帽SEO</strong>。<ul><li>白帽SEO，旨在保持良好的互联网秩序，起到了改良和规范网站设计的作用，使网站对搜索引擎和用户更加友好，并且网站也能从搜索引擎中获取合理的流量，这是<strong>搜索引擎鼓励和支持的</strong>。</li><li>黑帽SEO，利用和放大搜索引擎政策缺陷来获取更多用户的访问量，这类行为大多是欺骗搜索引擎，一般<strong>搜索引擎公司是不支持与鼓励的</strong>。</li></ul></li></ul><blockquote>针对白帽SEO，可以做什么？</blockquote><ol><li>对网站的<strong>标题（title）</strong>、<strong>关键字（keywords）</strong>、<strong>描述(description)</strong>精心设置，反映网站的定位，让搜索引擎明白网站是做什么的；</li><li>网站内容优化：内容与关键字的对应，增加关键字的密度，设置<strong>长尾关键字</strong>；<ul><li>长尾关键词(Long Tail Keyword)是指网站上非目标关键词但也可以带来搜索流量的关键词。例如，目标关键词是服装，其长尾关键词可以是男士服装、冬装、户外运动装等。长尾关键词基本属性是：可延伸性，针对性强，范围广。</li></ul></li><li>在网站上合理设置<strong>Robot.txt文件</strong>；<ul><li>网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取。百度官方建议，仅当您的网站包含不希望被搜索引擎收录的内容时，才需要使用robots.txt文件。如果您希望搜索引擎收录网站上所有内容，请勿建立robots.txt文件。</li></ul></li><li>生成针对搜索引擎友好的网站地图；</li><li>增加外部链接，到各个网站上宣传。</li></ol><h4 id="前端SEO"><a href="#前端SEO" class="headerlink" title="前端SEO"></a>前端SEO</h4><ul><li>通过<strong>网站结构布局优化</strong>和<strong>网页代码优化</strong>，使前端页面既能让浏览器用户能够看懂，也能让爬虫看懂。</li></ul><h5 id="网站结构布局优化"><a href="#网站结构布局优化" class="headerlink" title="网站结构布局优化"></a>网站结构布局优化</h5><ul><li>合理优化站点结构，我们要让爬虫看懂我们的网站，就不能设置太复杂的结构。使用<strong>扁平化结构</strong>，建立的<strong>网站目录层次越少越容易被收入</strong>。一般的<strong>中小型网站</strong>目录层次结构不要超过三层。</li></ul><blockquote>如何做到扁平化结构</blockquote><ol><li>控制首页链接数量<ul><li>网站首页是权重最高的地方，如果首页链接太少，没有“桥”，爬虫则无法继续往下爬到内页，直接影响网站收录数量。但是首页链接也不能太多，一旦太多，没有实质性的链接，很容易影响用户体验，也会降低网站首页的权重，收录效果也不好。</li><li>因此对于<strong>中小型企业网站</strong>，建议首页链接在100个以内，链接的性质可以包含页面导航、底部导航、锚文字链接等等，注意链接要<strong>建立在用户的良好体验</strong>和<strong>引导用户获取信息</strong>的基础之上。</li></ul></li><li><strong>扁平化的目录层次</strong>，尽量让搜索引擎程序跳转3次就能到达网站内的任何一个内页。<ul><li>扁平化的目录结构，比如：“植物”–&gt; “水果” –&gt; “苹果”、“桔子”、“香蕉”，通过3级就能找到香蕉了。</li></ul></li><li>导航优化<ul><li>从搜索引擎优化角度来看，导航设计最好用文字。但为了用户体验，有时也可以搭配图片导航，但是图片代码一定要进行优化，<code>&lt;img&gt;</code>标签必须添加“alt”和“title”属性，告诉搜索引擎导航的定位，即使图片未能正常显示时，用户也能看到提示文字。</li><li>其次，在每一个网页上应该加上面包屑导航，这样做的好处是：<ul><li>从用户体验方面来说，可以让用户了解当前所处的位置以及当前页面在整个网站中的位置，帮助用户很快了解网站组织形式，从而形成更好的位置感，同时提供了返回各个页面的接口，方便用户操作；</li><li>从SEO方面来说，能够让网络爬虫清楚的了解网站结构，同时还增加了大量的内部链接，方便抓取，降低跳出率。</li></ul></li></ul></li><li>网站的结构布局（<strong>不可忽略的细节</strong>）<ul><li>页面头部：logo及主导航，以及用户的信息。</li><li>页面主体：左边正文，包括面包屑导航及正文；右边放热门文章及相关文章，好处：<ul><li>留住访客，让访客多停留；</li><li>对“蜘蛛”而言，这些文章属于相关链接，增强了页面相关性，也能增强页面的权重。</li></ul></li><li>页面底部：版权信息和友情链接。</li></ul></li><li>分页处理<ul><li>栏目内有多条记录时，我们会进行分页处理。</li><li>分页导航推荐写法：“首页 1 2 3 4 5 6 7 8 9 下拉框”，这样“蜘蛛”能够根据相应页码直接跳转，下拉框直接选择页面跳转。</li><li>而不推荐，“首页 下一页 尾页”这种写法，特别是当分页数量特别多时，“蜘蛛”需要经过很多次往下爬，才能抓取，会很累、会容易放弃。</li></ul></li><li>控制页面的大小，减少http请求，提高网站的加载速度。<ul><li>一个页面最好不要超过100k，页面太大，加载速度慢。当速度很慢时，用户体验不好，留不住访客，并且一旦超时，网络爬虫也会离开。</li></ul></li></ol><h5 id="网页代码优化"><a href="#网页代码优化" class="headerlink" title="网页代码优化"></a>网页代码优化</h5><ol><li><code>&lt;title&gt;</code>标题：<ul><li>标题要强调重点，尽量把重要的关键词放在前面，关键词不要重复出现，尽量做到每个页面的<code>&lt;title&gt;</code>不要设置相同的内容。</li></ul></li><li><code>&lt;meta keywords&gt;</code>关键词标签：<ul><li>列举出几个重要关键字即可，不要过分堆砌。</li></ul></li><li><code>&lt;meta description&gt;</code>网页描述标签：<ul><li>需要高度概括网页内容，切记不能太长，不要过分堆砌关键词，每个页面的描述也要有所不同。</li></ul></li><li>对于<code>&lt;body&gt;</code>中的标签，要遵循<strong>代码语义化</strong><ul><li>在适当的位置使用适当的标签，用正确的标签做正确的事。让阅读源码者和爬虫都一目了然。比如：h1-h6 是用于标题类的，<code>&lt;nav&gt;</code>标签是用来设置页面主导航的，<code>&lt;span&gt;</code>标签是html里面最没有语义的等。</li></ul></li><li><code>&lt;a&gt;</code>链接标签：<ul><li>对于页内链接，要加 “title” 属性加以说明，让访客和网络爬虫知道。</li><li>对于外部链接，链接到其他网站的，则需要加上rel=”nofollow” 属性, 告诉爬虫不要爬取该链接，因为一旦爬虫爬了外部链接之后，就不会再回来了。</li></ul></li><li><code>&lt;h1&gt;</code>标题标签：<ul><li>正文标题要用<code>&lt;h1&gt;</code>标签：因为爬虫认为它最重要，若不喜欢<code>&lt;h1&gt;</code>的默认样式可以通过CSS设置。</li><li>尽量做到正文标题用<code>&lt;h1&gt;</code>标签，副标题用<code>&lt;h2&gt;</code>标签, 而其它不重要的地方不应该随便乱用<code>&lt;h&gt;</code>标题标签。</li></ul></li><li><p><code>&lt;p&gt;</code>标签与<code>&lt;br&gt;</code>标签：</p><ul><li>爬虫读到<code>&lt;p&gt;</code>标签就知道这是一个段落，而对于<code>&lt;br&gt;</code>标签，默认该标签只用于文本内的换行，例如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">　　 第一行文字内容&lt;br/&gt;</span><br><span class="line">    第二行文字内容&lt;br/&gt;</span><br><span class="line">    第三行文字内容</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>表格应该使用<code>&lt;caption&gt;</code>标签。</p></li><li><code>&lt;img&gt;</code>应使用”alt”属性加以说明，因为爬虫对图片的读取有限。</li><li><code>&lt;strong&gt;</code><code>&lt;em&gt;</code>与<code>&lt;b&gt;</code><code>&lt;i&gt;</code>标签:<ul><li><code>&lt;strong&gt;</code>、<code>&lt;em&gt;</code>标签是在需要强调时使用。</li><li><code>&lt;strong&gt;</code>标签在搜索引擎中能够得到高度的重视（权重NO.1），它能突出关键词，表现重要的内容。</li><li><code>&lt;em&gt;</code>标签强调效果仅次于<code>&lt;strong&gt;</code>标签。</li><li><code>&lt;b&gt;</code>、<code>&lt;i&gt;</code>标签：只是用于显示效果时使用，在SEO中不会起任何效果。</li></ul></li><li>文本缩进不要使用特殊符号<code>&amp;nbsp；</code>，应当使用CSS进行设置（text-indent）。版权符号不要使用特殊符号<code>&amp;copy；</code>可以直接使用输入法，拼“banquan”，选择序号5就能打出版权符号©。</li><li>巧妙利用CSS布局，将重要内容的HTML代码放在最前面，爬虫是从上到下进行内容关键词抓取，最前面的内容被认为是最重要的。</li><li>重要内容不要用JS输出，因为爬虫不认识。</li><li>尽量少使用iframe框架,因为爬虫一般不会读取其中的内容。</li><li>谨慎使用<code>display: none</code>，对于不想显示的文字内容，应当<strong>设置z-index</strong> 或 <strong>设置到浏览器显示器之外</strong>。因为搜索引擎会过滤掉<code>display:none</code>其中的内容。</li><li>不断精简代码，能用一个标签完成的就不要用两个。</li><li>JS代码如果是操作DOM操作，应尽量放在<code>&lt;/body&gt;</code>之前，html代码之后；JS 调用应该尽量放到网页底部。<ul><li>因为浏览器渲染HTML文件是从上往下渲染的，即先执行head标签里面的内容，再执行body标签里的，一行行渲染下去。无论当前JS代码是内嵌还是在外链文件中，页面的下载和渲染都必须停下来等待脚本执行完成。JS执行过程耗时越久，浏览器等待相应用户输入的时间就越长，所以JS尽量放底部可以有一定的性能优化效果。</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;搜索引擎工作原理&quot;&gt;&lt;a href=&quot;#搜索引擎工作原理&quot; class=&quot;headerlink&quot; title=&quot;搜索引擎工作原理&quot;&gt;&lt;/a&gt;搜索引擎工作原理&lt;/h4&gt;&lt;blockquote&gt;当我们在输入框中输入关键词，点击搜索或查询时，然后得到结果。深究其背后的故事，搜索引擎做了很多事情。&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;搜索引擎网站，比如百度，其后台有一个非常庞大的数据库，里面存储了海量的关键词，而每个关键词又对应着很多网址，这些网址都是由&lt;strong&gt;百度程序（爬虫）&lt;/strong&gt;从互联网上下载收集而来的。&lt;strong&gt;网络爬虫&lt;/strong&gt;每天在互联网上爬行，从一个链接到另一个链接，下载其中的内容，进行分析提炼，找到其中的关键词，如果爬虫认为该关键词&lt;strong&gt;在数据库中没有&lt;/strong&gt;而&lt;strong&gt;对用户是有用的便存入数据库&lt;/strong&gt;。反之，如果爬虫认为是&lt;strong&gt;垃圾信息或重复信息&lt;/strong&gt;，就&lt;strong&gt;舍弃不要&lt;/strong&gt;，继续爬行，寻找最新的、有用的信息保存起来提供用户搜索。当用户搜索时，就能检索出&lt;strong&gt;与关键字相关的网址&lt;/strong&gt;显示给访客。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="SEO" scheme="https://chongtianhong.github.io/tags/SEO/"/>
    
  </entry>
  
  <entry>
    <title>静态网页与动态网页的理解</title>
    <link href="https://chongtianhong.github.io/2018/02/15/static/"/>
    <id>https://chongtianhong.github.io/2018/02/15/static/</id>
    <published>2018-02-14T16:04:29.000Z</published>
    <updated>2018-02-18T13:49:55.948Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>浏览器从服务器得到的超文本标记文档的后缀通常分为两大类：<ul><li>静态页面：htm、html、shtml、xml</li><li>动态页面：asp、jsp、php、perl、cgi</li></ul></li><li>静态网页和动态网页有着相同的使命，二者的共同之处在于：<ul><li>首先，它们的目标都是呈现内容给用户</li><li>其次，内容都是用超文本标记语言（HTML）表示的<a id="more"></a></li></ul></li><li>静态网页中的内容是固定写在html文件中的，只需要使用单纯的html语言就可写出一个静态页面。它基本不需要与数据库和后端语言（如java,python,ruby等）的支持；</li><li>动态网页则不同，它的完整页面大体上可以认为是分为两个部分，即<strong>视图模板</strong>和<strong>数据</strong>，<strong>数据</strong>是从后端获得（如从数据库中），然后插入到<strong>视图模板</strong>中。</li></ul><h3 id="静态网页"><a href="#静态网页" class="headerlink" title="静态网页"></a>静态网页</h3><ul><li>静态网页是指存放在服务器文件系统中实实在在的HTML文件。当用户在浏览器中输入页面的URL，然后回车，浏览器就会将对应的html文件下载、渲染并呈现在窗口中。早期的网站通常都是由静态页面制作的。</li><li>通常，使用HTML或XML即可完成静态页面的制作。</li><li>静态网页<strong>一经制成，内容就不会变化</strong>，不管何人何时访问，显示的内容都是一样的。</li><li>如果要修改网页的内容，就必须修改其源代码，然后重新上传到服务器上。</li></ul><h4 id="静态网页的工作原理"><a href="#静态网页的工作原理" class="headerlink" title="静态网页的工作原理"></a>静态网页的工作原理</h4><ul><li>静态网页的工作流程可以分为以下4个步骤：<br>  ① 编写一个静态文件，并在web服务器上发布；<br>  ② 用户在浏览器的地址栏中输入该静态网页的URL并按回车键，浏览器发送访问请求到web服务器；<br>  ③ web服务器找到此静态文件的位置，并将它转换为<strong>HTML流</strong>传到用户的浏览器；<br>  ④ 浏览器收到<strong>HTML流</strong>后，显示此网页的内容。</li><li>在步骤② - ④中，静态网页的内容不会发生任何变化。</li></ul><h3 id="动态网页"><a href="#动态网页" class="headerlink" title="动态网页"></a>动态网页</h3><ul><li>动态网页是指在网页文件中除了HTML标记以外，还包括一些实现特定功能的程序代码，这些程序代码使得浏览器与服务器之间可以进行交互，即<strong>服务端可以根据客户端的不同请求动态产生网页内容</strong>。</li><li>动态网页是相对于静态网页而言的。当浏览器请求服务器的某个页面时，服务器根据当前时间、环境参数、数据库操作等动态的生成HTML页面，然后再发送给浏览器（后面的处理跟静态网页一样）。</li><li>动态网页中的“动态”是指服务器端页面的动态生成，相反，“静态”则指页面是实实在在的、独立的文件。</li><li>动态网页的后缀名通常取决于所用的程序设计语言，一般为.asp、.aspx、.cgi、.psp、.perl、.jsp等。</li><li>动态网页可以<strong>根据</strong> <em>不同的时间</em>、<em>不同的浏览器</em> 显示 <em>不同的信息</em>，比如常见的留言板、论坛、聊天室都是用动态网页实现的。</li><li>动态网页相对复杂，不能直接双击打开。</li></ul><h4 id="动态网页的工作原理"><a href="#动态网页的工作原理" class="headerlink" title="动态网页的工作原理"></a>动态网页的工作原理</h4><ul><li>动态网页的工作流程分为以下4个步骤：<br>  ① 编写动态网页文件，其中包括程序代码，并在web服务器上发布；<br>  ② 用户在浏览器的地址栏中输入该动态网页的URL并按回车键，浏览器发送访问请求到web服务器；<br>  ③ web服务器找到此动态网页的位置，并根据其中的程序代码<strong>动态建立HTML流</strong>传到用户的浏览器；<br>  ④ 浏览器收到<strong>HTML流</strong>后，显示此网页的内容。</li><li>从整个工作流程可以看出，用户浏览动态页面时，需要在服务器上<strong>动态执行</strong>该网页文件，将含有程序代码的<strong>动态网页转化为标准的静态页面</strong>，最后把静态页面发送给用户。</li></ul><h4 id="动态网页的开发技术"><a href="#动态网页的开发技术" class="headerlink" title="动态网页的开发技术"></a>动态网页的开发技术</h4><ul><li>动态网页的生成技术有多中，常见的有：<ul><li>HTML+JavaScript(Node.js)</li><li>HTML+PHP</li><li>HTML+ASP.NET(或ASP)</li><li>HTML+JSP</li><li>HTML+CGI(早期的动态网页技术)</li></ul></li></ul><h4 id="动态网页的特征"><a href="#动态网页的特征" class="headerlink" title="动态网页的特征"></a>动态网页的特征</h4><ul><li>动态网页一般以<strong>数据库</strong>技术为基础，可以大大降低网站维护的工作量；</li><li>采用动态网页技术的网站可以实现更多的功能，如用户注册、用户登录、在线调查、用户管理、订单管理等等；</li><li>动态网页实际上并不是独立存在于服务器上的网页文件，只有当用户请求时服务器才返回一个完整的网页；</li><li>动态网页地址中的“?”对<strong>搜索引擎检索</strong>存在一定的问题，搜索引擎一般不可能从一个网站的数据库中访问全部网页，或者出于技术方面的考虑，搜索爬虫不去抓取网址中“?”后面的内容，因此采用动态网页的网站在进行搜索引擎推广时<strong>需要做一定的技术处理</strong>才能适应搜索引擎的要求。</li></ul><h4 id="动态网页的好处"><a href="#动态网页的好处" class="headerlink" title="动态网页的好处"></a>动态网页的好处</h4><ul><li>维护方便，能实现人们需要的各种需求。</li><li>查询信息方便，能存储大量数据，需要时能立即查询。</li></ul><h4 id="动态网页的不足"><a href="#动态网页的不足" class="headerlink" title="动态网页的不足"></a>动态网页的不足</h4><ul><li>动态网站用到数据库，所以对数据库的安全和保密性要求较高，要专业技术人员提供维护才能保证网站的安全。</li><li>动态网站不利于搜索引擎收录。</li><li>动态网站制作成本较高。</li></ul><h3 id="和谐统一"><a href="#和谐统一" class="headerlink" title="和谐统一"></a>和谐统一</h3><ul><li>静态网页和动态网页各有特点，网站采用动态网页还是静态网页主要取决于网站的功能需求和网站内容的多少，如果网站功能比较简单，内容更新量不是很大，采用纯静态网页的方式会更简单，反之一般要采用动态网页技术来实现。</li><li>静态网页是网站建设的基础，静态网页和动态网页之间也并不矛盾，为了网站适应搜索引擎检索的需要，即使采用动态网站技术，也可以将网页内容转化为静态网页发布。</li><li>动态网站也可以采用静动结合的原则，适合采用动态网页的地方用动态网页，如果必要使用静态网页，则可以考虑用静态网页的方法来实现，在同一个网站上，动态网页内容和静态网页内容同时存在也是很常见的事情。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;浏览器从服务器得到的超文本标记文档的后缀通常分为两大类：&lt;ul&gt;
&lt;li&gt;静态页面：htm、html、shtml、xml&lt;/li&gt;
&lt;li&gt;动态页面：asp、jsp、php、perl、cgi&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;静态网页和动态网页有着相同的使命，二者的共同之处在于：&lt;ul&gt;
&lt;li&gt;首先，它们的目标都是呈现内容给用户&lt;/li&gt;
&lt;li&gt;其次，内容都是用超文本标记语言（HTML）表示的
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Web" scheme="https://chongtianhong.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的this引用</title>
    <link href="https://chongtianhong.github.io/2018/02/14/this/"/>
    <id>https://chongtianhong.github.io/2018/02/14/this/</id>
    <published>2018-02-14T11:48:39.000Z</published>
    <updated>2018-03-05T14:08:15.637Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>JavaScript函数有4种调用模式，分别是：函数直接执行模式、对象方法的调用模式、构造器的调用模式和call和apply调用模式。</li><li>函数调用每种方式的不同在于this值的初始化。</li><li>一般而言，在JavaScript中，this指向函数执行时的当前对象。</li><li>this是保留关键字，不能修改this的值。<a id="more"></a></li></ul><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><ul><li>this是函数内部的一个特殊对象（或this引用）–它引用的是函数据以执行的环境对象。</li><li>this是JavaScript的一个关键字，随着函数使用场合不同，this的值会发生变化。但总有一个原则，即this指的是<strong>调用当前函数的对象</strong>。<ul><li>JavaScript是动态语言，this关键字在执行的时候才能确定其值。</li><li>this永远指向调用者，即对“调用对象”的引用。简单点说，this指向调用当前函数的所属对象。</li><li>根据函数调用方式的不同，this可以指向全局对象，当前对象，或其他任意对象。</li></ul></li><li>this对象（引用）的使用情况可总结为：<ul><li>全局函数调用</li><li>构造函数调用</li><li>对象方法的调用</li><li>通过apply或call方法调用</li><li>原型链中的this</li><li>闭包中的this</li><li>内嵌在HTML元素中的脚本段</li></ul></li></ul><h5 id="全局函数调用"><a href="#全局函数调用" class="headerlink" title="全局函数调用"></a>全局函数调用</h5><ul><li>全局函数中的this会指向全局对象window。（函数调用模式）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var message = <span class="string">"this in window"</span>; //这一句写在函数外面和里面是一样效果</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span>(this == window)&#123;</span><br><span class="line">        alert(<span class="string">"this == window"</span>); </span><br><span class="line">        alert(message);</span><br><span class="line">        this.methodA = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">            alert(<span class="string">"I'm a function"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">func(); //如果不调用func方法，则里面定义的属性或方法会取不到 </span><br><span class="line">methodA();</span><br></pre></td></tr></table></figure><h5 id="构造函数调用"><a href="#构造函数调用" class="headerlink" title="构造函数调用"></a>构造函数调用</h5><ul><li>使用new的方式实例化一个对象，this会指向通过构造函数生成的对象。（构造器调用模式）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Func</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (this == window) &#123;</span><br><span class="line">        alert(<span class="string">"this == window"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">"this != window"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    this.fieldA = <span class="string">"I'm a field"</span>;</span><br><span class="line">    alert(this);</span><br><span class="line">&#125;</span><br><span class="line">var obj = new Func();</span><br><span class="line">alert(obj.fieldA); //this指向的是对象obj</span><br></pre></td></tr></table></figure><h5 id="对象方法的调用"><a href="#对象方法的调用" class="headerlink" title="对象方法的调用"></a>对象方法的调用</h5><ul><li>对象方法的调用，this指向当前对象。任何函数，只要该函数被当做一个对象的方法使用或赋值时，该函数内部的this都是对该对象本身的引用。也可理解为this写在一个普通对象中，this指向的就是对象本身。（方法调用模式）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    x: 3,</span><br><span class="line">    doit: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="keyword">if</span>(this == window)&#123;</span><br><span class="line">            alert(<span class="string">"this == window"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            alert(<span class="string">"method is called: "</span> + this.x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.doit(); //this指向的是对象obj</span><br></pre></td></tr></table></figure><h5 id="通过apply或call方法调用"><a href="#通过apply或call方法调用" class="headerlink" title="通过apply或call方法调用"></a>通过apply或call方法调用</h5><ul><li>通过apply或call方法改变this的指向，this指向传入的对象。</li><li>apply或call方法可以用来代替另一个对象调用一个方法。</li><li>apply或call方法可将一个函数的对象上下文从初始的上下文改变为由thisObj指定的新对象。</li><li>如果没有提供thisObj参数，那么全局对象被用作 thisObj。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    x: 3,</span><br><span class="line">    doit: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        alert(<span class="string">"method is called: "</span> + this.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var obj2 = &#123;x: 4&#125;;</span><br><span class="line">obj.doit(); //3,this指向obj</span><br><span class="line">obj.doit.apply(obj2); //4,this指向obj2</span><br><span class="line">obj.doit.call(obj2); //4,this指向obj2</span><br></pre></td></tr></table></figure><h5 id="原型链中的this"><a href="#原型链中的this" class="headerlink" title="原型链中的this"></a>原型链中的this</h5><ul><li>原型对象及构造函数中的this指向新创建的实例对象。</li><li>使用prototype扩展方法可以使用this获取到源对象的实例，<strong>私有字段</strong>无法通过原型链获取。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Func</span></span>() &#123;</span><br><span class="line">    this.fieldA = <span class="string">"I'm a field"</span>;</span><br><span class="line">    var privateFieldA = <span class="string">"I'm a var"</span>;//私有属性</span><br><span class="line">&#125;</span><br><span class="line">Func.prototype = &#123;//prototype扩展方法可以获取到Func对象的实例</span><br><span class="line">    ExtendMethod: <span class="keyword">function</span>(str) &#123;</span><br><span class="line">        alert(str + <span class="string">" :"</span> + this.fieldA);</span><br><span class="line">        alert(privateFieldA); //出错,私有字段无法通过原型链获取。</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var obj = new Func();</span><br><span class="line">obj.ExtendMethod(<span class="string">"From prototype"</span>); //此时构造函数及原型链中的this指向对象obj</span><br></pre></td></tr></table></figure><h5 id="闭包中的this"><a href="#闭包中的this" class="headerlink" title="闭包中的this"></a>闭包中的this</h5><ul><li>闭包：写在function中的function，this指向全局对象window。</li></ul><blockquote>对象中的闭包</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var name = <span class="string">"The window"</span>;</span><br><span class="line">var obj = &#123;</span><br><span class="line">    name: <span class="string">"My Object"</span>,</span><br><span class="line">    getNameFunc: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">            <span class="built_in">return</span> this.name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">alert(obj.getNameFunc()()); //The window</span><br></pre></td></tr></table></figure><p>可见，闭包中的this指向全局对象window，只能取到全局对象的属性。若要访问对象内部的属性（外部函数的变量），则要把外部函数的this对象保存为一个闭包能访问的变量(that)。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var name = <span class="string">"The window"</span>;</span><br><span class="line">var obj = &#123;</span><br><span class="line">    name: <span class="string">"My Object"</span>,</span><br><span class="line">    getNameFunc: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        var that = this;</span><br><span class="line">        <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">            <span class="built_in">return</span> that.name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">alert(obj.getNameFunc()()); //My object</span><br></pre></td></tr></table></figure></p><ul><li>不管是直接引用function，还是实例化一个function，其返回的闭包函数里的this都是指向window。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">a</span></span>() &#123;</span><br><span class="line">    alert(this == window);</span><br><span class="line">    var that = this;</span><br><span class="line">    var func = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        alert(this == window);</span><br><span class="line">        alert(that);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">return</span> func;</span><br><span class="line">&#125;</span><br><span class="line">var b = a();</span><br><span class="line">b(); //<span class="literal">true</span>, <span class="literal">true</span>, [object Window]</span><br><span class="line">var c = new a();</span><br><span class="line">c(); //<span class="literal">false</span>, <span class="literal">true</span>, [object object]</span><br></pre></td></tr></table></figure><h5 id="内嵌在HTML元素中的脚本段"><a href="#内嵌在HTML元素中的脚本段" class="headerlink" title="内嵌在HTML元素中的脚本段"></a>内嵌在HTML元素中的脚本段</h5><ul><li>内嵌在HTML元素中的脚本段，this指向元素本身。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div onclick=<span class="string">"test(this)"</span> id=<span class="string">"div"</span>&gt;Click Me&lt;/div&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="built_in">test</span>(obj) &#123;</span><br><span class="line">    alert(obj); //[object HTMLDivElement]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="js函数的四种调用方式"><a href="#js函数的四种调用方式" class="headerlink" title="js函数的四种调用方式"></a>js函数的四种调用方式</h4><h5 id="函数直接执行模式"><a href="#函数直接执行模式" class="headerlink" title="函数直接执行模式"></a>函数直接执行模式</h5><ul><li>此时this是全局的,即this指向window。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var c=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    alert(this==window)</span><br><span class="line">&#125;</span><br><span class="line">c()//<span class="literal">true</span></span><br></pre></td></tr></table></figure><h5 id="对象方法的调用模式"><a href="#对象方法的调用模式" class="headerlink" title="对象方法的调用模式"></a>对象方法的调用模式</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var myObj=&#123;</span><br><span class="line">    value:2,</span><br><span class="line">    inc:<span class="keyword">function</span>(num)&#123;</span><br><span class="line">        alert(this.value+num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">myobject.inc(1); //结果3，因为this指向myObj</span><br></pre></td></tr></table></figure><ul><li>注意：内部匿名函数不属于当前对象的函数，因此this指向了全局对象window。</li></ul><h5 id="构造函数调用模式"><a href="#构造函数调用模式" class="headerlink" title="构造函数调用模式"></a>构造函数调用模式</h5><ul><li>用new关键字来新建一个函数对象的调用,this指向被绑定到构造函数的实例上。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ar fn = <span class="keyword">function</span> (status)&#123;</span><br><span class="line">    this.status = status;</span><br><span class="line">&#125;</span><br><span class="line">fn.prototype.get_status = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> this.status;</span><br><span class="line">&#125;</span><br><span class="line">var <span class="built_in">test</span> = new fn(<span class="string">'my status'</span>);</span><br><span class="line">alert(test.get_status);//my status,this指向<span class="built_in">test</span></span><br></pre></td></tr></table></figure><h5 id="apply-call调用模式"><a href="#apply-call调用模式" class="headerlink" title="apply/call调用模式"></a>apply/call调用模式</h5><ul><li>通过call和apply可以重新定义函数的执行环境，即this的指向。</li><li>apply和call一样的用法，只不过apply第二个参数用数组进行传递。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> MyObject(name)&#123;</span><br><span class="line">    this.name=name ||<span class="string">'MyObject'</span>;</span><br><span class="line">    this.value=0;</span><br><span class="line">    this.increment=<span class="keyword">function</span>(num)&#123;</span><br><span class="line">        this.value += typeof(num) === <span class="string">'number'</span> ? num : 0;</span><br><span class="line">    &#125;;</span><br><span class="line">    this.toString=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">'[Object:'</span>+this.name+<span class="string">' &#123;value:'</span>+this.value+<span class="string">'&#125;]'</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    this.target=this;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getInfo</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> this.toString();</span><br><span class="line">&#125;</span><br><span class="line">var myObj=new MyObject();</span><br><span class="line">alert(getInfo.apply(myObj));//[Object:MyObject &#123;value:0&#125;],this指向myObj</span><br><span class="line">alert(getInfo.apply(window));//[object Window],this指向window</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;JavaScript函数有4种调用模式，分别是：函数直接执行模式、对象方法的调用模式、构造器的调用模式和call和apply调用模式。&lt;/li&gt;
&lt;li&gt;函数调用每种方式的不同在于this值的初始化。&lt;/li&gt;
&lt;li&gt;一般而言，在JavaScript中，this指向函数执行时的当前对象。&lt;/li&gt;
&lt;li&gt;this是保留关键字，不能修改this的值。
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（三）</title>
    <link href="https://chongtianhong.github.io/2018/02/13/js3/"/>
    <id>https://chongtianhong.github.io/2018/02/13/js3/</id>
    <published>2018-02-13T13:17:10.000Z</published>
    <updated>2018-02-13T15:07:28.293Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JS事件驱动机制"><a href="#JS事件驱动机制" class="headerlink" title="JS事件驱动机制"></a>JS事件驱动机制</h3><ul><li>由鼠标或热键引发的一连串程序的动作，称之为事件驱动</li><li>对事件进行处理程序或函数，我们称之为事件处理程序<a id="more"></a></li></ul><h4 id="事件的分类"><a href="#事件的分类" class="headerlink" title="事件的分类"></a>事件的分类</h4><ul><li>鼠标事件：当用户在页面上用鼠标点击页面元素时，对应的dom节点会触发鼠标事件，主要有click、dblclick、mousedown、mouseout、mouseover、mousemove等。</li><li>键盘事件：当用户用键盘输入信息时，会触发键盘操作事件。主要包括keydown、keypress、keyup三个。</li><li>HTML事件：在HTML节点加载变更等相关的事件，比如window的onload、unload、abort、error，文本框select、change等。</li><li>其他事件：页面中一些特殊对象运行过程中产生的事件，比如xmlhttprequest对象的相关事件。</li></ul><h5 id="关于事件绑定"><a href="#关于事件绑定" class="headerlink" title="关于事件绑定"></a>关于事件绑定</h5><ol><li><p>直接和某个html控件绑定 比如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"刷新页面"</span> onclick=<span class="string">"test()"</span>/&gt;</span><br></pre></td></tr></table></figure></li><li><p>通过getElementById()获取到元素后，再绑定监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    document.getElementById(<span class="string">"but1"</span>).onclik=<span class="built_in">test</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>detachEvent与attachEvent，假设我们有一个投票系统，但是只能投一次票，需要解除绑定机制，非ie浏览器用的addEventListener/RemoveEventListener，代码实例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    document.getElementById(<span class="string">"but1"</span>).attachEvent(<span class="string">"onclick"</span>,<span class="built_in">test</span>);</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">test</span></span>()&#123;</span><br><span class="line">    window.alert(<span class="string">'you have one vote'</span>);</span><br><span class="line">    document.getElementById(<span class="string">"but1"</span>).detachEvent(<span class="string">"onclick"</span>,<span class="built_in">test</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"button"</span> id=<span class="string">"but1"</span> value=<span class="string">"vote"</span>/&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="DOM编程"><a href="#DOM编程" class="headerlink" title="DOM编程"></a>DOM编程</h3><ul><li>通过DOM编程，可以写出各种网页游戏</li><li>DOM编程也是ajax的重要基础</li><li>将HTML文档看成一颗DOM树,<code>&lt;html&gt;</code>标签为网页的根节点</li><li>HTML DOM把html文档呈现为带有元素、属性和文本的树结构(节点树)</li><li>HTML DOM对象只通过方法对元素进行动态的控制</li></ul><p><img src="/images/dom.png" width="500" alt="dom" style="border:none"></p><h3 id="BOM-浏览器对象模型"><a href="#BOM-浏览器对象模型" class="headerlink" title="BOM 浏览器对象模型"></a>BOM 浏览器对象模型</h3><h4 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h4><blockquote>confirm</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span>()&#123;</span><br><span class="line">    var res=window.confirm(<span class="string">"你要删除吗？"</span>);</span><br><span class="line">    <span class="keyword">if</span>(res)&#123;</span><br><span class="line">        window.alert(<span class="string">"删除"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        window.alert(<span class="string">"放弃删除"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote>setInterval()</blockquote><ul><li>该函数可以<strong>按照指定的周期</strong>（以毫秒计）来调用函数或计算表达式。</li></ul><blockquote>clearInrerval()</blockquote><ul><li>取消由 setInterval() 设置的 timeout。</li></ul><blockquote>setTimeout()</blockquote><ul><li>在指定的毫秒数后调用函数或计算表达式(只能调用一次)。</li></ul><blockquote>clearTimeout()</blockquote><ul><li>取消由 setTimeout() 方法设置的 timeout。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span>()&#123;</span><br><span class="line">window.alert(<span class="string">"hello"</span>);</span><br><span class="line">&#125;</span><br><span class="line">var mytimer=setTimeout(<span class="string">"test()"</span>,3000);</span><br><span class="line">clearTimeout(mytimer);</span><br></pre></td></tr></table></figure><blockquote>moveTo()/moveBy()</blockquote><ul><li>moveTo() 方法可把窗口的左上角移动到一个指定的坐标。</li><li>moveBy() 方法可相对窗口的当前坐标把它移动指定的像素。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">window.moveTo(100,100)//相对屏幕的左上角，移动到(100,100)</span><br><span class="line">window.moveBy(100,100)//相对当前这个窗口的左上角再移动(100,100)</span><br></pre></td></tr></table></figure><blockquote>resizeTo()/resizeBy()</blockquote><ul><li>resizeTo() 方法用于把窗口大小调整为指定的宽度和高度。</li><li>resizeBy() 方法用于根据指定的像素来调整窗口的大小。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resizeTo(100,100)//把窗口调整到100,100</span><br><span class="line">resizeBy(100,100)//把窗口再增加100，100</span><br></pre></td></tr></table></figure><h4 id="Screen-对象"><a href="#Screen-对象" class="headerlink" title="Screen 对象"></a>Screen 对象</h4><ul><li>Screen 对象包含有关客户端显示屏幕的信息。</li></ul><h4 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h4><ul><li>History 对象包含用户（在浏览器窗口中）访问过的 URL。</li><li>History 对象是 window 对象的一部分，可通过 window.history 属性对其进行访问。</li><li>back() 方法可加载历史列表中的前一个 URL（如果存在）。<ul><li>history.back() ~ history.go(-1)</li></ul></li><li>属性： history.length 返回浏览器历史列表中的 URL 数量。</li></ul><h4 id="Location-对象"><a href="#Location-对象" class="headerlink" title="Location 对象"></a>Location 对象</h4><ul><li>Location 对象包含有关当前 URL 的信息。</li><li>Location 对象是 Window 对象的一个部分，可通过window.location 属性来访问。</li><li>reload() 重新加载改文档。</li></ul><h4 id="Navigator对象"><a href="#Navigator对象" class="headerlink" title="Navigator对象"></a>Navigator对象</h4><ul><li>包含有关浏览器的信息</li></ul><h3 id="Document-对象"><a href="#Document-对象" class="headerlink" title="Document 对象"></a>Document 对象</h3><ul><li>定义：document 对象代表的整个html文档，因此可以去访问到文档中的各个对象（元素）</li></ul><blockquote>document.write</blockquote><ul><li>向文档输出文本或是js代码</li></ul><blockquote>document.writeln</blockquote><ul><li>这个是向文档输出文本或是js代码，与write不一样的地方是，writeln是换行输出。</li><li>但是对于浏览器来说，输出效果没什么区别</li></ul><blockquote>document.getElementById()</blockquote><ul><li>规定html文档中id号要唯一，如果不唯一，则只取第一个元素。</li><li>id不能用数字开头</li></ul><blockquote>document.getElementsByName()</blockquote><ul><li>通过html控件的名字返回<strong>对象集合</strong>(注意不是数组)</li></ul><blockquote>document.getElementsByTagName</blockquote><ul><li>通过html的标签名返回<strong>对象集合</strong>(注意不是数组)</li></ul><h4 id="如何动态的创建添加删除html元素"><a href="#如何动态的创建添加删除html元素" class="headerlink" title="如何动态的创建添加删除html元素"></a>如何动态的创建添加删除html元素</h4><ul><li>createElement()</li><li>appendChild()</li><li>removeChild() 必须获得父元素</li><li>parentNode 属性以 Node 对象的形式返回指定节点的父节点。</li><li>在dom编程中，一个html文档会被当做一个dom树来对待，dom会把所有的html元素映射成Node节点，于是就可以使用Node节点（对象）的属性和方法</li></ul><h4 id="body对象"><a href="#body对象" class="headerlink" title="body对象"></a>body对象</h4><ul><li>innerHTML 作为html来解析</li><li>innerText 当做文本来解析</li><li>appendChild()</li><li>removeChild()</li><li>getElementByTagName()</li><li>bgColor 该属性规定文档的背景颜色</li><li>onload 文档加载时触发</li><li>onunload 文档关闭时触发</li><li>onbeforeunload事件 文档关闭前触发</li><li>onScroll事件 用户拉动滚动条时触发</li><li>onselectstart事件 用户选中文档body体的内容时触发</li><li>body.clientWidth 网页可见区域宽，该属性包括内边距，但不包括垂直滚动条（如果有）、边框和外边距</li><li>body.clientHeight 网页可见区域高，该属性包括内边距，但不包括垂直滚动条（如果有）、边框和外边距</li><li>offsetWidth 网页可见区域宽(包括边线的宽)</li><li>offsetHeight 网页可见区域高(包括边线的高)</li></ul><h4 id="style对象"><a href="#style对象" class="headerlink" title="style对象"></a>style对象</h4><h4 id="forms-对象"><a href="#forms-对象" class="headerlink" title="forms 对象"></a>forms 对象</h4><ul><li>document.forms</li><li>length:返回大小</li><li>item(index):指定取出forms对象集合的第几个form对象</li><li>document.forms[i].value</li><li>document.forms.item[i].value</li></ul><h4 id="img-对象"><a href="#img-对象" class="headerlink" title="img 对象"></a>img 对象</h4><ul><li>onload()</li><li>onerror()</li></ul><h4 id="table-对象"><a href="#table-对象" class="headerlink" title="table 对象"></a>table 对象</h4><ul><li>rows 行</li><li>cells 列</li><li>deletRow() 删除一行</li><li>insertRow() insertCell() 插入行再在行中插入列</li><li>遍历一个table<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(var i=0;i&lt;mytab.rows.length;i++)&#123;</span><br><span class="line">//取出一行</span><br><span class="line">    var eachRow=mytab.rows[i];</span><br><span class="line">//对该行遍历</span><br><span class="line"><span class="keyword">for</span>(var j=0;j&lt;eachRow.cells.length;j++)&#123;</span><br><span class="line">    window.alert(eachRow.cells[j].innerText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JS事件驱动机制&quot;&gt;&lt;a href=&quot;#JS事件驱动机制&quot; class=&quot;headerlink&quot; title=&quot;JS事件驱动机制&quot;&gt;&lt;/a&gt;JS事件驱动机制&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;由鼠标或热键引发的一连串程序的动作，称之为事件驱动&lt;/li&gt;
&lt;li&gt;对事件进行处理程序或函数，我们称之为事件处理程序
    
    </summary>
    
      <category term="开发" scheme="https://chongtianhong.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://chongtianhong.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="https://chongtianhong.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
